{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/app/providers.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Providers = registerClientReference(\n    function() { throw new Error(\"Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/providers.tsx <module evaluation>\",\n    \"Providers\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,mDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/app/providers.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Providers = registerClientReference(\n    function() { throw new Error(\"Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/providers.tsx\",\n    \"Providers\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,+BACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/inter_e8e54af.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"inter_e8e54af-module__r7opxW__className\",\n  \"variable\": \"inter_e8e54af-module__r7opxW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/inter_e8e54af.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22variable%22:%22--font-inter%22}],%22variableName%22:%22inter%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Inter', 'Inter Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,+JAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,+JAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,+JAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/app/fonts.ts"],"sourcesContent":["import { Inter } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n})\n\nexport const fonts = {\n  inter,\n}"],"names":[],"mappings":";;;;;;AAOO,MAAM,QAAQ;IACnB,OAAA,mJAAK;AACP","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport \"./globals.css\";\nimport { Providers } from \"./providers\";\nimport { fonts } from \"./fonts\";\nimport { AuthProvider } from \"@saas-ui/auth\";\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className={fonts.inter.variable}>\n      <body>\n        <Providers>\n          <AuthProvider>{children}</AuthProvider>\n        </Providers>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;;;;;;AAEO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC;QAAK,MAAK;QAAK,WAAW,qHAAK,CAAC,KAAK,CAAC,QAAQ;kBAC7C,cAAA,8OAAC;sBACC,cAAA,8OAAC,8HAAS;0BACR,cAAA,8OAAC,sKAAY;8BAAE;;;;;;;;;;;;;;;;;;;;;AAKzB","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/node_modules/next/src/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-rsc']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/dist/index.mjs/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Auth = registerClientReference(\n    function() { throw new Error(\"Attempted to call Auth() from the server but Auth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"Auth\",\n);\nexport const AuthContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthContext() from the server but AuthContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"AuthContext\",\n);\nexport const AuthFormContainer = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormContainer() from the server but AuthFormContainer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"AuthFormContainer\",\n);\nexport const AuthFormDivider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormDivider() from the server but AuthFormDivider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"AuthFormDivider\",\n);\nexport const AuthFormSuccess = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormSuccess() from the server but AuthFormSuccess is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"AuthFormSuccess\",\n);\nexport const AuthFormTitle = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormTitle() from the server but AuthFormTitle is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"AuthFormTitle\",\n);\nexport const AuthProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthProvider() from the server but AuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"AuthProvider\",\n);\nexport const Authenticated = registerClientReference(\n    function() { throw new Error(\"Attempted to call Authenticated() from the server but Authenticated is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"Authenticated\",\n);\nexport const ForgotPasswordForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call ForgotPasswordForm() from the server but ForgotPasswordForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"ForgotPasswordForm\",\n);\nexport const ForgotPasswordView = registerClientReference(\n    function() { throw new Error(\"Attempted to call ForgotPasswordView() from the server but ForgotPasswordView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"ForgotPasswordView\",\n);\nexport const LoginButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginButton() from the server but LoginButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"LoginButton\",\n);\nexport const LoginView = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginView() from the server but LoginView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"LoginView\",\n);\nexport const MagicLinkForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call MagicLinkForm() from the server but MagicLinkForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"MagicLinkForm\",\n);\nexport const OtpForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call OtpForm() from the server but OtpForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"OtpForm\",\n);\nexport const OtpView = registerClientReference(\n    function() { throw new Error(\"Attempted to call OtpView() from the server but OtpView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"OtpView\",\n);\nexport const PasswordForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call PasswordForm() from the server but PasswordForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"PasswordForm\",\n);\nexport const ProviderButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call ProviderButton() from the server but ProviderButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"ProviderButton\",\n);\nexport const Providers = registerClientReference(\n    function() { throw new Error(\"Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"Providers\",\n);\nexport const SignupView = registerClientReference(\n    function() { throw new Error(\"Attempted to call SignupView() from the server but SignupView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"SignupView\",\n);\nexport const UpdatePasswordForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdatePasswordForm() from the server but UpdatePasswordForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"UpdatePasswordForm\",\n);\nexport const UpdatePasswordView = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdatePasswordView() from the server but UpdatePasswordView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"UpdatePasswordView\",\n);\nexport const VIEWS = registerClientReference(\n    function() { throw new Error(\"Attempted to call VIEWS() from the server but VIEWS is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"VIEWS\",\n);\nexport const useAuth = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAuth() from the server but useAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"useAuth\",\n);\nexport const useCurrentUser = registerClientReference(\n    function() { throw new Error(\"Attempted to call useCurrentUser() from the server but useCurrentUser is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"useCurrentUser\",\n);\nexport const useLogin = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLogin() from the server but useLogin is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"useLogin\",\n);\nexport const useOtp = registerClientReference(\n    function() { throw new Error(\"Attempted to call useOtp() from the server but useOtp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"useOtp\",\n);\nexport const useResetPassword = registerClientReference(\n    function() { throw new Error(\"Attempted to call useResetPassword() from the server but useResetPassword is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"useResetPassword\",\n);\nexport const useSignUp = registerClientReference(\n    function() { throw new Error(\"Attempted to call useSignUp() from the server but useSignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"useSignUp\",\n);\nexport const useUpdatePassword = registerClientReference(\n    function() { throw new Error(\"Attempted to call useUpdatePassword() from the server but useUpdatePassword is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs <module evaluation>\",\n    \"useUpdatePassword\",\n);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/dist/index.mjs/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Auth = registerClientReference(\n    function() { throw new Error(\"Attempted to call Auth() from the server but Auth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"Auth\",\n);\nexport const AuthContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthContext() from the server but AuthContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"AuthContext\",\n);\nexport const AuthFormContainer = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormContainer() from the server but AuthFormContainer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"AuthFormContainer\",\n);\nexport const AuthFormDivider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormDivider() from the server but AuthFormDivider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"AuthFormDivider\",\n);\nexport const AuthFormSuccess = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormSuccess() from the server but AuthFormSuccess is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"AuthFormSuccess\",\n);\nexport const AuthFormTitle = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthFormTitle() from the server but AuthFormTitle is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"AuthFormTitle\",\n);\nexport const AuthProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthProvider() from the server but AuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"AuthProvider\",\n);\nexport const Authenticated = registerClientReference(\n    function() { throw new Error(\"Attempted to call Authenticated() from the server but Authenticated is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"Authenticated\",\n);\nexport const ForgotPasswordForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call ForgotPasswordForm() from the server but ForgotPasswordForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"ForgotPasswordForm\",\n);\nexport const ForgotPasswordView = registerClientReference(\n    function() { throw new Error(\"Attempted to call ForgotPasswordView() from the server but ForgotPasswordView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"ForgotPasswordView\",\n);\nexport const LoginButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginButton() from the server but LoginButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"LoginButton\",\n);\nexport const LoginView = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginView() from the server but LoginView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"LoginView\",\n);\nexport const MagicLinkForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call MagicLinkForm() from the server but MagicLinkForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"MagicLinkForm\",\n);\nexport const OtpForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call OtpForm() from the server but OtpForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"OtpForm\",\n);\nexport const OtpView = registerClientReference(\n    function() { throw new Error(\"Attempted to call OtpView() from the server but OtpView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"OtpView\",\n);\nexport const PasswordForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call PasswordForm() from the server but PasswordForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"PasswordForm\",\n);\nexport const ProviderButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call ProviderButton() from the server but ProviderButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"ProviderButton\",\n);\nexport const Providers = registerClientReference(\n    function() { throw new Error(\"Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"Providers\",\n);\nexport const SignupView = registerClientReference(\n    function() { throw new Error(\"Attempted to call SignupView() from the server but SignupView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"SignupView\",\n);\nexport const UpdatePasswordForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdatePasswordForm() from the server but UpdatePasswordForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"UpdatePasswordForm\",\n);\nexport const UpdatePasswordView = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdatePasswordView() from the server but UpdatePasswordView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"UpdatePasswordView\",\n);\nexport const VIEWS = registerClientReference(\n    function() { throw new Error(\"Attempted to call VIEWS() from the server but VIEWS is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"VIEWS\",\n);\nexport const useAuth = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAuth() from the server but useAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"useAuth\",\n);\nexport const useCurrentUser = registerClientReference(\n    function() { throw new Error(\"Attempted to call useCurrentUser() from the server but useCurrentUser is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"useCurrentUser\",\n);\nexport const useLogin = registerClientReference(\n    function() { throw new Error(\"Attempted to call useLogin() from the server but useLogin is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"useLogin\",\n);\nexport const useOtp = registerClientReference(\n    function() { throw new Error(\"Attempted to call useOtp() from the server but useOtp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"useOtp\",\n);\nexport const useResetPassword = registerClientReference(\n    function() { throw new Error(\"Attempted to call useResetPassword() from the server but useResetPassword is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"useResetPassword\",\n);\nexport const useSignUp = registerClientReference(\n    function() { throw new Error(\"Attempted to call useSignUp() from the server but useSignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"useSignUp\",\n);\nexport const useUpdatePassword = registerClientReference(\n    function() { throw new Error(\"Attempted to call useUpdatePassword() from the server but useUpdatePassword is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@saas-ui/auth/dist/index.mjs\",\n    \"useUpdatePassword\",\n);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/index.ts","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/forms/forgot-password-form.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/login-button.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/forms/update-password-form.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/forms/magic-link-form.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/forms/otp-form.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/forms/password-form.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/forms/providers.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/provider-button.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/auth-form.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/auth.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/login-view.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/success.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/forgot-password-view.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/update-password-view.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/otp-view.tsx","file:///home/joeagharib/My-Github/taskhive/client/node_modules/%40saas-ui/auth/src/components/authenticated.tsx"],"sourcesContent":["export {\n  AuthContext,\n  AuthProvider,\n  useAuth,\n  useCurrentUser,\n  useLogin,\n  useOtp,\n  useResetPassword,\n  useSignUp,\n  useUpdatePassword,\n} from '@saas-ui/auth-provider'\nexport type {\n  AuthActionEnum,\n  AuthContextValue,\n  AuthFunction,\n  AuthOptions,\n  AuthParams,\n  AuthStateChangeCallback,\n  AuthToken,\n  AuthTypeEnum,\n  DefaultUser,\n  ExtraAuthOptions,\n  UseLoginProps,\n  User,\n  AuthProviderProps,\n} from '@saas-ui/auth-provider'\n\nexport {\n  Auth,\n  AuthFormContainer,\n  AuthFormDivider,\n  AuthFormSuccess,\n  AuthFormTitle,\n  ForgotPasswordForm,\n  ForgotPasswordView,\n  LoginButton,\n  LoginView,\n  MagicLinkForm,\n  OtpForm,\n  OtpView,\n  PasswordForm,\n  ProviderButton,\n  Providers,\n  SignupView,\n  UpdatePasswordForm,\n  UpdatePasswordView,\n  VIEWS,\n  Authenticated,\n} from './components'\n\nexport type {\n  AuthFormContainerProps,\n  AuthFormDividerProps,\n  AuthFormOptions,\n  AuthFormSuccessProps,\n  AuthProps,\n  AuthViewOptions,\n  AvailableProviders,\n  ForgotPasswordFormProps,\n  ForgotPasswordViewProps,\n  MagicLinkFormProps,\n  OtpFormProps,\n  PasswordFormProps,\n  ProvidersProps,\n  UpdatePasswordFormProps,\n  UpdatePasswordViewProps,\n  Provider,\n  AuthenticatedProps,\n} from './components'\n","import * as React from 'react'\n\nimport { Form, FormLayout, Field, FormProps, FieldValues } from '@saas-ui/forms'\n\nimport { LoginButton } from '../login-button'\n\nexport interface ForgotPasswordSubmitParams {\n  email: string\n  [key: string]: any\n}\n\nexport interface ForgotPasswordFormProps<\n  Params extends FieldValues = ForgotPasswordSubmitParams,\n> extends Omit<FormProps<any, Params>, 'children'> {\n  children?: React.ReactNode\n}\n\nexport const ForgotPasswordForm: React.FC<ForgotPasswordFormProps> = ({\n  children,\n  ...formProps\n}) => {\n  return (\n    <Form defaultValues={{ email: '' }} {...formProps}>\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label=\"Your email address\"\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\">\n          Reset password\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nForgotPasswordForm.displayName = 'ForgotPasswordForm'\n","import * as React from 'react'\n\nimport { useTheme } from '@chakra-ui/react'\nimport { SubmitButton, SubmitButtonProps } from '@saas-ui/forms'\n\nexport const LoginButton: React.FC<SubmitButtonProps> = (props) => {\n  const theme = useTheme()\n\n  const defaultProps = {\n    h: '10',\n    variant: 'solid',\n    colorScheme: 'primary',\n    ...theme.components?.LoginButton?.defaultProps,\n  }\n\n  return <SubmitButton {...defaultProps} {...props} />\n}\n\nLoginButton.displayName = 'LoginButton'\n","import * as React from 'react'\n\nimport {\n  Form,\n  FormProps,\n  FormLayout,\n  Field,\n  UseFormReturn,\n  FieldValues,\n} from '@saas-ui/forms'\n\nimport { LoginButton } from '../login-button'\n\nexport interface UpdatePasswordSubmitParams {\n  password: string\n  confirmPassword: string\n  [key: string]: any\n}\n\nexport interface UpdatePasswordFormProps<\n  Params extends FieldValues = UpdatePasswordSubmitParams,\n> extends Omit<FormProps<any, Params>, 'children'> {\n  children?: React.ReactNode\n}\n\nexport const UpdatePasswordForm: React.FC<UpdatePasswordFormProps> = ({\n  children,\n  ...formProps\n}) => {\n  const formRef =\n    React.useRef<UseFormReturn<UpdatePasswordSubmitParams, object>>(null)\n\n  const validatePassword = React.useCallback((confirmPassword: string) => {\n    const password = formRef.current?.getValues('password')\n    return confirmPassword === password\n  }, [])\n\n  return (\n    <Form\n      defaultValues={{ password: '', confirmPassword: '' }}\n      formRef={formRef}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"password\"\n          label=\"New password\"\n          type=\"password\"\n          rules={{ required: true }}\n          autoComplete=\"current-password\"\n        />\n\n        <Field\n          name=\"confirmPassword\"\n          label=\"Confirm password\"\n          type=\"password\"\n          rules={{ validate: validatePassword }}\n          autoComplete=\"new-password\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\">\n          Update password\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nUpdatePasswordForm.displayName = 'UpdatePasswordForm'\n","import * as React from 'react'\n\nimport { Form, FormLayout, Field, FormProps, FieldValues } from '@saas-ui/forms'\nimport { LoginButton } from '../login-button'\n\nexport interface MagicLinkFormProps<\n  Params extends FieldValues = MagicLinkSubmitParams,\n> extends Omit<FormProps<any, Params>, 'children'> {\n  children?: React.ReactNode\n}\n\nexport interface MagicLinkSubmitParams {\n  email: string\n  [key: string]: any\n}\n\nexport const MagicLinkForm: React.FC<MagicLinkFormProps> = ({\n  children,\n  ...formProps\n}) => {\n  return (\n    <Form defaultValues={{ email: '' }} {...formProps}>\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label=\"Email\"\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\">\n          Continue with Email\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nMagicLinkForm.displayName = 'MagicLinkForm'\n","import * as React from 'react'\n\nimport {\n  Form,\n  FormLayout,\n  FormProps,\n  PinField,\n  FieldValues,\n} from '@saas-ui/forms'\n\nimport { LoginButton } from '../login-button'\n\nexport interface OtpSubmitParams {\n  otp: string\n  [key: string]: any\n}\n\nexport interface OtpFormProps<Params extends FieldValues = OtpSubmitParams>\n  extends Omit<FormProps<any, Params>, 'children'> {\n  pinLength?: number\n  children?: React.ReactNode\n}\n\nexport const OtpForm: React.FC<OtpFormProps> = ({\n  pinLength = 4,\n  defaultValues,\n  children,\n  ...formProps\n}) => {\n  return (\n    <Form defaultValues={{ otp: '' }} {...formProps}>\n      <FormLayout>\n        <PinField\n          name=\"otp\"\n          label=\"Your verification code\"\n          help=\"You can find your one-time password in the Google Authenticator or Authy app.\"\n          type=\"pin\"\n          pinLength={pinLength}\n          rules={{ required: true }}\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\">\n          Verify\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nOtpForm.displayName = 'OtpForm'\n","import * as React from 'react'\n\nimport { Form, FormProps, FormLayout, Field, FieldValues } from '@saas-ui/forms'\n\nimport { LoginButton } from '../login-button'\n\nexport interface PasswordSubmitParams {\n  email: string\n  password: string\n  rememberMe?: boolean\n  [key: string]: any\n}\n\nexport interface PasswordFormProps<\n  Params extends FieldValues = PasswordSubmitParams,\n> extends Omit<FormProps<any, Params>, 'children'> {\n  children?: React.ReactNode\n}\n\nexport const PasswordForm: React.FC<PasswordFormProps> = ({\n  defaultValues,\n  children,\n  ...formProps\n}) => {\n  return (\n    <Form defaultValues={{ email: '', password: '' }} {...formProps}>\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label=\"Email\"\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n        <Field\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          rules={{ required: true }}\n          autoComplete=\"current-password\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\">\n          Log in\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nPasswordForm.displayName = 'PasswordForm'\n","import * as React from 'react'\n\nimport { SimpleGrid, Icon, ButtonProps } from '@chakra-ui/react'\nimport { callAllHandlers } from '@chakra-ui/utils'\n\nimport { ProviderButton } from '../provider-button'\nimport { AuthOptions } from '@saas-ui/auth-provider'\n\nexport interface Provider extends ButtonProps {\n  /**\n   * The provider name\n   */\n  name: string\n  /**\n   * The provider icon\n   */\n  icon?: any\n  /**\n   * The provider color\n   */\n  color?: string\n  /**\n   * The provider scopes\n   */\n  scopes?: string\n}\n\nexport interface AvailableProviders {\n  [id: string]: Provider\n}\n\nexport interface ProvidersProps<\n  TProviders extends AvailableProviders = AvailableProviders,\n> {\n  /**\n   * The available providers\n   */\n  providers: TProviders\n  /**\n   * The label prefix\n   * @default 'Continue with'\n   */\n  labelPrefix?: string\n  /**\n   * The on sign in callback\n   * @param providerId The provider id\n   */\n  onSignIn: (\n    providerId: Extract<keyof TProviders, string>,\n    options: AuthOptions\n  ) => void\n}\n\nexport const Providers = <\n  TProviders extends AvailableProviders = AvailableProviders,\n>({\n  providers,\n  onSignIn,\n  labelPrefix = 'Continue with',\n  ...rest\n}: ProvidersProps<TProviders>) => {\n  if (!providers) {\n    return null\n  }\n\n  return (\n    <SimpleGrid spacing={4} {...rest}>\n      {Object.entries(providers).map(([id, provider]) => {\n        const { name, icon, color, scopes, ...rest } = provider\n\n        return (\n          <ProviderButton\n            key={id}\n            color={color}\n            leftIcon={icon && <Icon as={icon} />}\n            {...rest}\n            onClick={callAllHandlers(rest.onClick, () =>\n              onSignIn(id as any, { scopes })\n            )}\n          >\n            {labelPrefix} {name}\n          </ProviderButton>\n        )\n      })}\n    </SimpleGrid>\n  )\n}\n\nProviders.displayName = 'Providers'\n","import * as React from 'react'\n\nimport { Button, ButtonProps, useTheme } from '@chakra-ui/react'\n\nexport const ProviderButton: React.FC<ButtonProps> = (props) => {\n  const { children, ...rest } = props\n  const theme = useTheme()\n\n  const defaultProps = {\n    h: 10,\n    variant: 'outline',\n    ...theme.components?.ProviderButton?.defaultProps,\n  }\n\n  return (\n    <Button {...defaultProps} {...rest}>\n      {children}\n    </Button>\n  )\n}\n\nProviderButton.displayName = 'ProviderButton'\n","import * as React from 'react'\n\nimport {\n  chakra,\n  HTMLChakraProps,\n  ThemingProps,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n  createStylesContext,\n  Divider,\n  HStack,\n  Text,\n} from '@chakra-ui/react'\nimport { cx } from '@chakra-ui/utils'\n\nimport { FieldErrors, FieldValues } from '@saas-ui/forms'\n\nimport { AvailableProviders } from './forms/providers'\nimport { AuthTypeEnum, AuthActionEnum } from '@saas-ui/auth-provider'\n\nconst [StylesProvider, useStyles] = createStylesContext('SuiAuthForm')\n\nexport interface AuthViewOptions<\n  TFieldValues extends FieldValues = FieldValues,\n> {\n  /**\n   * The submit action, `logIn` or `signUp`\n   */\n  action?: AuthActionEnum\n  /**\n   * The authentication type, `magiclink` or `password`\n   */\n  type?: AuthTypeEnum\n  /**\n   * The form title\n   */\n  title?: React.ReactNode\n  /**\n   * Children are passed down to the underlying form\n   */\n  children?: React.ReactNode\n  /**\n   * Render custom elements under the submit button\n   */\n  footer?: React.ReactNode\n  /**\n   * Callback executed after succesful login or signup\n   */\n  onSuccess?: (data: any) => void\n  /**\n   * Error handler if login or signup fails\n   */\n  onError?: (error: Error) => void\n  /**\n   * Callback executed when there are validation errors\n   */\n  onValidationError?: (errors: FieldErrors<TFieldValues>) => void\n}\n\nexport interface AuthFormOptions {\n  /**\n   * The form title\n   */\n  title?: React.ReactNode\n  /**\n   * The authentication type, `magiclink` or `password`\n   */\n  type?: AuthTypeEnum\n  /**\n   * List of OAuth providers\n   */\n  providers?: AvailableProviders\n  /**\n   * The redirect URL after succesful OAuth or Magic link login\n   */\n  redirectUrl?: string\n  /**\n   * Label for the provider buttons\n   * @default \"Continue with\"\n   */\n  providerLabel?: string\n  /**\n   * Label for the divider between oath and the form\n   * @default \"or continue with\"\n   */\n  dividerLabel?: string\n  /**\n   * The child component\n   */\n  children?: React.ReactNode\n  /**\n   * Render custom elements under the submit button\n   */\n  footer?: React.ReactNode\n}\n\nexport interface AuthFormContainerProps\n  extends HTMLChakraProps<'div'>,\n    ThemingProps<'SuiAuthForm'> {}\n\nexport const AuthFormContainer: React.FC<AuthFormContainerProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig('SuiAuthForm', props)\n\n  const containerProps = omitThemingProps(props)\n\n  const containerStyles: SystemStyleObject = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    width: 'full',\n    ...styles.container,\n  }\n\n  return (\n    <StylesProvider value={styles}>\n      <chakra.div\n        __css={containerStyles}\n        {...containerProps}\n        className={cx('sui-auth-form', props.className)}\n      >\n        {children}\n      </chakra.div>\n    </StylesProvider>\n  )\n}\n\nAuthFormContainer.displayName = 'AuthFormContainer'\n\nexport interface AuthFormDividerProps {\n  label?: string\n}\n\nexport const AuthFormDivider: React.FC<AuthFormDividerProps> = (props) => {\n  const { label, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <HStack color=\"muted\" fontSize=\"sm\" my=\"4\">\n      <Divider {...rest} sx={styles.divider} />\n      <Text flexShrink=\"0\">{label}</Text>\n      <Divider {...rest} sx={styles.divider} />\n    </HStack>\n  )\n}\n\nexport const AuthFormTitle: React.FC<HTMLChakraProps<'h2'>> = ({\n  children,\n  ...rest\n}) => {\n  const styles = useStyles()\n\n  const titleStyles: SystemStyleObject = {\n    fontSize: '2xl',\n    fontWeight: 'bold',\n    textAlign: 'center',\n    mb: 8,\n    ...styles.title,\n  }\n\n  return (\n    <chakra.h2\n      __css={titleStyles}\n      {...rest}\n      className={cx('sui-auth-form__title', rest.className)}\n    >\n      {children}\n    </chakra.h2>\n  )\n}\n\nAuthFormTitle.displayName = 'AuthFormTitle'\n","import * as React from 'react'\n\nimport { chakra, Link, useControllableState } from '@chakra-ui/react'\n\nimport { AuthFormOptions } from './auth-form'\nimport { LoginView, SignupView } from './login-view'\nimport { ForgotPasswordView } from './forgot-password-view'\nimport { UpdatePasswordView } from './update-password-view'\nimport { OtpView } from './otp-view'\nimport { AvailableProviders } from './forms/providers'\nimport { FormProps } from '@saas-ui/forms'\nimport { AuthFormSuccess } from './success'\n\nexport const VIEWS = {\n  LOGIN: 'login',\n  SIGNUP: 'signup',\n  FORGOT_PASSWORD: 'forgot_password',\n  UPDATE_PASSWORD: 'update_password',\n  OTP: 'otp',\n} as const\n\ntype ValueOf<T> = T[keyof T]\ntype ViewType = ValueOf<typeof VIEWS>\n\nexport type RedirectViews =\n  | typeof VIEWS.LOGIN\n  | typeof VIEWS.SIGNUP\n  | typeof VIEWS.FORGOT_PASSWORD\n\nexport interface AuthProps\n  extends Omit<AuthFormOptions, 'redirectUrl'>,\n    Omit<\n      FormProps<any, any>,\n      'title' | 'action' | 'defaultValues' | 'onSubmit' | 'onError' | 'children'\n    > {\n  /**\n   * Sets the visible authentication form.\n   * Supported views are:\n   * - login\n   * - signup\n   * - forgot_password\n   * - update_password\n   * - otp\n   */\n  view?: ViewType\n  /**\n   * The default view to show.\n   * @default \"login\"\n   */\n  defaultView?: ViewType\n  /**\n   * Called when the view changes.\n   */\n  onViewChange?(view: ViewType): void\n  /**\n   * The OAuth providers that are supported.\n   */\n  providers?: AvailableProviders\n  /**\n   * Customize the signup link under the log in form.\n   * @default \"Sign up\"\n   */\n  signupLink?: React.ReactNode\n  /**\n   * Customize the login link under the sign up form.\n   * @default \"Log in\"\n   */\n  loginLink?: React.ReactNode\n  /**\n   * The forgot password link\n   * @default \"Forgot password?\"\n   */\n  forgotLink?: React.ReactNode\n  /**\n   * Back to log in link\n   * @default \"Back to log in\"\n   */\n  backLink?: React.ReactNode\n  /**\n   * Internationalization options for the auth form.\n   */\n  translations?: Partial<typeof defaultTranslations>\n  /**\n   * Called when a login or signup request fails.\n   * @param view The current active view\n   * @param error\n   */\n  onError?: (view: ViewType, error: Error) => void\n  /**\n   * Called when a login or signup request succeeds.\n   * @param view The current active view\n   * @param data\n   */\n  onSuccess?: (view: ViewType, data: any) => void\n  /**\n   * The redirect URL after succesful login\n   * This will only redirect if implemented in the auth provider.\n   */\n  redirectUrl?: string | ((view: RedirectViews) => string | undefined)\n}\n\nconst defaultTranslations = {\n  signup: 'Sign up',\n  signupSubmit: 'Sign up',\n  signupSuccess: 'Success!',\n  signupSuccessDescription: 'Check your mailbox to verify your account.',\n  login: 'Log in',\n  loginSubmit: 'Log in',\n  magicLinkSuccess: 'Check your mailbox',\n  magicLinkSuccessDescription: 'We have sent a magic link to {email}.',\n  yourEmail: 'your email address',\n  forgotPassword: 'Forgot password?',\n  forgotPasswordSubmit: 'Send reset link',\n  forgotPasswordSuccess: 'Password reset requested',\n  forgotPasswordSuccessDescription:\n    'Please check your email for instructions to reset your password.',\n  updatePassword: 'Update password',\n  updatePasswordSubmit: 'Update password',\n  updatePasswordSuccess: 'Your password has been updated',\n  updatePasswordSuccessDescription:\n    'You can now log in with your new password.',\n  backToLogin: 'Back to log in',\n  noAccount: 'No account yet?',\n  haveAccount: 'Already have an account?',\n  otp: 'One-time password',\n  otpSubmit: 'Verify',\n  otpHelp:\n    'You can find your one-time password in the Google Authenticator or Authy app.',\n  continueWith: 'Continue with',\n  orContinueWith: 'or continue with',\n  verificationCode: 'Your verification code',\n  email: 'Email',\n  password: 'Password',\n  newPassword: 'New password',\n  confirmPassword: 'Confirm password',\n}\n\nexport type IntlTranslations = typeof defaultTranslations\n\nconst tpl = (value: string, data: Record<string, any>) => {\n  return value.replace(/{(\\w*)}/g, function (m, key) {\n    return Object.prototype.hasOwnProperty.call(data, key) ? data[key] : ''\n  })\n}\n\nexport const Auth: React.FC<AuthProps> = (props) => {\n  const {\n    view,\n    defaultView = VIEWS.LOGIN,\n    onViewChange,\n    providers,\n    title,\n    translations: translationsProp,\n    signupLink,\n    loginLink,\n    forgotLink,\n    backLink,\n    onError,\n    onSuccess,\n    redirectUrl,\n    fields,\n    ...rest\n  } = props\n\n  const translations = { ...defaultTranslations, ...translationsProp }\n\n  const { type } = rest\n\n  const [authView, setAuthView] = useControllableState<ViewType>({\n    defaultValue: defaultView,\n    value: view,\n    onChange: (view) => {\n      onViewChange?.(view)\n    },\n  })\n\n  const errorHandler = React.useCallback(\n    (view: ViewType) => (error: Error) => {\n      if (authView === view && onError) {\n        onError(view, error)\n      }\n    },\n    [authView]\n  )\n\n  const successHandler = React.useCallback(\n    (view: ViewType) => (data: any) => {\n      if (authView === view && onSuccess) {\n        onSuccess(view, data)\n      }\n    },\n    [authView]\n  )\n\n  const getRedirectUrl = React.useCallback(\n    (view: RedirectViews) => {\n      if (typeof redirectUrl === 'function') {\n        return redirectUrl(view)\n      }\n      return redirectUrl\n    },\n    [redirectUrl]\n  )\n\n  switch (authView) {\n    case VIEWS.LOGIN:\n      return (\n        <LoginView\n          providers={providers}\n          onError={errorHandler(VIEWS.LOGIN)}\n          onSuccess={successHandler(VIEWS.LOGIN)}\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.SIGNUP)}\n              label={translations.noAccount}\n              link={signupLink ?? translations.signup}\n            />\n          }\n          redirectUrl={getRedirectUrl(VIEWS.LOGIN)}\n          title={title ?? translations.login}\n          providerLabel={translations.continueWith}\n          dividerLabel={translations.orContinueWith}\n          fields={{\n            ...fields,\n            email: {\n              label: translations.email,\n              ...fields?.email,\n            },\n            password: {\n              label: translations.password,\n              ...fields?.password,\n            },\n            submit: {\n              children: translations.loginSubmit,\n              ...fields?.submit,\n            },\n          }}\n          renderSuccess={\n            type === 'magiclink'\n              ? (data) => (\n                  <AuthFormSuccess\n                    title={translations.magicLinkSuccess}\n                    description={tpl(translations.magicLinkSuccessDescription, {\n                      email: data?.email || translations.yourEmail,\n                    })}\n                  />\n                )\n              : undefined\n          }\n          {...rest}\n        >\n          {type === 'password' &&\n            (!forgotLink || typeof forgotLink === 'string' ? (\n              <Link\n                fontSize=\"md\"\n                color=\"muted\"\n                float=\"right\"\n                onClick={() => setAuthView(VIEWS.FORGOT_PASSWORD)}\n              >\n                {forgotLink ?? translations.forgotPassword}\n              </Link>\n            ) : (\n              forgotLink\n            ))}\n        </LoginView>\n      )\n    case VIEWS.SIGNUP:\n      return (\n        <SignupView\n          providers={providers}\n          onError={errorHandler(VIEWS.SIGNUP)}\n          onSuccess={successHandler(VIEWS.SIGNUP)}\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.LOGIN)}\n              label={translations.haveAccount}\n              link={loginLink ?? translations.login}\n            />\n          }\n          redirectUrl={getRedirectUrl(VIEWS.SIGNUP)}\n          title={title ?? translations.signup}\n          providerLabel={translations.continueWith}\n          dividerLabel={translations.orContinueWith}\n          fields={{\n            ...fields,\n            email: {\n              label: translations.email,\n              ...fields?.label,\n            },\n            password: {\n              label: translations.password,\n              ...fields?.password,\n            },\n            submit: {\n              children: translations.signupSubmit,\n              ...fields?.submit,\n            },\n          }}\n          renderSuccess={() => (\n            <AuthFormSuccess\n              title={translations.signupSuccess}\n              description={translations.signupSuccessDescription}\n            />\n          )}\n          {...rest}\n        />\n      )\n    case VIEWS.FORGOT_PASSWORD:\n      return (\n        <ForgotPasswordView\n          onError={errorHandler(VIEWS.FORGOT_PASSWORD)}\n          onSuccess={successHandler(VIEWS.FORGOT_PASSWORD)}\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.LOGIN)}\n              link={backLink ?? translations.backToLogin}\n            />\n          }\n          redirectUrl={getRedirectUrl(VIEWS.FORGOT_PASSWORD)}\n          title={title ?? translations.forgotPassword}\n          fields={{\n            ...fields,\n            email: {\n              label: translations.email,\n              ...fields?.email,\n            },\n            submit: {\n              children: translations.forgotPasswordSubmit,\n              ...fields?.submit,\n            },\n          }}\n          renderSuccess={() => (\n            <AuthFormSuccess\n              title={translations.forgotPasswordSuccess}\n              description={translations.forgotPasswordSuccessDescription}\n            />\n          )}\n          {...rest}\n        />\n      )\n    case VIEWS.UPDATE_PASSWORD:\n      return (\n        <UpdatePasswordView\n          onError={errorHandler(VIEWS.UPDATE_PASSWORD)}\n          onSuccess={successHandler(VIEWS.UPDATE_PASSWORD)}\n          title={title ?? translations.updatePassword}\n          fields={{\n            ...fields,\n            password: {\n              label: translations.newPassword,\n              ...fields?.password,\n            },\n            confirmPassword: {\n              label: translations.confirmPassword,\n              ...fields?.confirmPassword,\n            },\n            submit: {\n              children: translations.updatePasswordSubmit,\n              ...fields?.submit,\n            },\n          }}\n          renderSuccess={() => (\n            <AuthFormSuccess\n              title={translations.updatePasswordSuccess}\n              description={translations.updatePasswordSuccessDescription}\n            />\n          )}\n          {...rest}\n        />\n      )\n    case VIEWS.OTP:\n      return (\n        <OtpView\n          onError={errorHandler(VIEWS.OTP)}\n          onSuccess={successHandler(VIEWS.OTP)}\n          title={title ?? translations.otp}\n          fields={{\n            ...fields,\n            otp: {\n              label: translations.verificationCode,\n              help: translations.otpHelp,\n              ...fields?.otp,\n            },\n            submit: {\n              children: translations.otpSubmit,\n              ...fields?.submit,\n            },\n          }}\n          {...rest}\n        />\n      )\n  }\n\n  return null\n}\n\ninterface AuthLinkProps {\n  label?: React.ReactNode\n  link: React.ReactNode\n  onClick: (e: React.MouseEvent) => void\n}\n\nconst AuthLink = ({ label, link, onClick }: AuthLinkProps) => {\n  const styles = {\n    textAlign: 'center',\n    pt: 4,\n    fontSize: 'md',\n  }\n  return (\n    <chakra.div __css={styles}>\n      {label && <chakra.span color=\"muted\">{label}</chakra.span>}{' '}\n      {typeof link === 'string' ? <Link onClick={onClick}>{link}</Link> : link}\n    </chakra.div>\n  )\n}\n\nAuth.displayName = 'Auth'\n","import { HTMLChakraProps, ThemingProps } from '@chakra-ui/react'\nimport { FormProps, SubmitHandler } from '@saas-ui/forms'\nimport { useAuth, useLogin } from '@saas-ui/auth-provider'\nimport {\n  AuthFormOptions,\n  AuthViewOptions,\n  AuthFormContainer,\n  AuthFormTitle,\n  AuthFormDivider,\n} from './auth-form'\nimport { MagicLinkForm, MagicLinkSubmitParams } from './forms/magic-link-form'\nimport { PasswordForm, PasswordSubmitParams } from './forms/password-form'\nimport { Providers } from './forms/providers'\nimport { AuthFormSuccess } from './success'\n\nexport type LoginViewProps = PasswordViewProps | MagicLinkViewProps\n\nexport const LoginView: React.FC<LoginViewProps> = (props) => {\n  const { title = 'Log in', ...rest } = props\n\n  if (props.type === 'password') {\n    return <PasswordView title={title} {...rest} />\n  }\n\n  return <MagicLinkView title={title} {...rest} />\n}\n\nexport const SignupView: React.FC<LoginViewProps> = (props) => {\n  const { title = 'Sign up', ...rest } = props\n  return <LoginView action=\"signUp\" title={title} {...rest} />\n}\n\nSignupView.displayName = 'SignupView'\n\ninterface PasswordViewProps\n  extends AuthViewOptions,\n    AuthFormOptions,\n    Omit<\n      FormProps<any, any>,\n      'title' | 'action' | 'defaultValues' | 'onSubmit' | 'onError' | 'children'\n    > {\n  renderSuccess?: (data: any) => React.ReactElement\n}\n\nconst PasswordView: React.FC<PasswordViewProps> = (props) => {\n  const {\n    onSuccess,\n    onError,\n    renderSuccess = () => (\n      <AuthFormSuccess\n        title=\"Success!\"\n        description=\"Check your mailbox to verify your account.\"\n      />\n    ),\n    action,\n    title,\n    providers,\n    providerLabel,\n    dividerLabel,\n    footer,\n    redirectUrl,\n    ...formProps\n  } = props\n  const [{ isResolved, data }, submit] = useLogin({ action })\n\n  const handleSubmit: SubmitHandler<PasswordSubmitParams> = (params) => {\n    return submit(params, {\n      redirectTo: redirectUrl,\n    })\n      .then(onSuccess)\n      .catch(onError)\n  }\n\n  // Show a default success message on signup.\n  const isSuccess = isResolved && action === 'signUp'\n  if (isResolved && action === 'signUp') {\n    return renderSuccess(data)\n  }\n\n  const wrapperProps = {\n    providers,\n    title,\n    providerLabel,\n    dividerLabel,\n    footer,\n    redirectUrl,\n  }\n\n  return (\n    <AuthFormWrapper {...wrapperProps}>\n      {isSuccess ? (\n        renderSuccess(data)\n      ) : (\n        <PasswordForm onSubmit={handleSubmit} {...formProps} />\n      )}\n    </AuthFormWrapper>\n  )\n}\n\ninterface MagicLinkViewProps\n  extends AuthViewOptions,\n    AuthFormOptions,\n    Omit<\n      FormProps<any, any>,\n      'title' | 'action' | 'defaultValues' | 'onSubmit' | 'onError' | 'children'\n    > {\n  renderSuccess?: (data: any) => React.ReactElement\n}\n\nconst MagicLinkView: React.FC<MagicLinkViewProps> = (props) => {\n  const {\n    onSuccess,\n    onError,\n    renderSuccess = (data: any) => (\n      <AuthFormSuccess\n        title=\"Check your mailbox\"\n        description={`We've sent a magic link to ${\n          data?.email || 'your email address'\n        }`}\n      />\n    ),\n    title,\n    action,\n    providers,\n    providerLabel,\n    dividerLabel,\n    footer,\n    redirectUrl,\n    ...formProps\n  } = props\n\n  const [{ isResolved, data }, submit] = useLogin({\n    action,\n  })\n\n  const handleSubmit: SubmitHandler<MagicLinkSubmitParams> = ({ email }) => {\n    return submit(\n      { email },\n      {\n        redirectTo: redirectUrl,\n      }\n    )\n      .then(onSuccess)\n      .catch(onError)\n  }\n\n  const wrapperProps = {\n    providers,\n    title,\n    providerLabel,\n    dividerLabel,\n    footer,\n    redirectUrl,\n  }\n\n  return (\n    <AuthFormWrapper {...wrapperProps}>\n      {isResolved ? (\n        renderSuccess(data)\n      ) : (\n        <MagicLinkForm {...formProps} onSubmit={handleSubmit} />\n      )}\n    </AuthFormWrapper>\n  )\n}\n\nLoginView.displayName = 'LoginView'\n\ninterface AuthFormWrapperProps\n  extends AuthFormOptions,\n    Omit<HTMLChakraProps<'div'>, 'title'>,\n    ThemingProps<'SuiAuthForm'> {}\n\nconst AuthFormWrapper: React.FC<AuthFormWrapperProps> = (props) => {\n  const {\n    providers,\n    title,\n    providerLabel = 'Continue with',\n    dividerLabel = 'or continue with',\n    footer,\n    children,\n    redirectUrl,\n    ...rest\n  } = props\n\n  const { logIn } = useAuth()\n\n  const signInWith = (provider: string) => {\n    return logIn({ provider }, { redirectTo: redirectUrl })\n  }\n\n  return (\n    <AuthFormContainer {...rest}>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      {providers && (\n        <>\n          <Providers\n            providers={providers}\n            labelPrefix={providerLabel}\n            onSignIn={signInWith}\n          />\n          <AuthFormDivider label={dividerLabel} />\n        </>\n      )}\n\n      {children}\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nAuthFormWrapper.displayName = 'AuthForm'\n","import * as React from 'react'\n\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from '@chakra-ui/react'\n\nexport interface AuthFormSuccessProps {\n  title: React.ReactNode\n  description: React.ReactNode\n}\n\nexport const AuthFormSuccess: React.FC<AuthFormSuccessProps> = ({\n  title,\n  description,\n  ...rest\n}) => {\n  return (\n    <Alert\n      status=\"success\"\n      variant=\"subtle\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      textAlign=\"center\"\n      {...rest}\n    >\n      <AlertIcon boxSize=\"40px\" mr={0} />\n      <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n        {title}\n      </AlertTitle>\n      <AlertDescription maxWidth=\"sm\" fontSize=\"md\">\n        {description}\n      </AlertDescription>\n    </Alert>\n  )\n}\n\nAuthFormSuccess.displayName = 'AuthFormSuccess'\n","import { SubmitHandler } from '@saas-ui/forms'\nimport { useResetPassword } from '@saas-ui/auth-provider'\nimport {\n  AuthFormContainer,\n  AuthFormOptions,\n  AuthFormTitle,\n  AuthViewOptions,\n} from './auth-form'\nimport {\n  ForgotPasswordForm,\n  ForgotPasswordFormProps,\n  ForgotPasswordSubmitParams,\n} from './forms/forgot-password-form'\nimport { AuthFormSuccess } from './success'\n\nexport interface ForgotPasswordViewProps\n  extends AuthViewOptions,\n    Omit<ForgotPasswordFormProps, 'title' | 'action' | 'onError' | 'onSubmit'> {\n  renderSuccess?: (data: any) => React.ReactElement\n  /**\n   * The URL where the user can save their new password.\n   */\n  redirectUrl?: string\n}\n\nexport const ForgotPasswordView: React.FC<ForgotPasswordViewProps> = (\n  props\n) => {\n  const {\n    title = 'Forgot password',\n    footer,\n    onSuccess,\n    onError,\n    onValidationError,\n    renderSuccess = () => (\n      <AuthFormSuccess\n        title=\"Password reset requested\"\n        description=\"Please check your email for instructions to reset your password.\"\n      />\n    ),\n    redirectUrl,\n    ...rest\n  } = props\n\n  const [{ data, isResolved }, submit] = useResetPassword()\n\n  const handleSubmit: SubmitHandler<ForgotPasswordSubmitParams> = (params) => {\n    return submit(params, {\n      redirectTo: redirectUrl,\n    })\n      .then(onSuccess)\n      .catch(onError)\n  }\n\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      {isResolved ? (\n        renderSuccess(data)\n      ) : (\n        <ForgotPasswordForm\n          {...rest}\n          onError={onValidationError}\n          onSubmit={handleSubmit}\n        />\n      )}\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nForgotPasswordView.displayName = 'ForgotPasswordView'\n","import { SubmitHandler } from '@saas-ui/forms'\nimport { useUpdatePassword } from '@saas-ui/auth-provider'\nimport { AuthFormContainer, AuthViewOptions, AuthFormTitle } from './auth-form'\nimport {\n  UpdatePasswordForm,\n  UpdatePasswordFormProps,\n  UpdatePasswordSubmitParams,\n} from './forms/update-password-form'\nimport { AuthFormSuccess } from './success'\n\nexport interface UpdatePasswordViewProps\n  extends AuthViewOptions,\n    Omit<UpdatePasswordFormProps, 'title' | 'action' | 'onError' | 'onSubmit'> {\n  renderSuccess?: (data: any) => React.ReactElement\n}\n\nexport const UpdatePasswordView: React.FC<UpdatePasswordViewProps> = (\n  props\n) => {\n  const {\n    title = 'Choose a new password',\n    footer,\n    onSuccess,\n    onError,\n    onValidationError,\n    renderSuccess = () => (\n      <AuthFormSuccess\n        title=\"Your password has been updated\"\n        description=\"You can now log in with your new password.\"\n      />\n    ),\n    ...rest\n  } = props\n\n  const [{ data, isResolved }, submit] = useUpdatePassword()\n\n  const handleSubmit: SubmitHandler<UpdatePasswordSubmitParams> = ({\n    password,\n  }) => {\n    return submit({ password }).then(onSuccess).catch(onError)\n  }\n\n  const isSuccess = isResolved && data\n\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      {isSuccess ? (\n        renderSuccess(data)\n      ) : (\n        <UpdatePasswordForm\n          {...rest}\n          onError={onValidationError}\n          onSubmit={handleSubmit}\n        />\n      )}\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nUpdatePasswordView.displayName = 'UpdatePasswordView'\n","import { SubmitHandler } from '@saas-ui/forms'\nimport { useOtp } from '@saas-ui/auth-provider'\nimport { AuthFormContainer, AuthViewOptions, AuthFormTitle } from './auth-form'\nimport { OtpForm, OtpFormProps, OtpSubmitParams } from './forms/otp-form'\nimport { AuthFormSuccess } from './success'\n\nexport interface OtpViewProps\n  extends AuthViewOptions,\n    Omit<OtpFormProps, 'title' | 'action' | 'onError' | 'onSubmit'> {\n  renderSuccess?: (data: any) => React.ReactElement\n}\n\nexport const OtpView: React.FC<OtpViewProps> = (props) => {\n  const {\n    title = 'One-time password',\n    footer,\n    onSuccess,\n    onError,\n    onValidationError,\n    renderSuccess = () => (\n      <AuthFormSuccess\n        title=\"Verification succesful\"\n        description=\"You are now logged in.\"\n      />\n    ),\n    ...rest\n  } = props\n\n  const [{ data }, submit] = useOtp()\n\n  const handleSubmit: SubmitHandler<OtpSubmitParams> = async (params) => {\n    return submit(params).then(onSuccess).catch(onError)\n  }\n\n  const form = (\n    <OtpForm {...rest} onError={onValidationError} onSubmit={handleSubmit} />\n  )\n\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n\n      {data ? renderSuccess(data) : form}\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nOtpView.displayName = 'OtpView'\n","import { MaybeRenderProp, runIfFn } from '@chakra-ui/utils'\nimport { AuthContextValue, useAuth } from '@saas-ui/auth-provider'\nimport React from 'react'\n\nexport interface AuthenticatedProps {\n  onUnauthenticated?: () => void\n  fallback?: MaybeRenderProp<AuthContextValue<any>>\n  children: MaybeRenderProp<AuthContextValue<any>>\n}\n\nexport const Authenticated: React.FC<AuthenticatedProps> = (props) => {\n  const { children, onUnauthenticated, fallback } = props\n  const auth = useAuth()\n\n  const { isAuthenticated, isLoading, isLoggingIn } = auth\n\n  const unauthenticated = !isAuthenticated && !isLoading && !isLoggingIn\n\n  React.useEffect(() => {\n    if (unauthenticated) {\n      onUnauthenticated?.()\n    }\n  }, [unauthenticated])\n\n  if (isLoading || (!isLoggingIn && !isAuthenticated)) {\n    return runIfFn(fallback, auth)\n  }\n\n  return runIfFn(children, auth)\n}\n"],"names":["useAuth","useLogin","useOtp","useResetPassword","useUpdatePassword","jsx","Form","FormLayout","Field","jsx","jsxs","Form","FormLayout","Field","Form","FormLayout","Field","jsx","jsxs","Form","FormLayout","Field","Form","FormLayout","jsx","jsxs","Form","FormLayout","Form","FormLayout","Field","jsx","jsxs","Form","FormLayout","Field","useTheme","jsx","jsx","jsxs","rest","jsx","jsxs","React","chakra","jsx","jsxs","jsx","jsxs","data","jsx","jsxs","jsx","jsxs","jsx","jsxs","jsx","jsxs","view","chakra","useAuth","React"],"mappings":"","debugId":null}}]
}