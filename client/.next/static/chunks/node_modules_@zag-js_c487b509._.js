(globalThis.TURBOPACK || (globalThis.TURBOPACK = [])).push([typeof document === "object" ? document.currentScript : undefined,
"[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/create-anatomy.ts
__turbopack_context__.s([
    "createAnatomy",
    ()=>createAnatomy
]);
var createAnatomy = function(name) {
    let parts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    return {
        parts: function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            if (isEmpty(parts)) {
                return createAnatomy(name, values);
            }
            throw new Error("createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?");
        },
        extendWith: function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            return createAnatomy(name, [
                ...parts,
                ...values
            ]);
        },
        omit: function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            return createAnatomy(name, parts.filter((part)=>!values.includes(part)));
        },
        rename: (newName)=>createAnatomy(newName, parts),
        keys: ()=>parts,
        build: ()=>[
                ...new Set(parts)
            ].reduce((prev, part)=>Object.assign(prev, {
                    [part]: {
                        selector: [
                            '&[data-scope="'.concat(toKebabCase(name), '"][data-part="').concat(toKebabCase(part), '"]'),
                            '& [data-scope="'.concat(toKebabCase(name), '"][data-part="').concat(toKebabCase(part), '"]')
                        ].join(", "),
                        attrs: {
                            "data-scope": toKebabCase(name),
                            "data-part": toKebabCase(part)
                        }
                    }
                }), {})
    };
};
var toKebabCase = (value)=>value.replace(/([A-Z])([A-Z])/g, "$1-$2").replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, "-").toLowerCase();
var isEmpty = (v)=>v.length === 0;
;
}),
"[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/array.ts
__turbopack_context__.s([
    "add",
    ()=>add,
    "addOrRemove",
    ()=>addOrRemove,
    "callAll",
    ()=>callAll,
    "cast",
    ()=>cast,
    "chunk",
    ()=>chunk,
    "clampPercent",
    ()=>clampPercent,
    "clampValue",
    ()=>clampValue,
    "clear",
    ()=>clear,
    "compact",
    ()=>compact,
    "createSplitProps",
    ()=>createSplitProps,
    "createStore",
    ()=>createStore,
    "debounce",
    ()=>debounce,
    "decrementValue",
    ()=>decrementValue,
    "diff",
    ()=>diff,
    "ensure",
    ()=>ensure,
    "ensureProps",
    ()=>ensureProps,
    "first",
    ()=>first,
    "flatArray",
    ()=>flatArray,
    "fromLength",
    ()=>fromLength,
    "getClosestValue",
    ()=>getClosestValue,
    "getClosestValueIndex",
    ()=>getClosestValueIndex,
    "getMaxValueAtIndex",
    ()=>getMaxValueAtIndex,
    "getMinValueAtIndex",
    ()=>getMinValueAtIndex,
    "getNextStepValue",
    ()=>getNextStepValue,
    "getPercentValue",
    ()=>getPercentValue,
    "getPreviousStepValue",
    ()=>getPreviousStepValue,
    "getValuePercent",
    ()=>getValuePercent,
    "getValueRanges",
    ()=>getValueRanges,
    "getValueSetterAtIndex",
    ()=>getValueSetterAtIndex,
    "getValueTransformer",
    ()=>getValueTransformer,
    "has",
    ()=>has,
    "hasProp",
    ()=>hasProp,
    "identity",
    ()=>identity,
    "incrementValue",
    ()=>incrementValue,
    "insertAt",
    ()=>insertAt,
    "invariant",
    ()=>invariant,
    "isArray",
    ()=>isArray,
    "isBoolean",
    ()=>isBoolean,
    "isDev",
    ()=>isDev,
    "isEmpty",
    ()=>isEmpty,
    "isEqual",
    ()=>isEqual,
    "isFunction",
    ()=>isFunction,
    "isNaN",
    ()=>isNaN,
    "isNull",
    ()=>isNull,
    "isNumber",
    ()=>isNumber,
    "isObject",
    ()=>isObject,
    "isObjectLike",
    ()=>isObjectLike,
    "isPlainObject",
    ()=>isPlainObject,
    "isString",
    ()=>isString,
    "isValueAtMax",
    ()=>isValueAtMax,
    "isValueAtMin",
    ()=>isValueAtMin,
    "isValueWithinRange",
    ()=>isValueWithinRange,
    "json",
    ()=>json,
    "last",
    ()=>last,
    "match",
    ()=>match,
    "mod",
    ()=>mod,
    "nan",
    ()=>nan,
    "next",
    ()=>next,
    "nextIndex",
    ()=>nextIndex,
    "noop",
    ()=>noop,
    "omit",
    ()=>omit,
    "partition",
    ()=>partition,
    "pick",
    ()=>pick,
    "prev",
    ()=>prev,
    "prevIndex",
    ()=>prevIndex,
    "remove",
    ()=>remove,
    "removeAt",
    ()=>removeAt,
    "roundToDpr",
    ()=>roundToDpr,
    "roundToStepPrecision",
    ()=>roundToStepPrecision,
    "roundValue",
    ()=>roundValue,
    "runIfFn",
    ()=>runIfFn,
    "setRafInterval",
    ()=>setRafInterval,
    "setRafTimeout",
    ()=>setRafTimeout,
    "setValueAtIndex",
    ()=>setValueAtIndex,
    "snapValueToStep",
    ()=>snapValueToStep,
    "splitProps",
    ()=>splitProps,
    "throttle",
    ()=>throttle,
    "toArray",
    ()=>toArray,
    "toFixedNumber",
    ()=>toFixedNumber,
    "toPx",
    ()=>toPx,
    "tryCatch",
    ()=>tryCatch,
    "uniq",
    ()=>uniq,
    "uuid",
    ()=>uuid,
    "warn",
    ()=>warn,
    "wrap",
    ()=>wrap
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
function toArray(v) {
    if (v == null) return [];
    return Array.isArray(v) ? v : [
        v
    ];
}
var fromLength = (length)=>Array.from(Array(length).keys());
var first = (v)=>v[0];
var last = (v)=>v[v.length - 1];
var isEmpty = (v)=>v.length === 0;
var has = (v, t)=>v.indexOf(t) !== -1;
var add = function(v) {
    for(var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        items[_key - 1] = arguments[_key];
    }
    return v.concat(items);
};
var remove = function(v) {
    for(var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        items[_key - 1] = arguments[_key];
    }
    return v.filter((t)=>!items.includes(t));
};
var removeAt = (v, i)=>v.filter((_, idx)=>idx !== i);
var insertAt = function(v, i) {
    for(var _len = arguments.length, items = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        items[_key - 2] = arguments[_key];
    }
    return [
        ...v.slice(0, i),
        ...items,
        ...v.slice(i)
    ];
};
var uniq = (v)=>Array.from(new Set(v));
var diff = (a, b)=>{
    const set = new Set(b);
    return a.filter((t)=>!set.has(t));
};
var addOrRemove = (v, item)=>has(v, item) ? remove(v, item) : add(v, item);
function clear(v) {
    while(v.length > 0)v.pop();
    return v;
}
function nextIndex(v, idx) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const { step = 1, loop = true } = opts;
    const next2 = idx + step;
    const len = v.length;
    const last2 = len - 1;
    if (idx === -1) return step > 0 ? 0 : last2;
    if (next2 < 0) return loop ? last2 : 0;
    if (next2 >= len) return loop ? 0 : idx > len ? len : idx;
    return next2;
}
function next(v, idx) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return v[nextIndex(v, idx, opts)];
}
function prevIndex(v, idx) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const { step = 1, loop = true } = opts;
    return nextIndex(v, idx, {
        step: -step,
        loop
    });
}
function prev(v, index) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return v[prevIndex(v, index, opts)];
}
function chunk(v, size) {
    return v.reduce((rows, value, index)=>{
        var _last;
        if (index % size === 0) rows.push([
            value
        ]);
        else (_last = last(rows)) === null || _last === void 0 ? void 0 : _last.push(value);
        return rows;
    }, []);
}
function flatArray(arr) {
    return arr.reduce((flat, item)=>{
        if (Array.isArray(item)) {
            return flat.concat(flatArray(item));
        }
        return flat.concat(item);
    }, []);
}
function partition(arr, fn) {
    return arr.reduce((param, value)=>{
        let [pass, fail] = param;
        if (fn(value)) pass.push(value);
        else fail.push(value);
        return [
            pass,
            fail
        ];
    }, [
        [],
        []
    ]);
}
// src/equal.ts
var isArrayLike = (value)=>(value === null || value === void 0 ? void 0 : value.constructor.name) === "Array";
var isArrayEqual = (a, b)=>{
    if (a.length !== b.length) return false;
    for(let i = 0; i < a.length; i++){
        if (!isEqual(a[i], b[i])) return false;
    }
    return true;
};
var isEqual = (a, b)=>{
    if (Object.is(a, b)) return true;
    if (a == null && b != null || a != null && b == null) return false;
    if (typeof (a === null || a === void 0 ? void 0 : a.isEqual) === "function" && typeof (b === null || b === void 0 ? void 0 : b.isEqual) === "function") {
        return a.isEqual(b);
    }
    if (typeof a === "function" && typeof b === "function") {
        return a.toString() === b.toString();
    }
    if (isArrayLike(a) && isArrayLike(b)) {
        return isArrayEqual(Array.from(a), Array.from(b));
    }
    if (!(typeof a === "object") || !(typeof b === "object")) return false;
    const keys = Object.keys(b !== null && b !== void 0 ? b : /* @__PURE__ */ Object.create(null));
    const length = keys.length;
    for(let i = 0; i < length; i++){
        const hasKey = Reflect.has(a, keys[i]);
        if (!hasKey) return false;
    }
    for(let i = 0; i < length; i++){
        const key = keys[i];
        if (!isEqual(a[key], b[key])) return false;
    }
    return true;
};
// src/guard.ts
var isDev = ()=>("TURBOPACK compile-time value", "development") !== "production";
var isArray = (v)=>Array.isArray(v);
var isBoolean = (v)=>v === true || v === false;
var isObjectLike = (v)=>v != null && typeof v === "object";
var isObject = (v)=>isObjectLike(v) && !isArray(v);
var isNumber = (v)=>typeof v === "number" && !Number.isNaN(v);
var isString = (v)=>typeof v === "string";
var isFunction = (v)=>typeof v === "function";
var isNull = (v)=>v == null;
var hasProp = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
var baseGetTag = (v)=>Object.prototype.toString.call(v);
var fnToString = Function.prototype.toString;
var objectCtorString = fnToString.call(Object);
var isPlainObject = (v)=>{
    if (!isObjectLike(v) || baseGetTag(v) != "[object Object]" || isFrameworkElement(v)) return false;
    const proto = Object.getPrototypeOf(v);
    if (proto === null) return true;
    const Ctor = hasProp(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && fnToString.call(Ctor) == objectCtorString;
};
var isReactElement = (x)=>typeof x === "object" && x !== null && "$$typeof" in x && "props" in x;
var isVueElement = (x)=>typeof x === "object" && x !== null && "__v_isVNode" in x;
var isFrameworkElement = (x)=>isReactElement(x) || isVueElement(x);
// src/functions.ts
var runIfFn = function(v) {
    for(var _len = arguments.length, a = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        a[_key - 1] = arguments[_key];
    }
    const res = typeof v === "function" ? v(...a) : v;
    return res !== null && res !== void 0 ? res : void 0;
};
var cast = (v)=>v;
var identity = (v)=>v();
var noop = ()=>{};
var callAll = function() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){
        fns[_key] = arguments[_key];
    }
    return function() {
        for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){
            a[_key] = arguments[_key];
        }
        fns.forEach(function(fn) {
            fn === null || fn === void 0 ? void 0 : fn(...a);
        });
    };
};
var uuid = /* @__PURE__ */ (()=>{
    let id = 0;
    return ()=>{
        id++;
        return id.toString(36);
    };
})();
function match(key, record) {
    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    var _Error_captureStackTrace, _Error;
    if (key in record) {
        const fn = record[key];
        return isFunction(fn) ? fn(...args) : fn;
    }
    const error = new Error("No matching key: ".concat(JSON.stringify(key), " in ").concat(JSON.stringify(Object.keys(record))));
    (_Error_captureStackTrace = (_Error = Error).captureStackTrace) === null || _Error_captureStackTrace === void 0 ? void 0 : _Error_captureStackTrace.call(_Error, error, match);
    throw error;
}
var tryCatch = (fn, fallback)=>{
    try {
        return fn();
    } catch (error) {
        if (error instanceof Error) {
            var _Error_captureStackTrace, _Error;
            (_Error_captureStackTrace = (_Error = Error).captureStackTrace) === null || _Error_captureStackTrace === void 0 ? void 0 : _Error_captureStackTrace.call(_Error, error, tryCatch);
        }
        return fallback === null || fallback === void 0 ? void 0 : fallback();
    }
};
function throttle(fn) {
    let wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    let lastCall = 0;
    let timeout = null;
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        const now = Date.now();
        const timeSinceLastCall = now - lastCall;
        if (timeSinceLastCall >= wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            fn(...args);
            lastCall = now;
        } else if (!timeout) {
            timeout = setTimeout(()=>{
                fn(...args);
                lastCall = Date.now();
                timeout = null;
            }, wait - timeSinceLastCall);
        }
    };
}
function debounce(fn) {
    let wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    let timeout = null;
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        timeout = setTimeout(()=>{
            fn(...args);
        }, wait);
    };
}
// src/number.ts
var { floor, abs, round, min, max, pow, sign } = Math;
var isNaN = (v)=>Number.isNaN(v);
var nan = (v)=>isNaN(v) ? 0 : v;
var mod = (v, m)=>(v % m + m) % m;
var wrap = (v, vmax)=>(v % vmax + vmax) % vmax;
var getMinValueAtIndex = (i, v, vmin)=>i === 0 ? vmin : v[i - 1];
var getMaxValueAtIndex = (i, v, vmax)=>i === v.length - 1 ? vmax : v[i + 1];
var isValueAtMax = (v, vmax)=>nan(v) >= vmax;
var isValueAtMin = (v, vmin)=>nan(v) <= vmin;
var isValueWithinRange = (v, vmin, vmax)=>{
    const value = nan(v);
    const minCheck = vmin == null || value >= vmin;
    const maxCheck = vmax == null || value <= vmax;
    return minCheck && maxCheck;
};
var roundValue = (v, vmin, step)=>round((nan(v) - vmin) / step) * step + vmin;
var clampValue = (v, vmin, vmax)=>min(max(nan(v), vmin), vmax);
var clampPercent = (v)=>clampValue(v, 0, 1);
var getValuePercent = (v, vmin, vmax)=>(nan(v) - vmin) / (vmax - vmin);
var getPercentValue = (p, vmin, vmax, step)=>clampValue(roundValue(p * (vmax - vmin) + vmin, vmin, step), vmin, vmax);
var roundToStepPrecision = (v, step)=>{
    let rv = v;
    let ss = step.toString();
    let pi = ss.indexOf(".");
    let p = pi >= 0 ? ss.length - pi : 0;
    if (p > 0) {
        let pw = pow(10, p);
        rv = round(rv * pw) / pw;
    }
    return rv;
};
var roundToDpr = (v, dpr)=>typeof dpr === "number" ? floor(v * dpr + 0.5) / dpr : round(v);
var snapValueToStep = (v, vmin, vmax, step)=>{
    const min2 = vmin != null ? Number(vmin) : 0;
    const max2 = Number(vmax);
    const remainder = (v - min2) % step;
    let snapped = abs(remainder) * 2 >= step ? v + sign(remainder) * (step - abs(remainder)) : v - remainder;
    snapped = roundToStepPrecision(snapped, step);
    if (!isNaN(min2) && snapped < min2) {
        snapped = min2;
    } else if (!isNaN(max2) && snapped > max2) {
        const stepsInRange = floor((max2 - min2) / step);
        const largestValidStep = min2 + stepsInRange * step;
        snapped = stepsInRange <= 0 || largestValidStep < min2 ? max2 : largestValidStep;
    }
    return roundToStepPrecision(snapped, step);
};
var setValueAtIndex = (vs, i, v)=>{
    if (vs[i] === v) return vs;
    return [
        ...vs.slice(0, i),
        v,
        ...vs.slice(i + 1)
    ];
};
function getValueSetterAtIndex(index, ctx) {
    const minValueAtIndex = getMinValueAtIndex(index, ctx.values, ctx.min);
    const maxValueAtIndex = getMaxValueAtIndex(index, ctx.values, ctx.max);
    let nextValues = ctx.values.slice();
    return function setValue(value) {
        let nextValue = snapValueToStep(value, minValueAtIndex, maxValueAtIndex, ctx.step);
        nextValues = setValueAtIndex(nextValues, index, value);
        nextValues[index] = nextValue;
        return nextValues;
    };
}
function getNextStepValue(index, ctx) {
    const nextValue = ctx.values[index] + ctx.step;
    return getValueSetterAtIndex(index, ctx)(nextValue);
}
function getPreviousStepValue(index, ctx) {
    const nextValue = ctx.values[index] - ctx.step;
    return getValueSetterAtIndex(index, ctx)(nextValue);
}
var getClosestValueIndex = (vs, t)=>{
    let i = vs.findIndex((v)=>t - v < 0);
    if (i === 0) return i;
    if (i === -1) return vs.length - 1;
    let vLeft = vs[i - 1];
    let vRight = vs[i];
    if (abs(vLeft - t) < abs(vRight - t)) return i - 1;
    return i;
};
var getClosestValue = (vs, t)=>vs[getClosestValueIndex(vs, t)];
var getValueRanges = (vs, vmin, vmax, gap)=>vs.map((v, i)=>({
            min: i === 0 ? vmin : vs[i - 1] + gap,
            max: i === vs.length - 1 ? vmax : vs[i + 1] - gap,
            value: v
        }));
var getValueTransformer = (va, vb)=>{
    const [a, b] = va;
    const [c, d] = vb;
    return (v)=>a === b || c === d ? c : c + (d - c) / (b - a) * (v - a);
};
var toFixedNumber = function(v) {
    let d = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;
    const pow2 = Math.pow(b, d);
    return round(v * pow2) / pow2;
};
var countDecimals = (value)=>{
    if (!Number.isFinite(value)) return 0;
    let e = 1, p = 0;
    while(Math.round(value * e) / e !== value){
        e *= 10;
        p += 1;
    }
    return p;
};
var decimalOp = (a, op, b)=>{
    let result = op === "+" ? a + b : a - b;
    if (a % 1 !== 0 || b % 1 !== 0) {
        const multiplier = 10 ** Math.max(countDecimals(a), countDecimals(b));
        a = Math.round(a * multiplier);
        b = Math.round(b * multiplier);
        result = op === "+" ? a + b : a - b;
        result /= multiplier;
    }
    return result;
};
var incrementValue = (v, s)=>decimalOp(nan(v), "+", s);
var decrementValue = (v, s)=>decimalOp(nan(v), "-", s);
var toPx = (v)=>v != null ? "".concat(v, "px") : void 0;
// src/object.ts
function compact(obj) {
    if (!isPlainObject(obj) || obj === void 0) return obj;
    const keys = Reflect.ownKeys(obj).filter((key)=>typeof key === "string");
    const filtered = {};
    for (const key of keys){
        const value = obj[key];
        if (value !== void 0) {
            filtered[key] = compact(value);
        }
    }
    return filtered;
}
var json = (v)=>JSON.parse(JSON.stringify(v));
function pick(obj, keys) {
    const filtered = {};
    for (const key of keys){
        const value = obj[key];
        if (value !== void 0) {
            filtered[key] = value;
        }
    }
    return filtered;
}
function splitProps(props, keys) {
    const rest = {};
    const result = {};
    const keySet = new Set(keys);
    for(const key in props){
        if (keySet.has(key)) {
            result[key] = props[key];
        } else {
            rest[key] = props[key];
        }
    }
    return [
        result,
        rest
    ];
}
var createSplitProps = (keys)=>{
    return function split(props) {
        return splitProps(props, keys);
    };
};
function omit(obj, keys) {
    return createSplitProps(keys)(obj)[1];
}
// src/store.ts
function createStore(initialState) {
    let compare = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Object.is;
    let state = {
        ...initialState
    };
    const listeners = /* @__PURE__ */ new Set();
    const subscribe = (listener)=>{
        listeners.add(listener);
        return ()=>listeners.delete(listener);
    };
    const publish = ()=>{
        listeners.forEach((listener)=>listener());
    };
    const get = (key)=>{
        return state[key];
    };
    const set = (key, value)=>{
        if (!compare(state[key], value)) {
            state[key] = value;
            publish();
        }
    };
    const update = (updates)=>{
        let hasChanges = false;
        for(const key in updates){
            const value = updates[key];
            if (value !== void 0 && !compare(state[key], value)) {
                state[key] = value;
                hasChanges = true;
            }
        }
        if (hasChanges) {
            publish();
        }
    };
    const snapshot = ()=>({
            ...state
        });
    return {
        subscribe,
        get,
        set,
        update,
        snapshot
    };
}
// src/timers.ts
function setRafInterval(callback, interval) {
    let start = performance.now();
    let handle;
    function loop(now) {
        const delta = now - start;
        if (delta >= interval) {
            start = interval > 0 ? now - delta % interval : now;
            callback({
                startMs: start,
                deltaMs: delta
            });
        }
        handle = requestAnimationFrame(loop);
    }
    handle = requestAnimationFrame(loop);
    return ()=>cancelAnimationFrame(handle);
}
function setRafTimeout(callback, delay) {
    const start = performance.now();
    let handle;
    function loop(now) {
        const delta = now - start;
        if (delta >= delay) {
            callback();
            return;
        }
        handle = requestAnimationFrame(loop);
    }
    handle = requestAnimationFrame(loop);
    return ()=>cancelAnimationFrame(handle);
}
// src/warning.ts
function warn() {
    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){
        a[_key] = arguments[_key];
    }
    const m = a.length === 1 ? a[0] : a[1];
    const c = a.length === 2 ? a[0] : true;
    if (c && ("TURBOPACK compile-time value", "development") !== "production") {
        console.warn(m);
    }
}
function invariant() {
    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){
        a[_key] = arguments[_key];
    }
    const m = a.length === 1 ? a[0] : a[1];
    const c = a.length === 2 ? a[0] : true;
    if (c && ("TURBOPACK compile-time value", "development") !== "production") {
        throw new Error(m);
    }
}
function ensure(c, m) {
    if (c == null) throw new Error(m());
}
function ensureProps(props, keys, scope) {
    let missingKeys = [];
    for (const key of keys){
        if (props[key] == null) missingKeys.push(key);
    }
    if (missingKeys.length > 0) throw new Error("[zag-js".concat(scope ? " > ".concat(scope) : "", "] missing required props: ").concat(missingKeys.join(", ")));
}
;
}),
"[project]/node_modules/@zag-js/collection/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "GridCollection",
    ()=>GridCollection,
    "ListCollection",
    ()=>ListCollection,
    "Selection",
    ()=>Selection,
    "TreeCollection",
    ()=>TreeCollection,
    "filePathToTree",
    ()=>filePathToTree,
    "flattenedToTree",
    ()=>flattenedToTree,
    "isGridCollection",
    ()=>isGridCollection,
    "isListCollection",
    ()=>isListCollection
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var fallback = {
    itemToValue (item) {
        if (typeof item === "string") return item;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(item) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(item, "value")) return item.value;
        return "";
    },
    itemToString (item) {
        if (typeof item === "string") return item;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(item) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(item, "label")) return item.label;
        return fallback.itemToValue(item);
    },
    isItemDisabled (item) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(item) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(item, "disabled")) return !!item.disabled;
        return false;
    }
};
var ListCollection = class _ListCollection {
    /**
   * Returns the number of items in the collection
   */ get size() {
        return this.items.length;
    }
    /**
   * Returns the first value in the collection
   */ get firstValue() {
        let index = 0;
        while(this.getItemDisabled(this.at(index)))index++;
        return this.getItemValue(this.at(index));
    }
    /**
   * Returns the last value in the collection
   */ get lastValue() {
        let index = this.size - 1;
        while(this.getItemDisabled(this.at(index)))index--;
        return this.getItemValue(this.at(index));
    }
    *[Symbol.iterator]() {
        yield* this.items;
    }
    constructor(options){
        var _this = this;
        this.options = options;
        /**
     * The items in the collection
     */ __publicField(this, "items");
        __publicField(this, "indexMap", null);
        /**
     * Copy the collection
     */ __publicField(this, "copy", (items)=>{
            return new _ListCollection({
                ...this.options,
                items: items !== null && items !== void 0 ? items : [
                    ...this.items
                ]
            });
        });
        /**
     * Check if the collection is equal to another collection
     */ __publicField(this, "isEqual", (other)=>{
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(this.items, other.items);
        });
        /**
     * Function to update the collection items
     */ __publicField(this, "setItems", (items)=>{
            return this.copy(items);
        });
        /**
     * Returns all the values in the collection
     */ __publicField(this, "getValues", function() {
            let items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.items;
            const values = [];
            for (const item of items){
                const value = _this.getItemValue(item);
                if (value != null) values.push(value);
            }
            return values;
        });
        /**
     * Get the item based on its value
     */ __publicField(this, "find", (value)=>{
            if (value == null) return null;
            const index = this.indexOf(value);
            return index !== -1 ? this.at(index) : null;
        });
        /**
     * Get the items based on its values
     */ __publicField(this, "findMany", (values)=>{
            const result = [];
            for (const value of values){
                const item = this.find(value);
                if (item != null) result.push(item);
            }
            return result;
        });
        /**
     * Get the item based on its index
     */ __publicField(this, "at", (index)=>{
            if (!this.options.groupBy && !this.options.groupSort) {
                var _this_items_index;
                return (_this_items_index = this.items[index]) !== null && _this_items_index !== void 0 ? _this_items_index : null;
            }
            let idx = 0;
            const groups = this.group();
            for (const [, items] of groups){
                for (const item of items){
                    if (idx === index) return item;
                    idx++;
                }
            }
            return null;
        });
        __publicField(this, "sortFn", (valueA, valueB)=>{
            const indexA = this.indexOf(valueA);
            const indexB = this.indexOf(valueB);
            return (indexA !== null && indexA !== void 0 ? indexA : 0) - (indexB !== null && indexB !== void 0 ? indexB : 0);
        });
        /**
     * Sort the values based on their index
     */ __publicField(this, "sort", (values)=>{
            return [
                ...values
            ].sort(this.sortFn.bind(this));
        });
        /**
     * Convert an item to a value
     */ __publicField(this, "getItemValue", (item)=>{
            var _this_options_itemToValue, _this_options;
            if (item == null) return null;
            var _this_options_itemToValue1;
            return (_this_options_itemToValue1 = (_this_options_itemToValue = (_this_options = this.options).itemToValue) === null || _this_options_itemToValue === void 0 ? void 0 : _this_options_itemToValue.call(_this_options, item)) !== null && _this_options_itemToValue1 !== void 0 ? _this_options_itemToValue1 : fallback.itemToValue(item);
        });
        /**
     * Whether an item is disabled
     */ __publicField(this, "getItemDisabled", (item)=>{
            var _this_options_isItemDisabled, _this_options;
            if (item == null) return false;
            var _this_options_isItemDisabled1;
            return (_this_options_isItemDisabled1 = (_this_options_isItemDisabled = (_this_options = this.options).isItemDisabled) === null || _this_options_isItemDisabled === void 0 ? void 0 : _this_options_isItemDisabled.call(_this_options, item)) !== null && _this_options_isItemDisabled1 !== void 0 ? _this_options_isItemDisabled1 : fallback.isItemDisabled(item);
        });
        /**
     * Convert an item to a string
     */ __publicField(this, "stringifyItem", (item)=>{
            var _this_options_itemToString, _this_options;
            if (item == null) return null;
            var _this_options_itemToString1;
            return (_this_options_itemToString1 = (_this_options_itemToString = (_this_options = this.options).itemToString) === null || _this_options_itemToString === void 0 ? void 0 : _this_options_itemToString.call(_this_options, item)) !== null && _this_options_itemToString1 !== void 0 ? _this_options_itemToString1 : fallback.itemToString(item);
        });
        /**
     * Convert a value to a string
     */ __publicField(this, "stringify", (value)=>{
            if (value == null) return null;
            return this.stringifyItem(this.find(value));
        });
        /**
     * Convert an array of items to a string
     */ __publicField(this, "stringifyItems", function(items) {
            let separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ", ";
            const strs = [];
            for (const item of items){
                const str = _this.stringifyItem(item);
                if (str != null) strs.push(str);
            }
            return strs.join(separator);
        });
        /**
     * Convert an array of items to a string
     */ __publicField(this, "stringifyMany", (value, separator)=>{
            return this.stringifyItems(this.findMany(value), separator);
        });
        /**
     * Whether the collection has a value
     */ __publicField(this, "has", (value)=>{
            return this.indexOf(value) !== -1;
        });
        /**
     * Whether the collection has an item
     */ __publicField(this, "hasItem", (item)=>{
            if (item == null) return false;
            return this.has(this.getItemValue(item));
        });
        /**
     * Group items by the groupBy function provided in options
     * Returns an array of [groupKey, items] tuples
     */ __publicField(this, "group", ()=>{
            const { groupBy, groupSort } = this.options;
            if (!groupBy) return [
                [
                    "",
                    [
                        ...this.items
                    ]
                ]
            ];
            const groups = /* @__PURE__ */ new Map();
            this.items.forEach((item, index)=>{
                const groupKey = groupBy(item, index);
                if (!groups.has(groupKey)) {
                    groups.set(groupKey, []);
                }
                groups.get(groupKey).push(item);
            });
            let entries = Array.from(groups.entries());
            if (groupSort) {
                entries.sort((param, param1)=>{
                    let [a] = param, [b] = param1;
                    if (typeof groupSort === "function") return groupSort(a, b);
                    if (Array.isArray(groupSort)) {
                        const indexA = groupSort.indexOf(a);
                        const indexB = groupSort.indexOf(b);
                        if (indexA === -1) return 1;
                        if (indexB === -1) return -1;
                        return indexA - indexB;
                    }
                    if (groupSort === "asc") return a.localeCompare(b);
                    if (groupSort === "desc") return b.localeCompare(a);
                    return 0;
                });
            }
            return entries;
        });
        /**
     * Returns the next value in the collection
     */ __publicField(this, "getNextValue", function(value) {
            let step = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, clamp = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
            let index = _this.indexOf(value);
            if (index === -1) return null;
            index = clamp ? Math.min(index + step, _this.size - 1) : index + step;
            while(index <= _this.size && _this.getItemDisabled(_this.at(index)))index++;
            return _this.getItemValue(_this.at(index));
        });
        /**
     * Returns the previous value in the collection
     */ __publicField(this, "getPreviousValue", function(value) {
            let step = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, clamp = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
            let index = _this.indexOf(value);
            if (index === -1) return null;
            index = clamp ? Math.max(index - step, 0) : index - step;
            while(index >= 0 && _this.getItemDisabled(_this.at(index)))index--;
            return _this.getItemValue(_this.at(index));
        });
        /**
     * Get the index of an item based on its key
     */ __publicField(this, "indexOf", (value)=>{
            if (value == null) return -1;
            if (!this.options.groupBy && !this.options.groupSort) {
                return this.items.findIndex((item)=>this.getItemValue(item) === value);
            }
            if (!this.indexMap) {
                this.indexMap = /* @__PURE__ */ new Map();
                let idx = 0;
                const groups = this.group();
                for (const [, items] of groups){
                    for (const item of items){
                        const itemValue = this.getItemValue(item);
                        if (itemValue != null) {
                            this.indexMap.set(itemValue, idx);
                        }
                        idx++;
                    }
                }
            }
            var _this_indexMap_get;
            return (_this_indexMap_get = this.indexMap.get(value)) !== null && _this_indexMap_get !== void 0 ? _this_indexMap_get : -1;
        });
        __publicField(this, "getByText", (text, current)=>{
            const currentIndex = current != null ? this.indexOf(current) : -1;
            const isSingleKey = text.length === 1;
            for(let i = 0; i < this.items.length; i++){
                const item = this.items[(currentIndex + i + 1) % this.items.length];
                if (isSingleKey && this.getItemValue(item) === current) continue;
                if (this.getItemDisabled(item)) continue;
                if (match(this.stringifyItem(item), text)) return item;
            }
            return void 0;
        });
        /**
     * Search for a value based on a query
     */ __publicField(this, "search", (queryString, options)=>{
            const { state, currentValue, timeout = 350 } = options;
            const search = state.keysSoFar + queryString;
            const isRepeated = search.length > 1 && Array.from(search).every((char)=>char === search[0]);
            const query = isRepeated ? search[0] : search;
            const item = this.getByText(query, currentValue);
            const value = this.getItemValue(item);
            function cleanup() {
                clearTimeout(state.timer);
                state.timer = -1;
            }
            function update(value2) {
                state.keysSoFar = value2;
                cleanup();
                if (value2 !== "") {
                    state.timer = +setTimeout(()=>{
                        update("");
                        cleanup();
                    }, timeout);
                }
            }
            update(search);
            return value;
        });
        /**
     * Update an item in the collection
     */ __publicField(this, "update", (value, item)=>{
            let index = this.indexOf(value);
            if (index === -1) return this;
            return this.copy([
                ...this.items.slice(0, index),
                item,
                ...this.items.slice(index + 1)
            ]);
        });
        /**
     * Update an item in the collection if it exists, otherwise append it
     */ __publicField(this, "upsert", function(value, item) {
            let mode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "append";
            let index = _this.indexOf(value);
            if (index === -1) {
                const fn = mode === "append" ? _this.append : _this.prepend;
                return fn(item);
            }
            return _this.copy([
                ..._this.items.slice(0, index),
                item,
                ..._this.items.slice(index + 1)
            ]);
        });
        /**
     * Insert items at a specific index
     */ __publicField(this, "insert", function(index) {
            for(var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                items[_key - 1] = arguments[_key];
            }
            return _this.copy(insert(_this.items, index, ...items));
        });
        /**
     * Insert items before a specific value
     */ __publicField(this, "insertBefore", function(value) {
            for(var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                items[_key - 1] = arguments[_key];
            }
            let toIndex = _this.indexOf(value);
            if (toIndex === -1) {
                if (_this.items.length === 0) toIndex = 0;
                else return _this;
            }
            return _this.copy(insert(_this.items, toIndex, ...items));
        });
        /**
     * Insert items after a specific value
     */ __publicField(this, "insertAfter", function(value) {
            for(var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                items[_key - 1] = arguments[_key];
            }
            let toIndex = _this.indexOf(value);
            if (toIndex === -1) {
                if (_this.items.length === 0) toIndex = 0;
                else return _this;
            }
            return _this.copy(insert(_this.items, toIndex + 1, ...items));
        });
        /**
     * Prepend items to the collection
     */ __publicField(this, "prepend", function() {
            for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){
                items[_key] = arguments[_key];
            }
            return _this.copy(insert(_this.items, 0, ...items));
        });
        /**
     * Append items to the collection
     */ __publicField(this, "append", function() {
            for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){
                items[_key] = arguments[_key];
            }
            return _this.copy(insert(_this.items, _this.items.length, ...items));
        });
        /**
     * Filter the collection
     */ __publicField(this, "filter", (fn)=>{
            const filteredItems = this.items.filter((item, index)=>fn(this.stringifyItem(item), index, item));
            return this.copy(filteredItems);
        });
        /**
     * Remove items from the collection
     */ __publicField(this, "remove", function() {
            for(var _len = arguments.length, itemsOrValues = new Array(_len), _key = 0; _key < _len; _key++){
                itemsOrValues[_key] = arguments[_key];
            }
            const values = itemsOrValues.map((itemOrValue)=>typeof itemOrValue === "string" ? itemOrValue : _this.getItemValue(itemOrValue));
            return _this.copy(_this.items.filter((item)=>{
                const value = _this.getItemValue(item);
                if (value == null) return false;
                return !values.includes(value);
            }));
        });
        /**
     * Move an item to a specific index
     */ __publicField(this, "move", (value, toIndex)=>{
            const fromIndex = this.indexOf(value);
            if (fromIndex === -1) return this;
            return this.copy(move(this.items, [
                fromIndex
            ], toIndex));
        });
        /**
     * Move items before a specific value
     */ __publicField(this, "moveBefore", function(value) {
            for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                values[_key - 1] = arguments[_key];
            }
            let toIndex = _this.items.findIndex((item)=>_this.getItemValue(item) === value);
            if (toIndex === -1) return _this;
            let indices = values.map((value2)=>_this.items.findIndex((item)=>_this.getItemValue(item) === value2)).sort((a, b)=>a - b);
            return _this.copy(move(_this.items, indices, toIndex));
        });
        /**
     * Move items after a specific value
     */ __publicField(this, "moveAfter", function(value) {
            for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                values[_key - 1] = arguments[_key];
            }
            let toIndex = _this.items.findIndex((item)=>_this.getItemValue(item) === value);
            if (toIndex === -1) return _this;
            let indices = values.map((value2)=>_this.items.findIndex((item)=>_this.getItemValue(item) === value2)).sort((a, b)=>a - b);
            return _this.copy(move(_this.items, indices, toIndex + 1));
        });
        /**
     * Reorder items
     */ __publicField(this, "reorder", (fromIndex, toIndex)=>{
            return this.copy(move(this.items, [
                fromIndex
            ], toIndex));
        });
        /**
     * Compare two values
     */ __publicField(this, "compareValue", (a, b)=>{
            const indexA = this.indexOf(a);
            const indexB = this.indexOf(b);
            if (indexA < indexB) return -1;
            if (indexA > indexB) return 1;
            return 0;
        });
        /**
     * Get the range of values between two values
     */ __publicField(this, "range", (from, to)=>{
            let keys = [];
            let key = from;
            while(key != null){
                let item = this.find(key);
                if (item) keys.push(key);
                if (key === to) return keys;
                key = this.getNextValue(key);
            }
            return [];
        });
        /**
     * Get the range of values between two values
     */ __publicField(this, "getValueRange", (from, to)=>{
            if (from && to) {
                if (this.compareValue(from, to) <= 0) {
                    return this.range(from, to);
                }
                return this.range(to, from);
            }
            return [];
        });
        /**
     * Convert the collection to a string
     */ __publicField(this, "toString", ()=>{
            let result = "";
            for (const item of this.items){
                const value = this.getItemValue(item);
                const label = this.stringifyItem(item);
                const disabled = this.getItemDisabled(item);
                const itemString = [
                    value,
                    label,
                    disabled
                ].filter(Boolean).join(":");
                result += itemString + ",";
            }
            return result;
        });
        /**
     * Convert the collection to a JSON object
     */ __publicField(this, "toJSON", ()=>{
            return {
                size: this.size,
                first: this.firstValue,
                last: this.lastValue
            };
        });
        this.items = [
            ...options.items
        ];
    }
};
var match = (label, query)=>{
    return !!(label === null || label === void 0 ? void 0 : label.toLowerCase().startsWith(query.toLowerCase()));
};
function isListCollection(v) {
    return v instanceof ListCollection;
}
function insert(items, index) {
    for(var _len = arguments.length, values = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        values[_key - 2] = arguments[_key];
    }
    return [
        ...items.slice(0, index),
        ...values,
        ...items.slice(index)
    ];
}
function move(items, indices, toIndex) {
    indices = [
        ...indices
    ].sort((a, b)=>a - b);
    const itemsToMove = indices.map((i)=>items[i]);
    for(let i = indices.length - 1; i >= 0; i--){
        items = [
            ...items.slice(0, indices[i]),
            ...items.slice(indices[i] + 1)
        ];
    }
    toIndex = Math.max(0, toIndex - indices.filter((i)=>i < toIndex).length);
    return [
        ...items.slice(0, toIndex),
        ...itemsToMove,
        ...items.slice(toIndex)
    ];
}
// src/grid-collection.ts
var GridCollection = class extends ListCollection {
    constructor(options){
        var _this;
        const { columnCount } = options;
        super(options), _this = this;
        __publicField(this, "columnCount");
        __publicField(this, "rows", null);
        /**
     * Returns the row data in the grid
     */ __publicField(this, "getRows", ()=>{
            if (!this.rows) {
                this.rows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["chunk"])([
                    ...this.items
                ], this.columnCount);
            }
            return this.rows;
        });
        /**
     * Returns the number of rows in the grid
     */ __publicField(this, "getRowCount", ()=>{
            return Math.ceil(this.items.length / this.columnCount);
        });
        /**
     * Returns the index of the specified row and column in the grid
     */ __publicField(this, "getCellIndex", (row, column)=>{
            return row * this.columnCount + column;
        });
        /**
     * Returns the item at the specified row and column in the grid
     */ __publicField(this, "getCell", (row, column)=>{
            return this.at(this.getCellIndex(row, column));
        });
        /**
     * Returns the row and column index for a given value
     */ __publicField(this, "getValueCell", (value)=>{
            const index = this.indexOf(value);
            if (index === -1) return null;
            const row = Math.floor(index / this.columnCount);
            const column = index % this.columnCount;
            return {
                row,
                column
            };
        });
        /**
     * Returns the value of the last enabled column in a row
     */ __publicField(this, "getLastEnabledColumnIndex", (row)=>{
            for(let col = this.columnCount - 1; col >= 0; col--){
                const cell = this.getCell(row, col);
                if (cell && !this.getItemDisabled(cell)) {
                    return col;
                }
            }
            return null;
        });
        /**
     * Returns the index of the first enabled column in a row
     */ __publicField(this, "getFirstEnabledColumnIndex", (row)=>{
            for(let col = 0; col < this.columnCount; col++){
                const cell = this.getCell(row, col);
                if (cell && !this.getItemDisabled(cell)) {
                    return col;
                }
            }
            return null;
        });
        /**
     * Returns the value of the previous row in the grid, based on the current value
     */ __publicField(this, "getPreviousRowValue", function(value) {
            let loop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            const currentCell = _this.getValueCell(value);
            if (currentCell === null) return null;
            const rows = _this.getRows();
            const rowCount = rows.length;
            let prevRowIndex = currentCell.row;
            let prevColumnIndex = currentCell.column;
            for(let i = 1; i <= rowCount; i++){
                prevRowIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prevIndex"])(rows, prevRowIndex, {
                    loop
                });
                const prevRow = rows[prevRowIndex];
                if (!prevRow) continue;
                const prevCell = prevRow[prevColumnIndex];
                if (!prevCell) {
                    const lastColumnIndex = _this.getLastEnabledColumnIndex(prevRowIndex);
                    if (lastColumnIndex != null) {
                        prevColumnIndex = lastColumnIndex;
                    }
                }
                const cell = _this.getCell(prevRowIndex, prevColumnIndex);
                if (!_this.getItemDisabled(cell)) {
                    return _this.getItemValue(cell);
                }
            }
            return _this.firstValue;
        });
        /**
     * Returns the value of the next row in the grid, based on the current value
     */ __publicField(this, "getNextRowValue", function(value) {
            let loop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            const currentCell = _this.getValueCell(value);
            if (currentCell === null) return null;
            const rows = _this.getRows();
            const rowCount = rows.length;
            let nextRowIndex = currentCell.row;
            let nextColumnIndex = currentCell.column;
            for(let i = 1; i <= rowCount; i++){
                nextRowIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextIndex"])(rows, nextRowIndex, {
                    loop
                });
                const nextRow = rows[nextRowIndex];
                if (!nextRow) continue;
                const nextCell = nextRow[nextColumnIndex];
                if (!nextCell) {
                    const lastColumnIndex = _this.getLastEnabledColumnIndex(nextRowIndex);
                    if (lastColumnIndex != null) {
                        nextColumnIndex = lastColumnIndex;
                    }
                }
                const cell = _this.getCell(nextRowIndex, nextColumnIndex);
                if (!_this.getItemDisabled(cell)) {
                    return _this.getItemValue(cell);
                }
            }
            return _this.lastValue;
        });
        this.columnCount = columnCount;
    }
};
function isGridCollection(v) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(v, "columnCount") && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(v, "getRows");
}
var Selection = class _Selection extends Set {
    constructor(values = []){
        super(values);
        __publicField(this, "selectionMode", "single");
        __publicField(this, "deselectable", true);
        __publicField(this, "copy", ()=>{
            const clone = new _Selection([
                ...this
            ]);
            return this.sync(clone);
        });
        __publicField(this, "sync", (other)=>{
            other.selectionMode = this.selectionMode;
            other.deselectable = this.deselectable;
            return other;
        });
        __publicField(this, "isEmpty", ()=>{
            return this.size === 0;
        });
        __publicField(this, "isSelected", (value)=>{
            if (this.selectionMode === "none" || value == null) {
                return false;
            }
            return this.has(value);
        });
        __publicField(this, "canSelect", (collection, value)=>{
            return this.selectionMode !== "none" || !collection.getItemDisabled(collection.find(value));
        });
        __publicField(this, "firstSelectedValue", (collection)=>{
            let firstValue = null;
            for (let value of this){
                if (!firstValue || collection.compareValue(value, firstValue) < 0) {
                    firstValue = value;
                }
            }
            return firstValue;
        });
        __publicField(this, "lastSelectedValue", (collection)=>{
            let lastValue = null;
            for (let value of this){
                if (!lastValue || collection.compareValue(value, lastValue) > 0) {
                    lastValue = value;
                }
            }
            return lastValue;
        });
        __publicField(this, "extendSelection", (collection, anchorValue, targetValue)=>{
            if (this.selectionMode === "none") {
                return this;
            }
            if (this.selectionMode === "single") {
                return this.replaceSelection(collection, targetValue);
            }
            const selection = this.copy();
            const lastSelected = Array.from(this).pop();
            for (let key of collection.getValueRange(anchorValue, lastSelected !== null && lastSelected !== void 0 ? lastSelected : targetValue)){
                selection.delete(key);
            }
            for (let key of collection.getValueRange(targetValue, anchorValue)){
                if (this.canSelect(collection, key)) {
                    selection.add(key);
                }
            }
            return selection;
        });
        __publicField(this, "toggleSelection", (collection, value)=>{
            if (this.selectionMode === "none") {
                return this;
            }
            if (this.selectionMode === "single" && !this.isSelected(value)) {
                return this.replaceSelection(collection, value);
            }
            const selection = this.copy();
            if (selection.has(value)) {
                selection.delete(value);
            } else if (selection.canSelect(collection, value)) {
                selection.add(value);
            }
            return selection;
        });
        __publicField(this, "replaceSelection", (collection, value)=>{
            if (this.selectionMode === "none") {
                return this;
            }
            if (value == null) {
                return this;
            }
            if (!this.canSelect(collection, value)) {
                return this;
            }
            const selection = new _Selection([
                value
            ]);
            return this.sync(selection);
        });
        __publicField(this, "setSelection", (values)=>{
            if (this.selectionMode === "none") {
                return this;
            }
            let selection = new _Selection();
            for (let value of values){
                if (value != null) {
                    selection.add(value);
                    if (this.selectionMode === "single") {
                        break;
                    }
                }
            }
            return this.sync(selection);
        });
        __publicField(this, "clearSelection", ()=>{
            const selection = this.copy();
            if (selection.deselectable && selection.size > 0) {
                selection.clear();
            }
            return selection;
        });
        __publicField(this, "select", (collection, value, forceToggle)=>{
            if (this.selectionMode === "none") {
                return this;
            }
            if (this.selectionMode === "single") {
                if (this.isSelected(value) && this.deselectable) {
                    return this.toggleSelection(collection, value);
                } else {
                    return this.replaceSelection(collection, value);
                }
            } else if (this.selectionMode === "multiple" || forceToggle) {
                return this.toggleSelection(collection, value);
            } else {
                return this.replaceSelection(collection, value);
            }
        });
        __publicField(this, "deselect", (value)=>{
            const selection = this.copy();
            selection.delete(value);
            return selection;
        });
        __publicField(this, "isEqual", (other)=>{
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(Array.from(this), Array.from(other));
        });
    }
};
// src/tree-visit.ts
function access(node, indexPath, options) {
    for(let i = 0; i < indexPath.length; i++)node = options.getChildren(node, indexPath.slice(i + 1))[indexPath[i]];
    return node;
}
function ancestorIndexPaths(indexPaths) {
    const sortedPaths = sortIndexPaths(indexPaths);
    const result = [];
    const seen = /* @__PURE__ */ new Set();
    for (const indexPath of sortedPaths){
        const key = indexPath.join();
        if (!seen.has(key)) {
            seen.add(key);
            result.push(indexPath);
        }
    }
    return result;
}
function compareIndexPaths(a, b) {
    for(let i = 0; i < Math.min(a.length, b.length); i++){
        if (a[i] < b[i]) return -1;
        if (a[i] > b[i]) return 1;
    }
    return a.length - b.length;
}
function sortIndexPaths(indexPaths) {
    return indexPaths.sort(compareIndexPaths);
}
function find(node, options) {
    let found;
    visit(node, {
        ...options,
        onEnter: (child, indexPath)=>{
            if (options.predicate(child, indexPath)) {
                found = child;
                return "stop";
            }
        }
    });
    return found;
}
function findAll(node, options) {
    const found = [];
    visit(node, {
        onEnter: (child, indexPath)=>{
            if (options.predicate(child, indexPath)) found.push(child);
        },
        getChildren: options.getChildren
    });
    return found;
}
function findIndexPath(node, options) {
    let found;
    visit(node, {
        onEnter: (child, indexPath)=>{
            if (options.predicate(child, indexPath)) {
                found = [
                    ...indexPath
                ];
                return "stop";
            }
        },
        getChildren: options.getChildren
    });
    return found;
}
function reduce(node, options) {
    let result = options.initialResult;
    visit(node, {
        ...options,
        onEnter: (child, indexPath)=>{
            result = options.nextResult(result, child, indexPath);
        }
    });
    return result;
}
function flatMap(node, options) {
    return reduce(node, {
        ...options,
        initialResult: [],
        nextResult: (result, child, indexPath)=>{
            result.push(...options.transform(child, indexPath));
            return result;
        }
    });
}
function filter(node, options) {
    const { predicate, create, getChildren } = options;
    const filterRecursive = (node2, indexPath)=>{
        const children = getChildren(node2, indexPath);
        const filteredChildren = [];
        children.forEach((child, index)=>{
            const childIndexPath = [
                ...indexPath,
                index
            ];
            const filteredChild = filterRecursive(child, childIndexPath);
            if (filteredChild) filteredChildren.push(filteredChild);
        });
        const isRoot = indexPath.length === 0;
        const nodeMatches = predicate(node2, indexPath);
        const hasFilteredChildren = filteredChildren.length > 0;
        if (isRoot || nodeMatches || hasFilteredChildren) {
            return create(node2, filteredChildren, indexPath);
        }
        return null;
    };
    return filterRecursive(node, []) || create(node, [], []);
}
function flatten(rootNode, options) {
    const nodes = [];
    let idx = 0;
    const idxMap = /* @__PURE__ */ new Map();
    const parentMap = /* @__PURE__ */ new Map();
    visit(rootNode, {
        getChildren: options.getChildren,
        onEnter: (node, indexPath)=>{
            if (!idxMap.has(node)) {
                idxMap.set(node, idx++);
            }
            const children = options.getChildren(node, indexPath);
            children.forEach((child)=>{
                if (!parentMap.has(child)) {
                    parentMap.set(child, node);
                }
                if (!idxMap.has(child)) {
                    idxMap.set(child, idx++);
                }
            });
            const _children = children.length > 0 ? children.map((child)=>idxMap.get(child)) : void 0;
            const parent = parentMap.get(node);
            const _parent = parent ? idxMap.get(parent) : void 0;
            const _index = idxMap.get(node);
            nodes.push({
                ...node,
                _children,
                _parent,
                _index
            });
        }
    });
    return nodes;
}
function insertOperation(index, nodes) {
    return {
        type: "insert",
        index,
        nodes
    };
}
function removeOperation(indexes) {
    return {
        type: "remove",
        indexes
    };
}
function replaceOperation() {
    return {
        type: "replace"
    };
}
function splitIndexPath(indexPath) {
    return [
        indexPath.slice(0, -1),
        indexPath[indexPath.length - 1]
    ];
}
function getInsertionOperations(indexPath, nodes) {
    let operations = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : /* @__PURE__ */ new Map();
    const [parentIndexPath, index] = splitIndexPath(indexPath);
    for(let i = parentIndexPath.length - 1; i >= 0; i--){
        var _operations_get;
        const parentKey = parentIndexPath.slice(0, i).join();
        switch((_operations_get = operations.get(parentKey)) === null || _operations_get === void 0 ? void 0 : _operations_get.type){
            case "remove":
                continue;
        }
        operations.set(parentKey, replaceOperation());
    }
    const operation = operations.get(parentIndexPath.join());
    switch(operation === null || operation === void 0 ? void 0 : operation.type){
        case "remove":
            operations.set(parentIndexPath.join(), {
                type: "removeThenInsert",
                removeIndexes: operation.indexes,
                insertIndex: index,
                insertNodes: nodes
            });
            break;
        default:
            operations.set(parentIndexPath.join(), insertOperation(index, nodes));
    }
    return operations;
}
function getRemovalOperations(indexPaths) {
    const operations = /* @__PURE__ */ new Map();
    const indexesToRemove = /* @__PURE__ */ new Map();
    for (const indexPath of indexPaths){
        const parentKey = indexPath.slice(0, -1).join();
        var _indexesToRemove_get;
        const value = (_indexesToRemove_get = indexesToRemove.get(parentKey)) !== null && _indexesToRemove_get !== void 0 ? _indexesToRemove_get : [];
        value.push(indexPath[indexPath.length - 1]);
        indexesToRemove.set(parentKey, value.sort((a, b)=>a - b));
    }
    for (const indexPath of indexPaths){
        for(let i = indexPath.length - 2; i >= 0; i--){
            const parentKey = indexPath.slice(0, i).join();
            if (!operations.has(parentKey)) {
                operations.set(parentKey, replaceOperation());
            }
        }
    }
    for (const [parentKey, indexes] of indexesToRemove){
        operations.set(parentKey, removeOperation(indexes));
    }
    return operations;
}
function getReplaceOperations(indexPath, node) {
    const operations = /* @__PURE__ */ new Map();
    const [parentIndexPath, index] = splitIndexPath(indexPath);
    for(let i = parentIndexPath.length - 1; i >= 0; i--){
        const parentKey = parentIndexPath.slice(0, i).join();
        operations.set(parentKey, replaceOperation());
    }
    operations.set(parentIndexPath.join(), {
        type: "removeThenInsert",
        removeIndexes: [
            index
        ],
        insertIndex: index,
        insertNodes: [
            node
        ]
    });
    return operations;
}
function mutate(node, operations, options) {
    return map(node, {
        ...options,
        getChildren: (node2, indexPath)=>{
            const key = indexPath.join();
            const operation = operations.get(key);
            switch(operation === null || operation === void 0 ? void 0 : operation.type){
                case "replace":
                case "remove":
                case "removeThenInsert":
                case "insert":
                    return options.getChildren(node2, indexPath);
                default:
                    return [];
            }
        },
        transform: (node2, children, indexPath)=>{
            const key = indexPath.join();
            const operation = operations.get(key);
            switch(operation === null || operation === void 0 ? void 0 : operation.type){
                case "remove":
                    return options.create(node2, children.filter((_, index)=>!operation.indexes.includes(index)), indexPath);
                case "removeThenInsert":
                    const updatedChildren = children.filter((_, index)=>!operation.removeIndexes.includes(index));
                    const adjustedIndex = operation.removeIndexes.reduce((index, removedIndex)=>removedIndex < index ? index - 1 : index, operation.insertIndex);
                    return options.create(node2, splice(updatedChildren, adjustedIndex, 0, ...operation.insertNodes), indexPath);
                case "insert":
                    return options.create(node2, splice(children, operation.index, 0, ...operation.nodes), indexPath);
                case "replace":
                    return options.create(node2, children, indexPath);
                default:
                    return node2;
            }
        }
    });
}
function splice(array, start, deleteCount) {
    for(var _len = arguments.length, items = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++){
        items[_key - 3] = arguments[_key];
    }
    return [
        ...array.slice(0, start),
        ...items,
        ...array.slice(start + deleteCount)
    ];
}
function map(node, options) {
    const childrenMap = {};
    visit(node, {
        ...options,
        onLeave: (child, indexPath)=>{
            const keyIndexPath = [
                0,
                ...indexPath
            ];
            const key = keyIndexPath.join();
            var _childrenMap_key;
            const transformed = options.transform(child, (_childrenMap_key = childrenMap[key]) !== null && _childrenMap_key !== void 0 ? _childrenMap_key : [], indexPath);
            const parentKey = keyIndexPath.slice(0, -1).join();
            var _childrenMap_parentKey;
            const parentChildren = (_childrenMap_parentKey = childrenMap[parentKey]) !== null && _childrenMap_parentKey !== void 0 ? _childrenMap_parentKey : [];
            parentChildren.push(transformed);
            childrenMap[parentKey] = parentChildren;
        }
    });
    return childrenMap[""][0];
}
function insert2(node, options) {
    const { nodes, at } = options;
    if (at.length === 0) throw new Error("Can't insert nodes at the root");
    const state = getInsertionOperations(at, nodes);
    return mutate(node, state, options);
}
function replace(node, options) {
    if (options.at.length === 0) return options.node;
    const operations = getReplaceOperations(options.at, options.node);
    return mutate(node, operations, options);
}
function remove(node, options) {
    if (options.indexPaths.length === 0) return node;
    for (const indexPath of options.indexPaths){
        if (indexPath.length === 0) throw new Error("Can't remove the root node");
    }
    const operations = getRemovalOperations(options.indexPaths);
    return mutate(node, operations, options);
}
function move2(node, options) {
    if (options.indexPaths.length === 0) return node;
    for (const indexPath of options.indexPaths){
        if (indexPath.length === 0) throw new Error("Can't move the root node");
    }
    if (options.to.length === 0) throw new Error("Can't move nodes to the root");
    const _ancestorIndexPaths = ancestorIndexPaths(options.indexPaths);
    const nodesToInsert = _ancestorIndexPaths.map((indexPath)=>access(node, indexPath, options));
    const operations = getInsertionOperations(options.to, nodesToInsert, getRemovalOperations(_ancestorIndexPaths));
    return mutate(node, operations, options);
}
function visit(node, options) {
    const { onEnter, onLeave, getChildren } = options;
    let indexPath = [];
    let stack = [
        {
            node
        }
    ];
    const getIndexPath = options.reuseIndexPath ? ()=>indexPath : ()=>indexPath.slice();
    while(stack.length > 0){
        let wrapper = stack[stack.length - 1];
        if (wrapper.state === void 0) {
            const enterResult = onEnter === null || onEnter === void 0 ? void 0 : onEnter(wrapper.node, getIndexPath());
            if (enterResult === "stop") return;
            wrapper.state = enterResult === "skip" ? -1 : 0;
        }
        const children = wrapper.children || getChildren(wrapper.node, getIndexPath());
        wrapper.children || (wrapper.children = children);
        if (wrapper.state !== -1) {
            if (wrapper.state < children.length) {
                let currentIndex = wrapper.state;
                indexPath.push(currentIndex);
                stack.push({
                    node: children[currentIndex]
                });
                wrapper.state = currentIndex + 1;
                continue;
            }
            const leaveResult = onLeave === null || onLeave === void 0 ? void 0 : onLeave(wrapper.node, getIndexPath());
            if (leaveResult === "stop") return;
        }
        indexPath.pop();
        stack.pop();
    }
}
// src/tree-collection.ts
var TreeCollection = class _TreeCollection {
    constructor(options){
        var _this = this;
        this.options = options;
        __publicField(this, "rootNode");
        __publicField(this, "isEqual", (other)=>{
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(this.rootNode, other.rootNode);
        });
        __publicField(this, "getNodeChildren", (node)=>{
            var _this_options_nodeToChildren, _this_options;
            var _this_options_nodeToChildren1, _ref;
            return (_ref = (_this_options_nodeToChildren1 = (_this_options_nodeToChildren = (_this_options = this.options).nodeToChildren) === null || _this_options_nodeToChildren === void 0 ? void 0 : _this_options_nodeToChildren.call(_this_options, node)) !== null && _this_options_nodeToChildren1 !== void 0 ? _this_options_nodeToChildren1 : fallbackMethods.nodeToChildren(node)) !== null && _ref !== void 0 ? _ref : [];
        });
        __publicField(this, "resolveIndexPath", (valueOrIndexPath)=>{
            return typeof valueOrIndexPath === "string" ? this.getIndexPath(valueOrIndexPath) : valueOrIndexPath;
        });
        __publicField(this, "resolveNode", (valueOrIndexPath)=>{
            const indexPath = this.resolveIndexPath(valueOrIndexPath);
            return indexPath ? this.at(indexPath) : void 0;
        });
        __publicField(this, "getNodeChildrenCount", (node)=>{
            var _this_options_nodeToChildrenCount, _this_options;
            var _this_options_nodeToChildrenCount1;
            return (_this_options_nodeToChildrenCount1 = (_this_options_nodeToChildrenCount = (_this_options = this.options).nodeToChildrenCount) === null || _this_options_nodeToChildrenCount === void 0 ? void 0 : _this_options_nodeToChildrenCount.call(_this_options, node)) !== null && _this_options_nodeToChildrenCount1 !== void 0 ? _this_options_nodeToChildrenCount1 : fallbackMethods.nodeToChildrenCount(node);
        });
        __publicField(this, "getNodeValue", (node)=>{
            var _this_options_nodeToValue, _this_options;
            var _this_options_nodeToValue1;
            return (_this_options_nodeToValue1 = (_this_options_nodeToValue = (_this_options = this.options).nodeToValue) === null || _this_options_nodeToValue === void 0 ? void 0 : _this_options_nodeToValue.call(_this_options, node)) !== null && _this_options_nodeToValue1 !== void 0 ? _this_options_nodeToValue1 : fallbackMethods.nodeToValue(node);
        });
        __publicField(this, "getNodeDisabled", (node)=>{
            var _this_options_isNodeDisabled, _this_options;
            var _this_options_isNodeDisabled1;
            return (_this_options_isNodeDisabled1 = (_this_options_isNodeDisabled = (_this_options = this.options).isNodeDisabled) === null || _this_options_isNodeDisabled === void 0 ? void 0 : _this_options_isNodeDisabled.call(_this_options, node)) !== null && _this_options_isNodeDisabled1 !== void 0 ? _this_options_isNodeDisabled1 : fallbackMethods.isNodeDisabled(node);
        });
        __publicField(this, "stringify", (value)=>{
            const node = this.findNode(value);
            if (!node) return null;
            return this.stringifyNode(node);
        });
        __publicField(this, "stringifyNode", (node)=>{
            var _this_options_nodeToString, _this_options;
            var _this_options_nodeToString1;
            return (_this_options_nodeToString1 = (_this_options_nodeToString = (_this_options = this.options).nodeToString) === null || _this_options_nodeToString === void 0 ? void 0 : _this_options_nodeToString.call(_this_options, node)) !== null && _this_options_nodeToString1 !== void 0 ? _this_options_nodeToString1 : fallbackMethods.nodeToString(node);
        });
        __publicField(this, "getFirstNode", function() {
            let rootNode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.rootNode;
            let firstChild;
            visit(rootNode, {
                getChildren: _this.getNodeChildren,
                onEnter: (node, indexPath)=>{
                    if (!firstChild && indexPath.length > 0 && !_this.getNodeDisabled(node)) {
                        firstChild = node;
                        return "stop";
                    }
                }
            });
            return firstChild;
        });
        __publicField(this, "getLastNode", function() {
            let rootNode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.rootNode, opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            let lastChild;
            visit(rootNode, {
                getChildren: _this.getNodeChildren,
                onEnter: (node, indexPath)=>{
                    var _opts_skip;
                    if (_this.isSameNode(node, rootNode)) return;
                    if ((_opts_skip = opts.skip) === null || _opts_skip === void 0 ? void 0 : _opts_skip.call(opts, {
                        value: _this.getNodeValue(node),
                        node,
                        indexPath
                    })) return "skip";
                    if (indexPath.length > 0 && !_this.getNodeDisabled(node)) {
                        lastChild = node;
                    }
                }
            });
            return lastChild;
        });
        __publicField(this, "at", (indexPath)=>{
            return access(this.rootNode, indexPath, {
                getChildren: this.getNodeChildren
            });
        });
        __publicField(this, "findNode", function(value) {
            let rootNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.rootNode;
            return find(rootNode, {
                getChildren: _this.getNodeChildren,
                predicate: (node)=>_this.getNodeValue(node) === value
            });
        });
        __publicField(this, "findNodes", function(values) {
            let rootNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.rootNode;
            const v = new Set(values.filter((v2)=>v2 != null));
            return findAll(rootNode, {
                getChildren: _this.getNodeChildren,
                predicate: (node)=>v.has(_this.getNodeValue(node))
            });
        });
        __publicField(this, "sort", (values)=>{
            return values.reduce((acc, value)=>{
                const indexPath = this.getIndexPath(value);
                if (indexPath) acc.push({
                    value,
                    indexPath
                });
                return acc;
            }, []).sort((a, b)=>compareIndexPaths(a.indexPath, b.indexPath)).map((param)=>{
                let { value } = param;
                return value;
            });
        });
        __publicField(this, "getIndexPath", (value)=>{
            return findIndexPath(this.rootNode, {
                getChildren: this.getNodeChildren,
                predicate: (node)=>this.getNodeValue(node) === value
            });
        });
        __publicField(this, "getValue", (indexPath)=>{
            const node = this.at(indexPath);
            return node ? this.getNodeValue(node) : void 0;
        });
        __publicField(this, "getValuePath", (indexPath)=>{
            if (!indexPath) return [];
            const valuePath = [];
            let currentPath = [
                ...indexPath
            ];
            while(currentPath.length > 0){
                const node = this.at(currentPath);
                if (node) valuePath.unshift(this.getNodeValue(node));
                currentPath.pop();
            }
            return valuePath;
        });
        __publicField(this, "getDepth", (value)=>{
            const indexPath = findIndexPath(this.rootNode, {
                getChildren: this.getNodeChildren,
                predicate: (node)=>this.getNodeValue(node) === value
            });
            var _indexPath_length;
            return (_indexPath_length = indexPath === null || indexPath === void 0 ? void 0 : indexPath.length) !== null && _indexPath_length !== void 0 ? _indexPath_length : 0;
        });
        __publicField(this, "isSameNode", (node, other)=>{
            return this.getNodeValue(node) === this.getNodeValue(other);
        });
        __publicField(this, "isRootNode", (node)=>{
            return this.isSameNode(node, this.rootNode);
        });
        __publicField(this, "contains", (parentIndexPath, valueIndexPath)=>{
            if (!parentIndexPath || !valueIndexPath) return false;
            return valueIndexPath.slice(0, parentIndexPath.length).every((_, i)=>parentIndexPath[i] === valueIndexPath[i]);
        });
        __publicField(this, "getNextNode", function(value) {
            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            let found = false;
            let nextNode;
            visit(_this.rootNode, {
                getChildren: _this.getNodeChildren,
                onEnter: (node, indexPath)=>{
                    var _opts_skip;
                    if (_this.isRootNode(node)) return;
                    const nodeValue = _this.getNodeValue(node);
                    if ((_opts_skip = opts.skip) === null || _opts_skip === void 0 ? void 0 : _opts_skip.call(opts, {
                        value: nodeValue,
                        node,
                        indexPath
                    })) {
                        if (nodeValue === value) {
                            found = true;
                        }
                        return "skip";
                    }
                    if (found && !_this.getNodeDisabled(node)) {
                        nextNode = node;
                        return "stop";
                    }
                    if (nodeValue === value) {
                        found = true;
                    }
                }
            });
            return nextNode;
        });
        __publicField(this, "getPreviousNode", function(value) {
            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            let previousNode;
            let found = false;
            visit(_this.rootNode, {
                getChildren: _this.getNodeChildren,
                onEnter: (node, indexPath)=>{
                    var _opts_skip;
                    if (_this.isRootNode(node)) return;
                    const nodeValue = _this.getNodeValue(node);
                    if ((_opts_skip = opts.skip) === null || _opts_skip === void 0 ? void 0 : _opts_skip.call(opts, {
                        value: nodeValue,
                        node,
                        indexPath
                    })) {
                        return "skip";
                    }
                    if (nodeValue === value) {
                        found = true;
                        return "stop";
                    }
                    if (!_this.getNodeDisabled(node)) {
                        previousNode = node;
                    }
                }
            });
            return found ? previousNode : void 0;
        });
        __publicField(this, "getParentNodes", (valueOrIndexPath)=>{
            var _this_resolveIndexPath;
            const indexPath = (_this_resolveIndexPath = this.resolveIndexPath(valueOrIndexPath)) === null || _this_resolveIndexPath === void 0 ? void 0 : _this_resolveIndexPath.slice();
            if (!indexPath) return [];
            const result = [];
            while(indexPath.length > 0){
                indexPath.pop();
                const parentNode = this.at(indexPath);
                if (parentNode && !this.isRootNode(parentNode)) {
                    result.unshift(parentNode);
                }
            }
            return result;
        });
        __publicField(this, "getDescendantNodes", (valueOrIndexPath, options)=>{
            const parentNode = this.resolveNode(valueOrIndexPath);
            if (!parentNode) return [];
            const result = [];
            visit(parentNode, {
                getChildren: this.getNodeChildren,
                onEnter: (node, nodeIndexPath)=>{
                    if (nodeIndexPath.length === 0) return;
                    if (!(options === null || options === void 0 ? void 0 : options.withBranch) && this.isBranchNode(node)) return;
                    result.push(node);
                }
            });
            return result;
        });
        __publicField(this, "getDescendantValues", (valueOrIndexPath, options)=>{
            const children = this.getDescendantNodes(valueOrIndexPath, options);
            return children.map((child)=>this.getNodeValue(child));
        });
        __publicField(this, "getParentIndexPath", (indexPath)=>{
            return indexPath.slice(0, -1);
        });
        __publicField(this, "getParentNode", (valueOrIndexPath)=>{
            const indexPath = this.resolveIndexPath(valueOrIndexPath);
            return indexPath ? this.at(this.getParentIndexPath(indexPath)) : void 0;
        });
        __publicField(this, "visit", (opts)=>{
            const { skip, ...rest } = opts;
            visit(this.rootNode, {
                ...rest,
                getChildren: this.getNodeChildren,
                onEnter: (node, indexPath)=>{
                    var _rest_onEnter;
                    if (this.isRootNode(node)) return;
                    if (skip === null || skip === void 0 ? void 0 : skip({
                        value: this.getNodeValue(node),
                        node,
                        indexPath
                    })) return "skip";
                    return (_rest_onEnter = rest.onEnter) === null || _rest_onEnter === void 0 ? void 0 : _rest_onEnter.call(rest, node, indexPath);
                }
            });
        });
        __publicField(this, "getPreviousSibling", (indexPath)=>{
            const parentNode = this.getParentNode(indexPath);
            if (!parentNode) return;
            const siblings = this.getNodeChildren(parentNode);
            let idx = indexPath[indexPath.length - 1];
            while(--idx >= 0){
                const sibling = siblings[idx];
                if (!this.getNodeDisabled(sibling)) return sibling;
            }
            return;
        });
        __publicField(this, "getNextSibling", (indexPath)=>{
            const parentNode = this.getParentNode(indexPath);
            if (!parentNode) return;
            const siblings = this.getNodeChildren(parentNode);
            let idx = indexPath[indexPath.length - 1];
            while(++idx < siblings.length){
                const sibling = siblings[idx];
                if (!this.getNodeDisabled(sibling)) return sibling;
            }
            return;
        });
        __publicField(this, "getSiblingNodes", (indexPath)=>{
            const parentNode = this.getParentNode(indexPath);
            return parentNode ? this.getNodeChildren(parentNode) : [];
        });
        __publicField(this, "getValues", function() {
            let rootNode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.rootNode;
            const values = flatMap(rootNode, {
                getChildren: _this.getNodeChildren,
                transform: (node)=>[
                        _this.getNodeValue(node)
                    ]
            });
            return values.slice(1);
        });
        __publicField(this, "isValidDepth", (indexPath, depth)=>{
            if (depth == null) return true;
            if (typeof depth === "function") return depth(indexPath.length);
            return indexPath.length === depth;
        });
        __publicField(this, "isBranchNode", (node)=>{
            return this.getNodeChildren(node).length > 0 || this.getNodeChildrenCount(node) != null;
        });
        __publicField(this, "getBranchValues", function() {
            let rootNode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.rootNode, opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            let values = [];
            visit(rootNode, {
                getChildren: _this.getNodeChildren,
                onEnter: (node, indexPath)=>{
                    var _opts_skip;
                    if (indexPath.length === 0) return;
                    const nodeValue = _this.getNodeValue(node);
                    if ((_opts_skip = opts.skip) === null || _opts_skip === void 0 ? void 0 : _opts_skip.call(opts, {
                        value: nodeValue,
                        node,
                        indexPath
                    })) return "skip";
                    if (_this.isBranchNode(node) && _this.isValidDepth(indexPath, opts.depth)) {
                        values.push(_this.getNodeValue(node));
                    }
                }
            });
            return values;
        });
        __publicField(this, "flatten", function() {
            let rootNode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.rootNode;
            return flatten(rootNode, {
                getChildren: _this.getNodeChildren
            });
        });
        __publicField(this, "_create", (node, children)=>{
            if (this.getNodeChildren(node).length > 0 || children.length > 0) {
                return {
                    ...node,
                    children
                };
            }
            return {
                ...node
            };
        });
        __publicField(this, "_insert", (rootNode, indexPath, nodes)=>{
            return this.copy(insert2(rootNode, {
                at: indexPath,
                nodes,
                getChildren: this.getNodeChildren,
                create: this._create
            }));
        });
        __publicField(this, "copy", (rootNode)=>{
            return new _TreeCollection({
                ...this.options,
                rootNode
            });
        });
        __publicField(this, "_replace", (rootNode, indexPath, node)=>{
            return this.copy(replace(rootNode, {
                at: indexPath,
                node,
                getChildren: this.getNodeChildren,
                create: this._create
            }));
        });
        __publicField(this, "_move", (rootNode, indexPaths, to)=>{
            return this.copy(move2(rootNode, {
                indexPaths,
                to,
                getChildren: this.getNodeChildren,
                create: this._create
            }));
        });
        __publicField(this, "_remove", (rootNode, indexPaths)=>{
            return this.copy(remove(rootNode, {
                indexPaths,
                getChildren: this.getNodeChildren,
                create: this._create
            }));
        });
        __publicField(this, "replace", (indexPath, node)=>{
            return this._replace(this.rootNode, indexPath, node);
        });
        __publicField(this, "remove", (indexPaths)=>{
            return this._remove(this.rootNode, indexPaths);
        });
        __publicField(this, "insertBefore", (indexPath, nodes)=>{
            const parentNode = this.getParentNode(indexPath);
            return parentNode ? this._insert(this.rootNode, indexPath, nodes) : void 0;
        });
        __publicField(this, "insertAfter", (indexPath, nodes)=>{
            const parentNode = this.getParentNode(indexPath);
            if (!parentNode) return;
            const nextIndex2 = [
                ...indexPath.slice(0, -1),
                indexPath[indexPath.length - 1] + 1
            ];
            return this._insert(this.rootNode, nextIndex2, nodes);
        });
        __publicField(this, "move", (fromIndexPaths, toIndexPath)=>{
            return this._move(this.rootNode, fromIndexPaths, toIndexPath);
        });
        __publicField(this, "filter", (predicate)=>{
            const filteredRoot = filter(this.rootNode, {
                predicate,
                getChildren: this.getNodeChildren,
                create: this._create
            });
            return this.copy(filteredRoot);
        });
        __publicField(this, "toJSON", ()=>{
            return this.getValues(this.rootNode);
        });
        this.rootNode = options.rootNode;
    }
};
function flattenedToTree(nodes) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fallbackMethods;
    if (nodes.length === 0) {
        throw new Error("[zag-js/tree] Cannot create tree from empty flattened array");
    }
    const rootFlatNode = nodes.find((node)=>node._parent === void 0);
    if (!rootFlatNode) {
        throw new Error("[zag-js/tree] No root node found in flattened data");
    }
    const nodeMap = /* @__PURE__ */ new Map();
    nodes.forEach((node)=>{
        nodeMap.set(node._index, node);
    });
    const buildNode = (idx)=>{
        const flatNode = nodeMap.get(idx);
        if (!flatNode) return {};
        const { _children, _parent, _index, ...cleanNode } = flatNode;
        const children = [];
        _children === null || _children === void 0 ? void 0 : _children.forEach((childIndex)=>{
            children.push(buildNode(childIndex));
        });
        return {
            ...cleanNode,
            ...children.length > 0 && {
                children
            }
        };
    };
    const rootNode = buildNode(rootFlatNode._index);
    return new TreeCollection({
        ...options,
        rootNode
    });
}
function filePathToTree(paths) {
    const rootNode = {
        label: "",
        value: "ROOT",
        children: []
    };
    paths.forEach((path)=>{
        const parts = path.split("/");
        let currentNode = rootNode;
        parts.forEach((part, index)=>{
            var _currentNode_children;
            let childNode = (_currentNode_children = currentNode.children) === null || _currentNode_children === void 0 ? void 0 : _currentNode_children.find((child)=>child.label === part);
            if (!childNode) {
                childNode = {
                    value: parts.slice(0, index + 1).join("/"),
                    label: part
                };
                currentNode.children || (currentNode.children = []);
                currentNode.children.push(childNode);
            }
            currentNode = childNode;
        });
    });
    return new TreeCollection({
        rootNode
    });
}
var fallbackMethods = {
    nodeToValue (node) {
        if (typeof node === "string") return node;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(node) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(node, "value")) return node.value;
        return "";
    },
    nodeToString (node) {
        if (typeof node === "string") return node;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(node) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(node, "label")) return node.label;
        return fallbackMethods.nodeToValue(node);
    },
    isNodeDisabled (node) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(node) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(node, "disabled")) return !!node.disabled;
        return false;
    },
    nodeToChildren (node) {
        return node.children;
    },
    nodeToChildrenCount (node) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(node) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(node, "childrenCount")) return node.childrenCount;
    }
};
;
}),
"[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/caret.ts
__turbopack_context__.s([
    "MAX_Z_INDEX",
    ()=>MAX_Z_INDEX,
    "addDomEvent",
    ()=>addDomEvent,
    "ariaAttr",
    ()=>ariaAttr,
    "clickIfLink",
    ()=>clickIfLink,
    "contains",
    ()=>contains,
    "createScope",
    ()=>createScope,
    "dataAttr",
    ()=>dataAttr,
    "defaultItemToId",
    ()=>defaultItemToId,
    "disableTextSelection",
    ()=>disableTextSelection,
    "dispatchInputCheckedEvent",
    ()=>dispatchInputCheckedEvent,
    "dispatchInputValueEvent",
    ()=>dispatchInputValueEvent,
    "getActiveElement",
    ()=>getActiveElement,
    "getBeforeInputValue",
    ()=>getBeforeInputValue,
    "getByText",
    ()=>getByText,
    "getByTypeahead",
    ()=>getByTypeahead,
    "getComputedStyle",
    ()=>getComputedStyle,
    "getDataUrl",
    ()=>getDataUrl,
    "getDocument",
    ()=>getDocument,
    "getDocumentElement",
    ()=>getDocumentElement,
    "getEventKey",
    ()=>getEventKey,
    "getEventPoint",
    ()=>getEventPoint,
    "getEventStep",
    ()=>getEventStep,
    "getEventTarget",
    ()=>getEventTarget,
    "getFirstFocusable",
    ()=>getFirstFocusable,
    "getFirstTabbable",
    ()=>getFirstTabbable,
    "getFocusables",
    ()=>getFocusables,
    "getInitialFocus",
    ()=>getInitialFocus,
    "getLastTabbable",
    ()=>getLastTabbable,
    "getNativeEvent",
    ()=>getNativeEvent,
    "getNearestOverflowAncestor",
    ()=>getNearestOverflowAncestor,
    "getNextTabbable",
    ()=>getNextTabbable,
    "getNodeName",
    ()=>getNodeName,
    "getOverflowAncestors",
    ()=>getOverflowAncestors,
    "getParentNode",
    ()=>getParentNode,
    "getPlatform",
    ()=>getPlatform,
    "getRelativePoint",
    ()=>getRelativePoint,
    "getScrollPosition",
    ()=>getScrollPosition,
    "getTabIndex",
    ()=>getTabIndex,
    "getTabbableEdges",
    ()=>getTabbableEdges,
    "getTabbables",
    ()=>getTabbables,
    "getUserAgent",
    ()=>getUserAgent,
    "getWindow",
    ()=>getWindow,
    "indexOfId",
    ()=>indexOfId,
    "isAnchorElement",
    ()=>isAnchorElement,
    "isAndroid",
    ()=>isAndroid,
    "isApple",
    ()=>isApple,
    "isCaretAtStart",
    ()=>isCaretAtStart,
    "isChrome",
    ()=>isChrome,
    "isComposingEvent",
    ()=>isComposingEvent,
    "isContextMenuEvent",
    ()=>isContextMenuEvent,
    "isCtrlOrMetaKey",
    ()=>isCtrlOrMetaKey,
    "isDocument",
    ()=>isDocument,
    "isDom",
    ()=>isDom,
    "isDownloadingEvent",
    ()=>isDownloadingEvent,
    "isEditableElement",
    ()=>isEditableElement,
    "isElementVisible",
    ()=>isElementVisible,
    "isFirefox",
    ()=>isFirefox,
    "isFocusable",
    ()=>isFocusable,
    "isHTMLElement",
    ()=>isHTMLElement,
    "isIPad",
    ()=>isIPad,
    "isIPhone",
    ()=>isIPhone,
    "isInView",
    ()=>isInView,
    "isInputElement",
    ()=>isInputElement,
    "isIos",
    ()=>isIos,
    "isKeyboardClick",
    ()=>isKeyboardClick,
    "isLeftClick",
    ()=>isLeftClick,
    "isMac",
    ()=>isMac,
    "isModifierKey",
    ()=>isModifierKey,
    "isNode",
    ()=>isNode,
    "isOpeningInNewTab",
    ()=>isOpeningInNewTab,
    "isOverflowElement",
    ()=>isOverflowElement,
    "isPrintableKey",
    ()=>isPrintableKey,
    "isRootElement",
    ()=>isRootElement,
    "isSafari",
    ()=>isSafari,
    "isSelfTarget",
    ()=>isSelfTarget,
    "isShadowRoot",
    ()=>isShadowRoot,
    "isTabbable",
    ()=>isTabbable,
    "isTouchDevice",
    ()=>isTouchDevice,
    "isTouchEvent",
    ()=>isTouchEvent,
    "isValidTabEvent",
    ()=>isValidTabEvent,
    "isVirtualClick",
    ()=>isVirtualClick,
    "isVirtualPointerEvent",
    ()=>isVirtualPointerEvent,
    "isVisualViewport",
    ()=>isVisualViewport,
    "isWebKit",
    ()=>isWebKit,
    "isWindow",
    ()=>isWindow,
    "itemById",
    ()=>itemById,
    "nextById",
    ()=>nextById,
    "nextTick",
    ()=>nextTick,
    "observeAttributes",
    ()=>observeAttributes,
    "observeChildren",
    ()=>observeChildren,
    "prevById",
    ()=>prevById,
    "proxyTabFocus",
    ()=>proxyTabFocus,
    "query",
    ()=>query,
    "queryAll",
    ()=>queryAll,
    "queueBeforeEvent",
    ()=>queueBeforeEvent,
    "raf",
    ()=>raf,
    "requestPointerLock",
    ()=>requestPointerLock,
    "restoreTextSelection",
    ()=>restoreTextSelection,
    "scrollIntoView",
    ()=>scrollIntoView,
    "setAttribute",
    ()=>setAttribute,
    "setCaretToEnd",
    ()=>setCaretToEnd,
    "setElementChecked",
    ()=>setElementChecked,
    "setElementValue",
    ()=>setElementValue,
    "setProperty",
    ()=>setProperty,
    "setStyle",
    ()=>setStyle,
    "setStyleProperty",
    ()=>setStyleProperty,
    "setVisuallyHidden",
    ()=>setVisuallyHidden,
    "trackElementRect",
    ()=>trackElementRect,
    "trackFormControl",
    ()=>trackFormControl,
    "trackPointerMove",
    ()=>trackPointerMove,
    "trackPress",
    ()=>trackPress,
    "trackVisualViewport",
    ()=>trackVisualViewport,
    "visuallyHiddenStyle",
    ()=>visuallyHiddenStyle,
    "waitForElement",
    ()=>waitForElement,
    "waitForPromise",
    ()=>waitForPromise
]);
function isCaretAtStart(input) {
    if (!input) return false;
    try {
        return input.selectionStart === 0 && input.selectionEnd === 0;
    } catch (e) {
        return input.value === "";
    }
}
function setCaretToEnd(input) {
    if (!input) return;
    var _input_selectionStart;
    const start = (_input_selectionStart = input.selectionStart) !== null && _input_selectionStart !== void 0 ? _input_selectionStart : 0;
    var _input_selectionEnd;
    const end = (_input_selectionEnd = input.selectionEnd) !== null && _input_selectionEnd !== void 0 ? _input_selectionEnd : 0;
    if (Math.abs(end - start) !== 0) return;
    if (start !== 0) return;
    input.setSelectionRange(input.value.length, input.value.length);
}
// src/shared.ts
var clamp = (value)=>Math.max(0, Math.min(1, value));
var wrap = (v, idx)=>{
    return v.map((_, index)=>v[(Math.max(idx, 0) + index) % v.length]);
};
var pipe = function() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){
        fns[_key] = arguments[_key];
    }
    return (arg)=>fns.reduce((acc, fn)=>fn(acc), arg);
};
var noop = ()=>void 0;
var isObject = (v)=>typeof v === "object" && v !== null;
var MAX_Z_INDEX = 2147483647;
var dataAttr = (guard)=>guard ? "" : void 0;
var ariaAttr = (guard)=>guard ? "true" : void 0;
// src/node.ts
var ELEMENT_NODE = 1;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;
var isHTMLElement = (el)=>isObject(el) && el.nodeType === ELEMENT_NODE && typeof el.nodeName === "string";
var isDocument = (el)=>isObject(el) && el.nodeType === DOCUMENT_NODE;
var isWindow = (el)=>isObject(el) && el === el.window;
var isVisualViewport = (el)=>isObject(el) && el.constructor.name === "VisualViewport";
var getNodeName = (node)=>{
    if (isHTMLElement(node)) return node.localName || "";
    return "#document";
};
function isRootElement(node) {
    return [
        "html",
        "body",
        "#document"
    ].includes(getNodeName(node));
}
var isNode = (el)=>isObject(el) && el.nodeType !== void 0;
var isShadowRoot = (el)=>isNode(el) && el.nodeType === DOCUMENT_FRAGMENT_NODE && "host" in el;
var isInputElement = (el)=>isHTMLElement(el) && el.localName === "input";
var isAnchorElement = (el)=>!!(el === null || el === void 0 ? void 0 : el.matches("a[href]"));
var isElementVisible = (el)=>{
    if (!isHTMLElement(el)) return false;
    return el.offsetWidth > 0 || el.offsetHeight > 0 || el.getClientRects().length > 0;
};
var TEXTAREA_SELECT_REGEX = /(textarea|select)/;
function isEditableElement(el) {
    if (el == null || !isHTMLElement(el)) return false;
    try {
        return isInputElement(el) && el.selectionStart != null || TEXTAREA_SELECT_REGEX.test(el.localName) || el.isContentEditable || el.getAttribute("contenteditable") === "true" || el.getAttribute("contenteditable") === "";
    } catch (e) {
        return false;
    }
}
function contains(parent, child) {
    var _child_getRootNode;
    if (!parent || !child) return false;
    if (!isHTMLElement(parent) || !isHTMLElement(child)) return false;
    const rootNode = (_child_getRootNode = child.getRootNode) === null || _child_getRootNode === void 0 ? void 0 : _child_getRootNode.call(child);
    if (parent === child) return true;
    if (parent.contains(child)) return true;
    if (rootNode && isShadowRoot(rootNode)) {
        let next = child;
        while(next){
            if (parent === next) return true;
            next = next.parentNode || next.host;
        }
    }
    return false;
}
function getDocument(el) {
    if (isDocument(el)) return el;
    if (isWindow(el)) return el.document;
    var _el_ownerDocument;
    return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
}
function getDocumentElement(el) {
    return getDocument(el).documentElement;
}
function getWindow(el) {
    var _el_ownerDocument;
    if (isShadowRoot(el)) return getWindow(el.host);
    var _el_defaultView;
    if (isDocument(el)) return (_el_defaultView = el.defaultView) !== null && _el_defaultView !== void 0 ? _el_defaultView : window;
    var _el_ownerDocument_defaultView;
    if (isHTMLElement(el)) return (_el_ownerDocument_defaultView = (_el_ownerDocument = el.ownerDocument) === null || _el_ownerDocument === void 0 ? void 0 : _el_ownerDocument.defaultView) !== null && _el_ownerDocument_defaultView !== void 0 ? _el_ownerDocument_defaultView : window;
    return window;
}
function getActiveElement(rootNode) {
    let activeElement = rootNode.activeElement;
    while(activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot){
        const el = activeElement.shadowRoot.activeElement;
        if (el === activeElement) break;
        else activeElement = el;
    }
    return activeElement;
}
function getParentNode(node) {
    if (getNodeName(node) === "html") return node;
    const result = node.assignedSlot || node.parentNode || isShadowRoot(node) && node.host || getDocumentElement(node);
    return isShadowRoot(result) ? result.host : result;
}
// src/computed-style.ts
var styleCache = /* @__PURE__ */ new WeakMap();
function getComputedStyle(el) {
    if (!styleCache.has(el)) {
        styleCache.set(el, getWindow(el).getComputedStyle(el));
    }
    return styleCache.get(el);
}
// src/data-url.ts
function getDataUrl(svg, opts) {
    const { type, quality = 0.92, background } = opts;
    if (!svg) throw new Error("[zag-js > getDataUrl]: Could not find the svg element");
    const win = getWindow(svg);
    const doc = win.document;
    const svgBounds = svg.getBoundingClientRect();
    const svgClone = svg.cloneNode(true);
    if (!svgClone.hasAttribute("viewBox")) {
        svgClone.setAttribute("viewBox", "0 0 ".concat(svgBounds.width, " ").concat(svgBounds.height));
    }
    const serializer = new win.XMLSerializer();
    const source = '<?xml version="1.0" standalone="no"?>\r\n' + serializer.serializeToString(svgClone);
    const svgString = "data:image/svg+xml;charset=utf-8," + encodeURIComponent(source);
    if (type === "image/svg+xml") {
        return Promise.resolve(svgString).then((str)=>{
            svgClone.remove();
            return str;
        });
    }
    const dpr = win.devicePixelRatio || 1;
    const canvas = doc.createElement("canvas");
    const image = new win.Image();
    image.src = svgString;
    canvas.width = svgBounds.width * dpr;
    canvas.height = svgBounds.height * dpr;
    const context = canvas.getContext("2d");
    if (type === "image/jpeg" || background) {
        context.fillStyle = background || "white";
        context.fillRect(0, 0, canvas.width, canvas.height);
    }
    return new Promise((resolve)=>{
        image.onload = ()=>{
            context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);
            resolve(canvas.toDataURL(type, quality));
            svgClone.remove();
        };
    });
}
// src/platform.ts
var isDom = ()=>typeof document !== "undefined";
function getPlatform() {
    const agent = navigator.userAgentData;
    var _agent_platform;
    return (_agent_platform = agent === null || agent === void 0 ? void 0 : agent.platform) !== null && _agent_platform !== void 0 ? _agent_platform : navigator.platform;
}
function getUserAgent() {
    const ua2 = navigator.userAgentData;
    if (ua2 && Array.isArray(ua2.brands)) {
        return ua2.brands.map((param)=>{
            let { brand, version } = param;
            return "".concat(brand, "/").concat(version);
        }).join(" ");
    }
    return navigator.userAgent;
}
var pt = (v)=>isDom() && v.test(getPlatform());
var ua = (v)=>isDom() && v.test(getUserAgent());
var vn = (v)=>isDom() && v.test(navigator.vendor);
var isTouchDevice = ()=>isDom() && !!navigator.maxTouchPoints;
var isIPhone = ()=>pt(/^iPhone/i);
var isIPad = ()=>pt(/^iPad/i) || isMac() && navigator.maxTouchPoints > 1;
var isIos = ()=>isIPhone() || isIPad();
var isApple = ()=>isMac() || isIos();
var isMac = ()=>pt(/^Mac/i);
var isSafari = ()=>isApple() && vn(/apple/i);
var isFirefox = ()=>ua(/Firefox/i);
var isChrome = ()=>ua(/Chrome/i);
var isWebKit = ()=>ua(/AppleWebKit/i) && !isChrome();
var isAndroid = ()=>ua(/Android/i);
// src/event.ts
function getBeforeInputValue(event) {
    const { selectionStart, selectionEnd, value } = event.currentTarget;
    return value.slice(0, selectionStart) + event.data + value.slice(selectionEnd);
}
function getComposedPath(event) {
    var _event_composedPath, _event_nativeEvent_composedPath, _event_nativeEvent;
    var _event_composedPath1;
    return (_event_composedPath1 = (_event_composedPath = event.composedPath) === null || _event_composedPath === void 0 ? void 0 : _event_composedPath.call(event)) !== null && _event_composedPath1 !== void 0 ? _event_composedPath1 : (_event_nativeEvent = event.nativeEvent) === null || _event_nativeEvent === void 0 ? void 0 : (_event_nativeEvent_composedPath = _event_nativeEvent.composedPath) === null || _event_nativeEvent_composedPath === void 0 ? void 0 : _event_nativeEvent_composedPath.call(_event_nativeEvent);
}
function getEventTarget(event) {
    const composedPath = getComposedPath(event);
    var _composedPath_;
    return (_composedPath_ = composedPath === null || composedPath === void 0 ? void 0 : composedPath[0]) !== null && _composedPath_ !== void 0 ? _composedPath_ : event.target;
}
var isSelfTarget = (event)=>{
    return contains(event.currentTarget, getEventTarget(event));
};
function isOpeningInNewTab(event) {
    const element = event.currentTarget;
    if (!element) return false;
    const validElement = element.matches("a[href], button[type='submit'], input[type='submit']");
    if (!validElement) return false;
    const isMiddleClick = event.button === 1;
    const isModKeyClick = isCtrlOrMetaKey(event);
    return isMiddleClick || isModKeyClick;
}
function isDownloadingEvent(event) {
    const element = event.currentTarget;
    if (!element) return false;
    const localName = element.localName;
    if (!event.altKey) return false;
    if (localName === "a") return true;
    if (localName === "button" && element.type === "submit") return true;
    if (localName === "input" && element.type === "submit") return true;
    return false;
}
function isComposingEvent(event) {
    return getNativeEvent(event).isComposing || event.keyCode === 229;
}
function isKeyboardClick(e) {
    return e.detail === 0 || e.clientX === 0 && e.clientY === 0;
}
function isCtrlOrMetaKey(e) {
    if (isMac()) return e.metaKey;
    return e.ctrlKey;
}
function isPrintableKey(e) {
    return e.key.length === 1 && !e.ctrlKey && !e.metaKey;
}
function isVirtualPointerEvent(e) {
    return e.width === 0 && e.height === 0 || e.width === 1 && e.height === 1 && e.pressure === 0 && e.detail === 0 && e.pointerType === "mouse";
}
function isVirtualClick(e) {
    if (e.pointerType === "" && e.isTrusted) return true;
    if (isAndroid() && e.pointerType) {
        return e.type === "click" && e.buttons === 1;
    }
    return e.detail === 0 && !e.pointerType;
}
var isLeftClick = (e)=>e.button === 0;
var isContextMenuEvent = (e)=>{
    return e.button === 2 || isMac() && e.ctrlKey && e.button === 0;
};
var isModifierKey = (e)=>e.ctrlKey || e.altKey || e.metaKey;
var isTouchEvent = (event)=>"touches" in event && event.touches.length > 0;
var keyMap = {
    Up: "ArrowUp",
    Down: "ArrowDown",
    Esc: "Escape",
    " ": "Space",
    ",": "Comma",
    Left: "ArrowLeft",
    Right: "ArrowRight"
};
var rtlKeyMap = {
    ArrowLeft: "ArrowRight",
    ArrowRight: "ArrowLeft"
};
function getEventKey(event) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { dir = "ltr", orientation = "horizontal" } = options;
    let key = event.key;
    var _keyMap_key;
    key = (_keyMap_key = keyMap[key]) !== null && _keyMap_key !== void 0 ? _keyMap_key : key;
    const isRtl = dir === "rtl" && orientation === "horizontal";
    if (isRtl && key in rtlKeyMap) key = rtlKeyMap[key];
    return key;
}
function getNativeEvent(event) {
    var _event_nativeEvent;
    return (_event_nativeEvent = event.nativeEvent) !== null && _event_nativeEvent !== void 0 ? _event_nativeEvent : event;
}
var pageKeys = /* @__PURE__ */ new Set([
    "PageUp",
    "PageDown"
]);
var arrowKeys = /* @__PURE__ */ new Set([
    "ArrowUp",
    "ArrowDown",
    "ArrowLeft",
    "ArrowRight"
]);
function getEventStep(event) {
    if (event.ctrlKey || event.metaKey) {
        return 0.1;
    } else {
        const isPageKey = pageKeys.has(event.key);
        const isSkipKey = isPageKey || event.shiftKey && arrowKeys.has(event.key);
        return isSkipKey ? 10 : 1;
    }
}
function getEventPoint(event) {
    let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "client";
    const point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;
    return {
        x: point["".concat(type, "X")],
        y: point["".concat(type, "Y")]
    };
}
var addDomEvent = (target, eventName, handler, options)=>{
    const node = typeof target === "function" ? target() : target;
    node === null || node === void 0 ? void 0 : node.addEventListener(eventName, handler, options);
    return ()=>{
        node === null || node === void 0 ? void 0 : node.removeEventListener(eventName, handler, options);
    };
};
// src/form.ts
function getDescriptor(el, options) {
    const { type = "HTMLInputElement", property = "value" } = options;
    const proto = getWindow(el)[type].prototype;
    var _Object_getOwnPropertyDescriptor;
    return (_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(proto, property)) !== null && _Object_getOwnPropertyDescriptor !== void 0 ? _Object_getOwnPropertyDescriptor : {};
}
function getElementType(el) {
    if (el.localName === "input") return "HTMLInputElement";
    if (el.localName === "textarea") return "HTMLTextAreaElement";
    if (el.localName === "select") return "HTMLSelectElement";
}
function setElementValue(el, value) {
    let property = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "value";
    if (!el) return;
    const type = getElementType(el);
    if (type) {
        var _descriptor_set;
        const descriptor = getDescriptor(el, {
            type,
            property
        });
        (_descriptor_set = descriptor.set) === null || _descriptor_set === void 0 ? void 0 : _descriptor_set.call(el, value);
    }
    el.setAttribute(property, value);
}
function setElementChecked(el, checked) {
    var _descriptor_set;
    if (!el) return;
    const descriptor = getDescriptor(el, {
        type: "HTMLInputElement",
        property: "checked"
    });
    (_descriptor_set = descriptor.set) === null || _descriptor_set === void 0 ? void 0 : _descriptor_set.call(el, checked);
    if (checked) el.setAttribute("checked", "");
    else el.removeAttribute("checked");
}
function dispatchInputValueEvent(el, options) {
    const { value, bubbles = true } = options;
    if (!el) return;
    const win = getWindow(el);
    if (!(el instanceof win.HTMLInputElement)) return;
    setElementValue(el, "".concat(value));
    el.dispatchEvent(new win.Event("input", {
        bubbles
    }));
}
function dispatchInputCheckedEvent(el, options) {
    const { checked, bubbles = true } = options;
    if (!el) return;
    const win = getWindow(el);
    if (!(el instanceof win.HTMLInputElement)) return;
    setElementChecked(el, checked);
    el.dispatchEvent(new win.Event("click", {
        bubbles
    }));
}
function getClosestForm(el) {
    return isFormElement(el) ? el.form : el.closest("form");
}
function isFormElement(el) {
    return el.matches("textarea, input, select, button");
}
function trackFormReset(el, callback) {
    if (!el) return;
    const form = getClosestForm(el);
    const onReset = (e)=>{
        if (e.defaultPrevented) return;
        callback();
    };
    form === null || form === void 0 ? void 0 : form.addEventListener("reset", onReset, {
        passive: true
    });
    return ()=>form === null || form === void 0 ? void 0 : form.removeEventListener("reset", onReset);
}
function trackFieldsetDisabled(el, callback) {
    const fieldset = el === null || el === void 0 ? void 0 : el.closest("fieldset");
    if (!fieldset) return;
    callback(fieldset.disabled);
    const win = getWindow(fieldset);
    const obs = new win.MutationObserver(()=>callback(fieldset.disabled));
    obs.observe(fieldset, {
        attributes: true,
        attributeFilter: [
            "disabled"
        ]
    });
    return ()=>obs.disconnect();
}
function trackFormControl(el, options) {
    if (!el) return;
    const { onFieldsetDisabledChange, onFormReset } = options;
    const cleanups = [
        trackFormReset(el, onFormReset),
        trackFieldsetDisabled(el, onFieldsetDisabledChange)
    ];
    return ()=>cleanups.forEach((cleanup)=>cleanup === null || cleanup === void 0 ? void 0 : cleanup());
}
// src/tabbable.ts
var isFrame = (el)=>isHTMLElement(el) && el.tagName === "IFRAME";
var hasTabIndex = (el)=>!Number.isNaN(parseInt(el.getAttribute("tabindex") || "0", 10));
var hasNegativeTabIndex = (el)=>parseInt(el.getAttribute("tabindex") || "0", 10) < 0;
var focusableSelector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false']), details > summary:first-of-type";
var getFocusables = function(container) {
    let includeContainer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (!container) return [];
    const elements = Array.from(container.querySelectorAll(focusableSelector));
    const include = includeContainer == true || includeContainer == "if-empty" && elements.length === 0;
    if (include && isHTMLElement(container) && isFocusable(container)) {
        elements.unshift(container);
    }
    const focusableElements = elements.filter(isFocusable);
    focusableElements.forEach((element, i)=>{
        if (isFrame(element) && element.contentDocument) {
            const frameBody = element.contentDocument.body;
            focusableElements.splice(i, 1, ...getFocusables(frameBody));
        }
    });
    return focusableElements;
};
function isFocusable(element) {
    if (!element || element.closest("[inert]")) return false;
    return element.matches(focusableSelector) && isElementVisible(element);
}
function getFirstFocusable(container, includeContainer) {
    const [first] = getFocusables(container, includeContainer);
    return first || null;
}
function getTabbables(container, includeContainer) {
    if (!container) return [];
    const elements = Array.from(container.querySelectorAll(focusableSelector));
    const tabbableElements = elements.filter(isTabbable);
    if (includeContainer && isTabbable(container)) {
        tabbableElements.unshift(container);
    }
    tabbableElements.forEach((element, i)=>{
        if (isFrame(element) && element.contentDocument) {
            const frameBody = element.contentDocument.body;
            const allFrameTabbable = getTabbables(frameBody);
            tabbableElements.splice(i, 1, ...allFrameTabbable);
        }
    });
    if (!tabbableElements.length && includeContainer) {
        return elements;
    }
    return tabbableElements;
}
function isTabbable(el) {
    if (el != null && el.tabIndex > 0) return true;
    return isFocusable(el) && !hasNegativeTabIndex(el);
}
function getFirstTabbable(container, includeContainer) {
    const [first] = getTabbables(container, includeContainer);
    return first || null;
}
function getLastTabbable(container, includeContainer) {
    const elements = getTabbables(container, includeContainer);
    return elements[elements.length - 1] || null;
}
function getTabbableEdges(container, includeContainer) {
    const elements = getTabbables(container, includeContainer);
    const first = elements[0] || null;
    const last = elements[elements.length - 1] || null;
    return [
        first,
        last
    ];
}
function getNextTabbable(container, current) {
    const tabbables = getTabbables(container);
    const doc = (container === null || container === void 0 ? void 0 : container.ownerDocument) || document;
    const currentElement = current !== null && current !== void 0 ? current : doc.activeElement;
    if (!currentElement) return null;
    const index = tabbables.indexOf(currentElement);
    return tabbables[index + 1] || null;
}
function getTabIndex(node) {
    if (node.tabIndex < 0) {
        if ((/^(audio|video|details)$/.test(node.localName) || isEditableElement(node)) && !hasTabIndex(node)) {
            return 0;
        }
    }
    return node.tabIndex;
}
// src/initial-focus.ts
function getInitialFocus(options) {
    const { root, getInitialEl, filter, enabled = true } = options;
    if (!enabled) return;
    let node = null;
    node || (node = typeof getInitialEl === "function" ? getInitialEl() : getInitialEl);
    node || (node = root === null || root === void 0 ? void 0 : root.querySelector("[data-autofocus],[autofocus]"));
    if (!node) {
        const tabbables = getTabbables(root);
        node = filter ? tabbables.filter(filter)[0] : tabbables[0];
    }
    return node || root || void 0;
}
function isValidTabEvent(event) {
    const container = event.currentTarget;
    if (!container) return false;
    const [firstTabbable, lastTabbable] = getTabbableEdges(container);
    const doc = container.ownerDocument || document;
    if (doc.activeElement === firstTabbable && event.shiftKey) return false;
    if (doc.activeElement === lastTabbable && !event.shiftKey) return false;
    if (!firstTabbable && !lastTabbable) return false;
    return true;
}
// src/raf.ts
function nextTick(fn) {
    const set = /* @__PURE__ */ new Set();
    function raf2(fn2) {
        const id = globalThis.requestAnimationFrame(fn2);
        set.add(()=>globalThis.cancelAnimationFrame(id));
    }
    raf2(()=>raf2(fn));
    return function cleanup() {
        set.forEach((fn2)=>fn2());
    };
}
function raf(fn) {
    let cleanup;
    const id = globalThis.requestAnimationFrame(()=>{
        cleanup = fn();
    });
    return ()=>{
        globalThis.cancelAnimationFrame(id);
        cleanup === null || cleanup === void 0 ? void 0 : cleanup();
    };
}
function queueBeforeEvent(el, type, cb) {
    const cancelTimer = raf(()=>{
        el.removeEventListener(type, exec, true);
        cb();
    });
    const exec = ()=>{
        cancelTimer();
        cb();
    };
    el.addEventListener(type, exec, {
        once: true,
        capture: true
    });
    return cancelTimer;
}
// src/mutation-observer.ts
function observeAttributesImpl(node, options) {
    if (!node) return;
    const { attributes, callback: fn } = options;
    const win = node.ownerDocument.defaultView || window;
    const obs = new win.MutationObserver((changes)=>{
        for (const change of changes){
            if (change.type === "attributes" && change.attributeName && attributes.includes(change.attributeName)) {
                fn(change);
            }
        }
    });
    obs.observe(node, {
        attributes: true,
        attributeFilter: attributes
    });
    return ()=>obs.disconnect();
}
function observeAttributes(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? raf : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const node = typeof nodeOrFn === "function" ? nodeOrFn() : nodeOrFn;
        cleanups.push(observeAttributesImpl(node, options));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
function observeChildrenImpl(node, options) {
    const { callback: fn } = options;
    if (!node) return;
    const win = node.ownerDocument.defaultView || window;
    const obs = new win.MutationObserver(fn);
    obs.observe(node, {
        childList: true,
        subtree: true
    });
    return ()=>obs.disconnect();
}
function observeChildren(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? raf : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const node = typeof nodeOrFn === "function" ? nodeOrFn() : nodeOrFn;
        cleanups.push(observeChildrenImpl(node, options));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
// src/navigate.ts
function clickIfLink(el) {
    const click = ()=>{
        const win = getWindow(el);
        el.dispatchEvent(new win.MouseEvent("click"));
    };
    if (isFirefox()) {
        queueBeforeEvent(el, "keyup", click);
    } else {
        queueMicrotask(click);
    }
}
// src/overflow.ts
function getNearestOverflowAncestor(el) {
    const parentNode = getParentNode(el);
    if (isRootElement(parentNode)) return getDocument(parentNode).body;
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) return parentNode;
    return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(el) {
    let list = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const scrollableAncestor = getNearestOverflowAncestor(el);
    const isBody = scrollableAncestor === el.ownerDocument.body;
    const win = getWindow(scrollableAncestor);
    if (isBody) {
        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, []));
}
var getElementRect = (el)=>{
    if (isHTMLElement(el)) return el.getBoundingClientRect();
    if (isVisualViewport(el)) return {
        top: 0,
        left: 0,
        bottom: el.height,
        right: el.width
    };
    return {
        top: 0,
        left: 0,
        bottom: el.innerHeight,
        right: el.innerWidth
    };
};
function isInView(el, ancestor) {
    if (!isHTMLElement(el)) return true;
    const ancestorRect = getElementRect(ancestor);
    const elRect = el.getBoundingClientRect();
    return elRect.top >= ancestorRect.top && elRect.left >= ancestorRect.left && elRect.bottom <= ancestorRect.bottom && elRect.right <= ancestorRect.right;
}
var OVERFLOW_RE = /auto|scroll|overlay|hidden|clip/;
var nonOverflowValues = /* @__PURE__ */ new Set([
    "inline",
    "contents"
]);
function isOverflowElement(el) {
    const win = getWindow(el);
    const { overflow, overflowX, overflowY, display } = win.getComputedStyle(el);
    return OVERFLOW_RE.test(overflow + overflowY + overflowX) && !nonOverflowValues.has(display);
}
function isScrollable(el) {
    return el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth;
}
function scrollIntoView(el, options) {
    const { rootEl, ...scrollOptions } = options || {};
    if (!el || !rootEl) return;
    if (!isOverflowElement(rootEl) || !isScrollable(rootEl)) return;
    el.scrollIntoView(scrollOptions);
}
function getScrollPosition(element) {
    if (isHTMLElement(element)) {
        return {
            scrollLeft: element.scrollLeft,
            scrollTop: element.scrollTop
        };
    }
    return {
        scrollLeft: element.scrollX,
        scrollTop: element.scrollY
    };
}
// src/point.ts
function getRelativePoint(point, element) {
    const { left, top, width, height } = element.getBoundingClientRect();
    const offset = {
        x: point.x - left,
        y: point.y - top
    };
    const percent = {
        x: clamp(offset.x / width),
        y: clamp(offset.y / height)
    };
    function getPercentValue() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const { dir = "ltr", orientation = "horizontal", inverted } = options;
        const invertX = typeof inverted === "object" ? inverted.x : inverted;
        const invertY = typeof inverted === "object" ? inverted.y : inverted;
        if (orientation === "horizontal") {
            return dir === "rtl" || invertX ? 1 - percent.x : percent.x;
        }
        return invertY ? 1 - percent.y : percent.y;
    }
    return {
        offset,
        percent,
        getPercentValue
    };
}
// src/pointer-lock.ts
function requestPointerLock(doc, fn) {
    const body = doc.body;
    const supported = "pointerLockElement" in doc || "mozPointerLockElement" in doc;
    const isLocked = ()=>!!doc.pointerLockElement;
    function onPointerChange() {
        fn === null || fn === void 0 ? void 0 : fn(isLocked());
    }
    function onPointerError(event) {
        if (isLocked()) fn === null || fn === void 0 ? void 0 : fn(false);
        console.error("PointerLock error occurred:", event);
        doc.exitPointerLock();
    }
    if (!supported) return;
    try {
        body.requestPointerLock();
    } catch (e) {}
    const cleanup = [
        addDomEvent(doc, "pointerlockchange", onPointerChange, false),
        addDomEvent(doc, "pointerlockerror", onPointerError, false)
    ];
    return ()=>{
        cleanup.forEach((cleanup2)=>cleanup2());
        doc.exitPointerLock();
    };
}
// src/text-selection.ts
var state = "default";
var userSelect = "";
var elementMap = /* @__PURE__ */ new WeakMap();
function disableTextSelectionImpl() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const { target, doc } = options;
    const docNode = doc !== null && doc !== void 0 ? doc : document;
    const rootEl = docNode.documentElement;
    if (isIos()) {
        if (state === "default") {
            userSelect = rootEl.style.webkitUserSelect;
            rootEl.style.webkitUserSelect = "none";
        }
        state = "disabled";
    } else if (target) {
        elementMap.set(target, target.style.userSelect);
        target.style.userSelect = "none";
    }
    return ()=>restoreTextSelection({
            target,
            doc: docNode
        });
}
function restoreTextSelection() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const { target, doc } = options;
    const docNode = doc !== null && doc !== void 0 ? doc : document;
    const rootEl = docNode.documentElement;
    if (isIos()) {
        if (state !== "disabled") return;
        state = "restoring";
        setTimeout(()=>{
            nextTick(()=>{
                if (state === "restoring") {
                    if (rootEl.style.webkitUserSelect === "none") {
                        rootEl.style.webkitUserSelect = userSelect || "";
                    }
                    userSelect = "";
                    state = "default";
                }
            });
        }, 300);
    } else {
        if (target && elementMap.has(target)) {
            const prevUserSelect = elementMap.get(target);
            if (target.style.userSelect === "none") {
                target.style.userSelect = prevUserSelect !== null && prevUserSelect !== void 0 ? prevUserSelect : "";
            }
            if (target.getAttribute("style") === "") {
                target.removeAttribute("style");
            }
            elementMap.delete(target);
        }
    }
}
function disableTextSelection() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const { defer, target, ...restOptions } = options;
    const func = defer ? raf : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const node = typeof target === "function" ? target() : target;
        cleanups.push(disableTextSelectionImpl({
            ...restOptions,
            target: node
        }));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
// src/pointer-move.ts
function trackPointerMove(doc, handlers) {
    const { onPointerMove, onPointerUp } = handlers;
    const handleMove = (event)=>{
        const point = getEventPoint(event);
        const distance = Math.sqrt(point.x ** 2 + point.y ** 2);
        const moveBuffer = event.pointerType === "touch" ? 10 : 5;
        if (distance < moveBuffer) return;
        if (event.pointerType === "mouse" && event.button === 0) {
            onPointerUp();
            return;
        }
        onPointerMove({
            point,
            event
        });
    };
    const cleanups = [
        addDomEvent(doc, "pointermove", handleMove, false),
        addDomEvent(doc, "pointerup", onPointerUp, false),
        addDomEvent(doc, "pointercancel", onPointerUp, false),
        addDomEvent(doc, "contextmenu", onPointerUp, false),
        disableTextSelection({
            doc
        })
    ];
    return ()=>{
        cleanups.forEach((cleanup)=>cleanup());
    };
}
// src/press.ts
function trackPress(options) {
    const { pointerNode, keyboardNode = pointerNode, onPress, onPressStart, onPressEnd, isValidKey = (e)=>e.key === "Enter" } = options;
    if (!pointerNode) return noop;
    const win = getWindow(pointerNode);
    const doc = getDocument(pointerNode);
    let removeStartListeners = noop;
    let removeEndListeners = noop;
    let removeAccessibleListeners = noop;
    const getInfo = (event)=>({
            point: getEventPoint(event),
            event
        });
    function startPress(event) {
        onPressStart === null || onPressStart === void 0 ? void 0 : onPressStart(getInfo(event));
    }
    function cancelPress(event) {
        onPressEnd === null || onPressEnd === void 0 ? void 0 : onPressEnd(getInfo(event));
    }
    const startPointerPress = (startEvent)=>{
        removeEndListeners();
        const endPointerPress = (endEvent)=>{
            const target = getEventTarget(endEvent);
            if (contains(pointerNode, target)) {
                onPress === null || onPress === void 0 ? void 0 : onPress(getInfo(endEvent));
            } else {
                onPressEnd === null || onPressEnd === void 0 ? void 0 : onPressEnd(getInfo(endEvent));
            }
        };
        const removePointerUpListener = addDomEvent(win, "pointerup", endPointerPress, {
            passive: !onPress,
            once: true
        });
        const removePointerCancelListener = addDomEvent(win, "pointercancel", cancelPress, {
            passive: !onPressEnd,
            once: true
        });
        removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);
        if (doc.activeElement === keyboardNode && startEvent.pointerType === "mouse") {
            startEvent.preventDefault();
        }
        startPress(startEvent);
    };
    const removePointerListener = addDomEvent(pointerNode, "pointerdown", startPointerPress, {
        passive: !onPressStart
    });
    const removeFocusListener = addDomEvent(keyboardNode, "focus", startAccessiblePress);
    removeStartListeners = pipe(removePointerListener, removeFocusListener);
    function startAccessiblePress() {
        const handleKeydown = (keydownEvent)=>{
            if (!isValidKey(keydownEvent)) return;
            const handleKeyup = (keyupEvent)=>{
                if (!isValidKey(keyupEvent)) return;
                const evt2 = new win.PointerEvent("pointerup");
                const info = getInfo(evt2);
                onPress === null || onPress === void 0 ? void 0 : onPress(info);
                onPressEnd === null || onPressEnd === void 0 ? void 0 : onPressEnd(info);
            };
            removeEndListeners();
            removeEndListeners = addDomEvent(keyboardNode, "keyup", handleKeyup);
            const evt = new win.PointerEvent("pointerdown");
            startPress(evt);
        };
        const handleBlur = ()=>{
            const evt = new win.PointerEvent("pointercancel");
            cancelPress(evt);
        };
        const removeKeydownListener = addDomEvent(keyboardNode, "keydown", handleKeydown);
        const removeBlurListener = addDomEvent(keyboardNode, "blur", handleBlur);
        removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);
    }
    return ()=>{
        removeStartListeners();
        removeEndListeners();
        removeAccessibleListeners();
    };
}
// src/proxy-tab-focus.ts
function proxyTabFocusImpl(container) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { triggerElement, onFocus, onFocusEnter } = options;
    const doc = (container === null || container === void 0 ? void 0 : container.ownerDocument) || document;
    const body = doc.body;
    function onKeyDown(event) {
        if (event.key !== "Tab") return;
        let elementToFocus = null;
        const [firstTabbable, lastTabbable] = getTabbableEdges(container, true);
        const nextTabbableAfterTrigger = getNextTabbable(body, triggerElement);
        const noTabbableElements = !firstTabbable && !lastTabbable;
        if (event.shiftKey && nextTabbableAfterTrigger === doc.activeElement) {
            onFocusEnter === null || onFocusEnter === void 0 ? void 0 : onFocusEnter();
            elementToFocus = lastTabbable;
        } else if (event.shiftKey && (doc.activeElement === firstTabbable || noTabbableElements)) {
            elementToFocus = triggerElement;
        } else if (!event.shiftKey && doc.activeElement === triggerElement) {
            onFocusEnter === null || onFocusEnter === void 0 ? void 0 : onFocusEnter();
            elementToFocus = firstTabbable;
        } else if (!event.shiftKey && (doc.activeElement === lastTabbable || noTabbableElements)) {
            elementToFocus = nextTabbableAfterTrigger;
        }
        if (!elementToFocus) return;
        event.preventDefault();
        if (typeof onFocus === "function") {
            onFocus(elementToFocus);
        } else {
            elementToFocus.focus();
        }
    }
    return addDomEvent(doc, "keydown", onKeyDown, true);
}
function proxyTabFocus(container, options) {
    const { defer, triggerElement, ...restOptions } = options;
    const func = defer ? raf : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const node = typeof container === "function" ? container() : container;
        const trigger = typeof triggerElement === "function" ? triggerElement() : triggerElement;
        cleanups.push(proxyTabFocusImpl(node, {
            triggerElement: trigger,
            ...restOptions
        }));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
// src/query.ts
function queryAll(root, selector) {
    var _root_querySelectorAll;
    return Array.from((_root_querySelectorAll = root === null || root === void 0 ? void 0 : root.querySelectorAll(selector)) !== null && _root_querySelectorAll !== void 0 ? _root_querySelectorAll : []);
}
function query(root, selector) {
    var _root_querySelector;
    return (_root_querySelector = root === null || root === void 0 ? void 0 : root.querySelector(selector)) !== null && _root_querySelector !== void 0 ? _root_querySelector : null;
}
var defaultItemToId = (v)=>v.id;
function itemById(v, id) {
    let itemToId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultItemToId;
    return v.find((item)=>itemToId(item) === id);
}
function indexOfId(v, id) {
    let itemToId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultItemToId;
    const item = itemById(v, id, itemToId);
    return item ? v.indexOf(item) : -1;
}
function nextById(v, id) {
    let loop = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    let idx = indexOfId(v, id);
    idx = loop ? (idx + 1) % v.length : Math.min(idx + 1, v.length - 1);
    return v[idx];
}
function prevById(v, id) {
    let loop = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    let idx = indexOfId(v, id);
    if (idx === -1) return loop ? v[v.length - 1] : null;
    idx = loop ? (idx - 1 + v.length) % v.length : Math.max(0, idx - 1);
    return v[idx];
}
// src/resize-observer.ts
function trackElementRect(elements, options) {
    const { onEntry, measure, box = "border-box" } = options;
    const elems = (Array.isArray(elements) ? elements : [
        elements
    ]).filter(isHTMLElement);
    const win = getWindow(elems[0]);
    const trigger = (entries)=>{
        const rects = elems.map((el)=>measure(el));
        onEntry({
            rects,
            entries
        });
    };
    trigger([]);
    const obs = new win.ResizeObserver(trigger);
    elems.forEach((el)=>obs.observe(el, {
            box
        }));
    return ()=>obs.disconnect();
}
// src/scope.ts
function createScope(methods) {
    const dom = {
        getRootNode: (ctx)=>{
            var _ctx_getRootNode;
            var _ctx_getRootNode1;
            return (_ctx_getRootNode1 = (_ctx_getRootNode = ctx.getRootNode) === null || _ctx_getRootNode === void 0 ? void 0 : _ctx_getRootNode.call(ctx)) !== null && _ctx_getRootNode1 !== void 0 ? _ctx_getRootNode1 : document;
        },
        getDoc: (ctx)=>getDocument(dom.getRootNode(ctx)),
        getWin: (ctx)=>{
            var _dom_getDoc_defaultView;
            return (_dom_getDoc_defaultView = dom.getDoc(ctx).defaultView) !== null && _dom_getDoc_defaultView !== void 0 ? _dom_getDoc_defaultView : window;
        },
        getActiveElement: (ctx)=>getActiveElement(dom.getRootNode(ctx)),
        isActiveElement: (ctx, elem)=>elem === dom.getActiveElement(ctx),
        getById: (ctx, id)=>dom.getRootNode(ctx).getElementById(id),
        setValue: (elem, value)=>{
            if (elem == null || value == null) return;
            setElementValue(elem, value.toString());
        }
    };
    return {
        ...dom,
        ...methods
    };
}
// src/searchable.ts
var sanitize = (str)=>str.split("").map((char)=>{
        const code = char.charCodeAt(0);
        if (code > 0 && code < 128) return char;
        if (code >= 128 && code <= 255) return "/x".concat(code.toString(16)).replace("/", "\\");
        return "";
    }).join("").trim();
var getValueText = (el)=>{
    var _el_dataset;
    var _el_dataset_valuetext, _ref;
    return sanitize((_ref = (_el_dataset_valuetext = (_el_dataset = el.dataset) === null || _el_dataset === void 0 ? void 0 : _el_dataset.valuetext) !== null && _el_dataset_valuetext !== void 0 ? _el_dataset_valuetext : el.textContent) !== null && _ref !== void 0 ? _ref : "");
};
var match = (valueText, query2)=>{
    return valueText.trim().toLowerCase().startsWith(query2.toLowerCase());
};
function getByText(v, text, currentId) {
    let itemToId = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : defaultItemToId;
    const index = currentId ? indexOfId(v, currentId, itemToId) : -1;
    let items = currentId ? wrap(v, index) : v;
    const isSingleKey = text.length === 1;
    if (isSingleKey) {
        items = items.filter((item)=>itemToId(item) !== currentId);
    }
    return items.find((item)=>match(getValueText(item), text));
}
// src/set.ts
function setAttribute(el, attr, v) {
    const prev = el.getAttribute(attr);
    const exists = prev != null;
    el.setAttribute(attr, v);
    return ()=>{
        if (!exists) {
            el.removeAttribute(attr);
        } else {
            el.setAttribute(attr, prev);
        }
    };
}
function setProperty(el, prop, v) {
    const exists = prop in el;
    const prev = el[prop];
    el[prop] = v;
    return ()=>{
        if (!exists) {
            delete el[prop];
        } else {
            el[prop] = prev;
        }
    };
}
function setStyle(el, style) {
    if (!el) return noop;
    const prev = Object.keys(style).reduce((acc, key)=>{
        acc[key] = el.style.getPropertyValue(key);
        return acc;
    }, {});
    Object.assign(el.style, style);
    return ()=>{
        Object.assign(el.style, prev);
        if (el.style.length === 0) {
            el.removeAttribute("style");
        }
    };
}
function setStyleProperty(el, prop, value) {
    if (!el) return noop;
    const prev = el.style.getPropertyValue(prop);
    el.style.setProperty(prop, value);
    return ()=>{
        el.style.setProperty(prop, prev);
        if (el.style.length === 0) {
            el.removeAttribute("style");
        }
    };
}
// src/typeahead.ts
function getByTypeaheadImpl(baseItems, options) {
    const { state: state2, activeId, key, timeout = 350, itemToId } = options;
    const search = state2.keysSoFar + key;
    const isRepeated = search.length > 1 && Array.from(search).every((char)=>char === search[0]);
    const query2 = isRepeated ? search[0] : search;
    let items = baseItems.slice();
    const next = getByText(items, query2, activeId, itemToId);
    function cleanup() {
        clearTimeout(state2.timer);
        state2.timer = -1;
    }
    function update(value) {
        state2.keysSoFar = value;
        cleanup();
        if (value !== "") {
            state2.timer = +setTimeout(()=>{
                update("");
                cleanup();
            }, timeout);
        }
    }
    update(search);
    return next;
}
var getByTypeahead = /* @__PURE__ */ Object.assign(getByTypeaheadImpl, {
    defaultOptions: {
        keysSoFar: "",
        timer: -1
    },
    isValidEvent: isValidTypeaheadEvent
});
function isValidTypeaheadEvent(event) {
    return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
}
// src/visual-viewport.ts
function trackVisualViewport(doc, fn) {
    const win = (doc === null || doc === void 0 ? void 0 : doc.defaultView) || window;
    const onResize = ()=>{
        fn === null || fn === void 0 ? void 0 : fn(getViewportSize(win));
    };
    onResize();
    var _win_visualViewport;
    return addDomEvent((_win_visualViewport = win.visualViewport) !== null && _win_visualViewport !== void 0 ? _win_visualViewport : win, "resize", onResize);
}
function getViewportSize(win) {
    var _win_visualViewport, _win_visualViewport1;
    return {
        width: ((_win_visualViewport = win.visualViewport) === null || _win_visualViewport === void 0 ? void 0 : _win_visualViewport.width) || win.innerWidth,
        height: ((_win_visualViewport1 = win.visualViewport) === null || _win_visualViewport1 === void 0 ? void 0 : _win_visualViewport1.height) || win.innerHeight
    };
}
// src/visually-hidden.ts
var visuallyHiddenStyle = {
    border: "0",
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: "0",
    position: "absolute",
    width: "1px",
    whiteSpace: "nowrap",
    wordWrap: "normal"
};
function setVisuallyHidden(el) {
    Object.assign(el.style, visuallyHiddenStyle);
}
// src/wait-for.ts
function waitForPromise(promise, controller, timeout) {
    const { signal } = controller;
    const wrappedPromise = new Promise((resolve, reject)=>{
        const timeoutId = setTimeout(()=>{
            reject(new Error("Timeout of ".concat(timeout, "ms exceeded")));
        }, timeout);
        signal.addEventListener("abort", ()=>{
            clearTimeout(timeoutId);
            reject(new Error("Promise aborted"));
        });
        promise.then((result)=>{
            if (!signal.aborted) {
                clearTimeout(timeoutId);
                resolve(result);
            }
        }).catch((error)=>{
            if (!signal.aborted) {
                clearTimeout(timeoutId);
                reject(error);
            }
        });
    });
    const abort = ()=>controller.abort();
    return [
        wrappedPromise,
        abort
    ];
}
function waitForElement(target, options) {
    const { timeout, rootNode } = options;
    const win = getWindow(rootNode);
    const doc = getDocument(rootNode);
    const controller = new win.AbortController();
    return waitForPromise(new Promise((resolve)=>{
        const el = target();
        if (el) {
            resolve(el);
            return;
        }
        const observer = new win.MutationObserver(()=>{
            const el2 = target();
            if (el2 && el2.isConnected) {
                observer.disconnect();
                resolve(el2);
            }
        });
        observer.observe(doc.body, {
            childList: true,
            subtree: true
        });
    }), controller, timeout);
}
;
}),
"[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "getPlacement",
    ()=>getPlacement,
    "getPlacementSide",
    ()=>getPlacementSide,
    "getPlacementStyles",
    ()=>getPlacementStyles,
    "isValidPlacement",
    ()=>isValidPlacement
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
// src/get-placement.ts
function createDOMRect() {
    let x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, width = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, height = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    if (typeof DOMRect === "function") {
        return new DOMRect(x, y, width, height);
    }
    const rect = {
        x,
        y,
        width,
        height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x
    };
    return {
        ...rect,
        toJSON: ()=>rect
    };
}
function getDOMRect(anchorRect) {
    if (!anchorRect) return createDOMRect();
    const { x, y, width, height } = anchorRect;
    return createDOMRect(x, y, width, height);
}
function getAnchorElement(anchorElement, getAnchorRect) {
    return {
        contextElement: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHTMLElement"])(anchorElement) ? anchorElement : void 0,
        getBoundingClientRect: ()=>{
            const anchor = anchorElement;
            const anchorRect = getAnchorRect === null || getAnchorRect === void 0 ? void 0 : getAnchorRect(anchor);
            if (anchorRect || !anchor) {
                return getDOMRect(anchorRect);
            }
            return anchor.getBoundingClientRect();
        }
    };
}
// src/middleware.ts
var toVar = (value)=>({
        variable: value,
        reference: "var(".concat(value, ")")
    });
var cssVars = {
    arrowSize: toVar("--arrow-size"),
    arrowSizeHalf: toVar("--arrow-size-half"),
    arrowBg: toVar("--arrow-background"),
    transformOrigin: toVar("--transform-origin"),
    arrowOffset: toVar("--arrow-offset")
};
var getSideAxis = (side)=>side === "top" || side === "bottom" ? "y" : "x";
function createTransformOriginMiddleware(opts, arrowEl) {
    return {
        name: "transformOrigin",
        fn (state) {
            var _middlewareData_arrow, _middlewareData_arrow1, _middlewareData_shift, _opts_offset;
            const { elements, middlewareData, placement, rects, y } = state;
            const side = placement.split("-")[0];
            const axis = getSideAxis(side);
            const arrowX = ((_middlewareData_arrow = middlewareData.arrow) === null || _middlewareData_arrow === void 0 ? void 0 : _middlewareData_arrow.x) || 0;
            const arrowY = ((_middlewareData_arrow1 = middlewareData.arrow) === null || _middlewareData_arrow1 === void 0 ? void 0 : _middlewareData_arrow1.y) || 0;
            const arrowWidth = (arrowEl === null || arrowEl === void 0 ? void 0 : arrowEl.clientWidth) || 0;
            const arrowHeight = (arrowEl === null || arrowEl === void 0 ? void 0 : arrowEl.clientHeight) || 0;
            const transformX = arrowX + arrowWidth / 2;
            const transformY = arrowY + arrowHeight / 2;
            const shiftY = Math.abs(((_middlewareData_shift = middlewareData.shift) === null || _middlewareData_shift === void 0 ? void 0 : _middlewareData_shift.y) || 0);
            const halfAnchorHeight = rects.reference.height / 2;
            const arrowOffset = arrowHeight / 2;
            var _opts_offset_mainAxis;
            const gutter = (_opts_offset_mainAxis = (_opts_offset = opts.offset) === null || _opts_offset === void 0 ? void 0 : _opts_offset.mainAxis) !== null && _opts_offset_mainAxis !== void 0 ? _opts_offset_mainAxis : opts.gutter;
            const sideOffsetValue = typeof gutter === "number" ? gutter + arrowOffset : gutter !== null && gutter !== void 0 ? gutter : arrowOffset;
            const isOverlappingAnchor = shiftY > sideOffsetValue;
            const adjacentTransformOrigin = {
                top: "".concat(transformX, "px calc(100% + ").concat(sideOffsetValue, "px)"),
                bottom: "".concat(transformX, "px ").concat(-sideOffsetValue, "px"),
                left: "calc(100% + ".concat(sideOffsetValue, "px) ").concat(transformY, "px"),
                right: "".concat(-sideOffsetValue, "px ").concat(transformY, "px")
            }[side];
            const overlapTransformOrigin = "".concat(transformX, "px ").concat(rects.reference.y + halfAnchorHeight - y, "px");
            const useOverlap = Boolean(opts.overlap) && axis === "y" && isOverlappingAnchor;
            elements.floating.style.setProperty(cssVars.transformOrigin.variable, useOverlap ? overlapTransformOrigin : adjacentTransformOrigin);
            return {
                data: {
                    transformOrigin: useOverlap ? overlapTransformOrigin : adjacentTransformOrigin
                }
            };
        }
    };
}
var rectMiddleware = {
    name: "rects",
    fn (param) {
        let { rects } = param;
        return {
            data: rects
        };
    }
};
var shiftArrowMiddleware = (arrowEl)=>{
    if (!arrowEl) return;
    return {
        name: "shiftArrow",
        fn (param) {
            let { placement, middlewareData } = param;
            if (!middlewareData.arrow) return {};
            const { x, y } = middlewareData.arrow;
            const dir = placement.split("-")[0];
            Object.assign(arrowEl.style, {
                left: x != null ? "".concat(x, "px") : "",
                top: y != null ? "".concat(y, "px") : "",
                [dir]: "calc(100% + ".concat(cssVars.arrowOffset.reference, ")")
            });
            return {};
        }
    };
};
// src/placement.ts
function isValidPlacement(v) {
    return /^(?:top|bottom|left|right)(?:-(?:start|end))?$/.test(v);
}
function getPlacementDetails(placement) {
    const [side, align] = placement.split("-");
    return {
        side,
        align,
        hasAlign: align != null
    };
}
function getPlacementSide(placement) {
    return placement.split("-")[0];
}
// src/get-placement.ts
var defaultOptions = {
    strategy: "absolute",
    placement: "bottom",
    listeners: true,
    gutter: 8,
    flip: true,
    slide: true,
    overlap: false,
    sameWidth: false,
    fitViewport: false,
    overflowPadding: 8,
    arrowPadding: 4
};
function roundByDpr(win, value) {
    const dpr = win.devicePixelRatio || 1;
    return Math.round(value * dpr) / dpr;
}
function resolveBoundaryOption(boundary) {
    if (typeof boundary === "function") return boundary();
    if (boundary === "clipping-ancestors") return "clippingAncestors";
    return boundary;
}
function getArrowMiddleware(arrowElement, doc, opts) {
    const element = arrowElement || doc.createElement("div");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["arrow"])({
        element,
        padding: opts.arrowPadding
    });
}
function getOffsetMiddleware(arrowElement, opts) {
    var _opts_offset;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNull"])((_opts_offset = opts.offset) !== null && _opts_offset !== void 0 ? _opts_offset : opts.gutter)) return;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["offset"])((param)=>{
        let { placement } = param;
        var _opts_offset, _opts_offset1;
        const arrowOffset = ((arrowElement === null || arrowElement === void 0 ? void 0 : arrowElement.clientHeight) || 0) / 2;
        var _opts_offset_mainAxis;
        const gutter = (_opts_offset_mainAxis = (_opts_offset = opts.offset) === null || _opts_offset === void 0 ? void 0 : _opts_offset.mainAxis) !== null && _opts_offset_mainAxis !== void 0 ? _opts_offset_mainAxis : opts.gutter;
        const mainAxis = typeof gutter === "number" ? gutter + arrowOffset : gutter !== null && gutter !== void 0 ? gutter : arrowOffset;
        const { hasAlign } = getPlacementDetails(placement);
        const shift2 = !hasAlign ? opts.shift : void 0;
        var _opts_offset_crossAxis;
        const crossAxis = (_opts_offset_crossAxis = (_opts_offset1 = opts.offset) === null || _opts_offset1 === void 0 ? void 0 : _opts_offset1.crossAxis) !== null && _opts_offset_crossAxis !== void 0 ? _opts_offset_crossAxis : shift2;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compact"])({
            crossAxis,
            mainAxis,
            alignmentAxis: opts.shift
        });
    });
}
function getFlipMiddleware(opts) {
    if (!opts.flip) return;
    const boundary = resolveBoundaryOption(opts.boundary);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["flip"])({
        ...boundary ? {
            boundary
        } : void 0,
        padding: opts.overflowPadding,
        fallbackPlacements: opts.flip === true ? void 0 : opts.flip
    });
}
function getShiftMiddleware(opts) {
    if (!opts.slide && !opts.overlap) return;
    const boundary = resolveBoundaryOption(opts.boundary);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["shift"])({
        ...boundary ? {
            boundary
        } : void 0,
        mainAxis: opts.slide,
        crossAxis: opts.overlap,
        padding: opts.overflowPadding,
        limiter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["limitShift"])()
    });
}
function getSizeMiddleware(opts) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["size"])({
        padding: opts.overflowPadding,
        apply (param) {
            let { elements, rects, availableHeight, availableWidth } = param;
            const floating = elements.floating;
            const referenceWidth = Math.round(rects.reference.width);
            const referenceHeight = Math.round(rects.reference.height);
            availableWidth = Math.floor(availableWidth);
            availableHeight = Math.floor(availableHeight);
            floating.style.setProperty("--reference-width", "".concat(referenceWidth, "px"));
            floating.style.setProperty("--reference-height", "".concat(referenceHeight, "px"));
            floating.style.setProperty("--available-width", "".concat(availableWidth, "px"));
            floating.style.setProperty("--available-height", "".concat(availableHeight, "px"));
        }
    });
}
function hideWhenDetachedMiddleware(opts) {
    if (!opts.hideWhenDetached) return;
    var _resolveBoundaryOption;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hide"])({
        strategy: "referenceHidden",
        boundary: (_resolveBoundaryOption = resolveBoundaryOption(opts.boundary)) !== null && _resolveBoundaryOption !== void 0 ? _resolveBoundaryOption : "clippingAncestors"
    });
}
function getAutoUpdateOptions(opts) {
    if (!opts) return {};
    if (opts === true) {
        return {
            ancestorResize: true,
            ancestorScroll: true,
            elementResize: true,
            layoutShift: true
        };
    }
    return opts;
}
function getPlacementImpl(referenceOrVirtual, floating) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const reference = getAnchorElement(referenceOrVirtual, opts.getAnchorRect);
    if (!floating || !reference) return;
    const options = Object.assign({}, defaultOptions, opts);
    const arrowEl = floating.querySelector("[data-part=arrow]");
    const middleware = [
        getOffsetMiddleware(arrowEl, options),
        getFlipMiddleware(options),
        getShiftMiddleware(options),
        getArrowMiddleware(arrowEl, floating.ownerDocument, options),
        shiftArrowMiddleware(arrowEl),
        createTransformOriginMiddleware({
            gutter: options.gutter,
            offset: options.offset,
            overlap: options.overlap
        }, arrowEl),
        getSizeMiddleware(options),
        hideWhenDetachedMiddleware(options),
        rectMiddleware
    ];
    const { placement, strategy, onComplete, onPositioned } = options;
    const updatePosition = async ()=>{
        if (!reference || !floating) return;
        const pos = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["computePosition"])(reference, floating, {
            placement,
            middleware,
            strategy
        });
        onComplete === null || onComplete === void 0 ? void 0 : onComplete(pos);
        onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned({
            placed: true
        });
        const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(floating);
        const x = roundByDpr(win, pos.x);
        const y = roundByDpr(win, pos.y);
        floating.style.setProperty("--x", "".concat(x, "px"));
        floating.style.setProperty("--y", "".concat(y, "px"));
        if (options.hideWhenDetached) {
            var _pos_middlewareData_hide;
            const isHidden = (_pos_middlewareData_hide = pos.middlewareData.hide) === null || _pos_middlewareData_hide === void 0 ? void 0 : _pos_middlewareData_hide.referenceHidden;
            if (isHidden) {
                floating.style.setProperty("visibility", "hidden");
                floating.style.setProperty("pointer-events", "none");
            } else {
                floating.style.removeProperty("visibility");
                floating.style.removeProperty("pointer-events");
            }
        }
        const contentEl = floating.firstElementChild;
        if (contentEl) {
            const styles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(contentEl);
            floating.style.setProperty("--z-index", styles.zIndex);
        }
    };
    const update = async ()=>{
        if (opts.updatePosition) {
            await opts.updatePosition({
                updatePosition,
                floatingElement: floating
            });
            onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned({
                placed: true
            });
        } else {
            await updatePosition();
        }
    };
    const autoUpdateOptions = getAutoUpdateOptions(options.listeners);
    const cancelAutoUpdate = options.listeners ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["autoUpdate"])(reference, floating, update, autoUpdateOptions) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["noop"];
    update();
    return ()=>{
        cancelAutoUpdate === null || cancelAutoUpdate === void 0 ? void 0 : cancelAutoUpdate();
        onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned({
            placed: false
        });
    };
}
function getPlacement(referenceOrFn, floatingOrFn) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const { defer, ...options } = opts;
    const func = defer ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"] : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const reference = typeof referenceOrFn === "function" ? referenceOrFn() : referenceOrFn;
        const floating = typeof floatingOrFn === "function" ? floatingOrFn() : floatingOrFn;
        cleanups.push(getPlacementImpl(reference, floating, options));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
// src/get-styles.ts
var ARROW_FLOATING_STYLE = {
    bottom: "rotate(45deg)",
    left: "rotate(135deg)",
    top: "rotate(225deg)",
    right: "rotate(315deg)"
};
function getPlacementStyles() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const { placement, sameWidth, fitViewport, strategy = "absolute" } = options;
    return {
        arrow: {
            position: "absolute",
            width: cssVars.arrowSize.reference,
            height: cssVars.arrowSize.reference,
            [cssVars.arrowSizeHalf.variable]: "calc(".concat(cssVars.arrowSize.reference, " / 2)"),
            [cssVars.arrowOffset.variable]: "calc(".concat(cssVars.arrowSizeHalf.reference, " * -1)")
        },
        arrowTip: {
            // @ts-expect-error - Fix this
            transform: placement ? ARROW_FLOATING_STYLE[placement.split("-")[0]] : void 0,
            background: cssVars.arrowBg.reference,
            top: "0",
            left: "0",
            width: "100%",
            height: "100%",
            position: "absolute",
            zIndex: "inherit"
        },
        floating: {
            position: strategy,
            isolation: "isolate",
            minWidth: sameWidth ? void 0 : "max-content",
            width: sameWidth ? "var(--reference-width)" : void 0,
            maxWidth: fitViewport ? "var(--available-width)" : void 0,
            maxHeight: fitViewport ? "var(--available-height)" : void 0,
            pointerEvents: !placement ? "none" : void 0,
            top: "0px",
            left: "0px",
            // move off-screen if placement is not defined
            transform: placement ? "translate3d(var(--x), var(--y), 0)" : "translate3d(0, -100vh, 0)",
            zIndex: "var(--z-index)"
        }
    };
}
;
}),
"[project]/node_modules/@zag-js/aria-hidden/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/walk-tree-outside.ts
__turbopack_context__.s([
    "ariaHidden",
    ()=>ariaHidden
]);
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = (node)=>node && (node.host || unwrapHost(node.parentNode));
var correctTargets = (parent, targets)=>targets.map((target)=>{
        if (parent.contains(target)) return target;
        const correctedTarget = unwrapHost(target);
        if (correctedTarget && parent.contains(correctedTarget)) {
            return correctedTarget;
        }
        console.error("[zag-js > ariaHidden] target", target, "in not contained inside", parent, ". Doing nothing");
        return null;
    }).filter((x)=>Boolean(x));
var ignoreableNodes = /* @__PURE__ */ new Set([
    "script",
    "output",
    "status",
    "next-route-announcer"
]);
var isIgnoredNode = (node)=>{
    if (ignoreableNodes.has(node.localName)) return true;
    if (node.role === "status") return true;
    if (node.hasAttribute("aria-live")) return true;
    return node.matches("[data-live-announcer]");
};
var walkTreeOutside = (originalTarget, props)=>{
    const { parentNode, markerName, controlAttribute } = props;
    const targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [
        originalTarget
    ]);
    markerMap[markerName] || (markerMap[markerName] = /* @__PURE__ */ new WeakMap());
    const markerCounter = markerMap[markerName];
    const hiddenNodes = [];
    const elementsToKeep = /* @__PURE__ */ new Set();
    const elementsToStop = new Set(targets);
    const keep = (el)=>{
        if (!el || elementsToKeep.has(el)) return;
        elementsToKeep.add(el);
        keep(el.parentNode);
    };
    targets.forEach(keep);
    const deep = (parent)=>{
        if (!parent || elementsToStop.has(parent)) {
            return;
        }
        Array.prototype.forEach.call(parent.children, (node)=>{
            if (elementsToKeep.has(node)) {
                deep(node);
            } else {
                try {
                    if (isIgnoredNode(node)) return;
                    const attr = node.getAttribute(controlAttribute);
                    const alreadyHidden = attr === "true";
                    const counterValue = (counterMap.get(node) || 0) + 1;
                    const markerValue = (markerCounter.get(node) || 0) + 1;
                    counterMap.set(node, counterValue);
                    markerCounter.set(node, markerValue);
                    hiddenNodes.push(node);
                    if (counterValue === 1 && alreadyHidden) {
                        uncontrolledNodes.set(node, true);
                    }
                    if (markerValue === 1) {
                        node.setAttribute(markerName, "");
                    }
                    if (!alreadyHidden) {
                        node.setAttribute(controlAttribute, "true");
                    }
                } catch (e) {
                    console.error("[zag-js > ariaHidden] cannot operate on ", node, e);
                }
            }
        });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return ()=>{
        hiddenNodes.forEach((node)=>{
            const counterValue = counterMap.get(node) - 1;
            const markerValue = markerCounter.get(node) - 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            if (!counterValue) {
                if (!uncontrolledNodes.has(node)) {
                    node.removeAttribute(controlAttribute);
                }
                uncontrolledNodes.delete(node);
            }
            if (!markerValue) {
                node.removeAttribute(markerName);
            }
        });
        lockCount--;
        if (!lockCount) {
            counterMap = /* @__PURE__ */ new WeakMap();
            counterMap = /* @__PURE__ */ new WeakMap();
            uncontrolledNodes = /* @__PURE__ */ new WeakMap();
            markerMap = {};
        }
    };
};
// src/aria-hidden.ts
var getParentNode = (originalTarget)=>{
    const target = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return target.ownerDocument.body;
};
var hideOthers = function(originalTarget) {
    let parentNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getParentNode(originalTarget), markerName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "data-aria-hidden";
    if (!parentNode) return;
    return walkTreeOutside(originalTarget, {
        parentNode,
        markerName,
        controlAttribute: "aria-hidden"
    });
};
// src/index.ts
var raf = (fn)=>{
    const frameId = requestAnimationFrame(()=>fn());
    return ()=>cancelAnimationFrame(frameId);
};
function ariaHidden(targetsOrFn) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { defer = true } = options;
    const func = defer ? raf : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const targets = typeof targetsOrFn === "function" ? targetsOrFn() : targetsOrFn;
        const elements = targets.filter(Boolean);
        if (elements.length === 0) return;
        cleanups.push(hideOthers(elements));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
;
}),
"[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "INIT_STATE",
    ()=>INIT_STATE,
    "MachineStatus",
    ()=>MachineStatus,
    "createGuards",
    ()=>createGuards,
    "createMachine",
    ()=>createMachine,
    "createScope",
    ()=>createScope,
    "memo",
    ()=>memo,
    "mergeProps",
    ()=>mergeProps,
    "setup",
    ()=>setup
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
;
;
// src/merge-props.ts
var clsx = function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    return args.map((str)=>{
        var _str_trim;
        return str === null || str === void 0 ? void 0 : (_str_trim = str.trim) === null || _str_trim === void 0 ? void 0 : _str_trim.call(str);
    }).filter(Boolean).join(" ");
};
var CSS_REGEX = /((?:--)?(?:\w+-?)+)\s*:\s*([^;]*)/g;
var serialize = (style)=>{
    const res = {};
    let match;
    while(match = CSS_REGEX.exec(style)){
        res[match[1]] = match[2];
    }
    return res;
};
var css = (a, b)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(a)) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(b)) return "".concat(a, ";").concat(b);
        a = serialize(a);
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(b)) {
        b = serialize(b);
    }
    return Object.assign({}, a !== null && a !== void 0 ? a : {}, b !== null && b !== void 0 ? b : {});
};
function mergeProps() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    let result = {};
    for (let props of args){
        for(let key in result){
            if (key.startsWith("on") && typeof result[key] === "function" && typeof props[key] === "function") {
                result[key] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callAll"])(props[key], result[key]);
                continue;
            }
            if (key === "className" || key === "class") {
                result[key] = clsx(result[key], props[key]);
                continue;
            }
            if (key === "style") {
                result[key] = css(result[key], props[key]);
                continue;
            }
            result[key] = props[key] !== void 0 ? props[key] : result[key];
        }
        for(let key in props){
            if (result[key] === void 0) {
                result[key] = props[key];
            }
        }
    }
    return result;
}
function memo(getDeps, fn, opts) {
    let deps = [];
    let result;
    return (depArgs)=>{
        var _opts_onChange;
        const newDeps = getDeps(depArgs);
        const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index)=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(deps[index], dep));
        if (!depsChanged) return result;
        deps = newDeps;
        result = fn(...newDeps);
        opts === null || opts === void 0 ? void 0 : (_opts_onChange = opts.onChange) === null || _opts_onChange === void 0 ? void 0 : _opts_onChange.call(opts, result);
        return result;
    };
}
// src/create-machine.ts
function createGuards() {
    return {
        and: function() {
            for(var _len = arguments.length, guards = new Array(_len), _key = 0; _key < _len; _key++){
                guards[_key] = arguments[_key];
            }
            return function andGuard(params) {
                return guards.every((str)=>params.guard(str));
            };
        },
        or: function() {
            for(var _len = arguments.length, guards = new Array(_len), _key = 0; _key < _len; _key++){
                guards[_key] = arguments[_key];
            }
            return function orGuard(params) {
                return guards.some((str)=>params.guard(str));
            };
        },
        not: (guard)=>{
            return function notGuard(params) {
                return !params.guard(guard);
            };
        }
    };
}
function createMachine(config) {
    return config;
}
function setup() {
    return {
        guards: createGuards(),
        createMachine: (config)=>{
            return createMachine(config);
        },
        choose: (transitions)=>{
            return function chooseFn(param) {
                let { choose } = param;
                var _choose;
                return (_choose = choose(transitions)) === null || _choose === void 0 ? void 0 : _choose.actions;
            };
        }
    };
}
// src/types.ts
var MachineStatus = /* @__PURE__ */ ((MachineStatus2)=>{
    MachineStatus2["NotStarted"] = "Not Started";
    MachineStatus2["Started"] = "Started";
    MachineStatus2["Stopped"] = "Stopped";
    return MachineStatus2;
})(MachineStatus || {});
var INIT_STATE = "__init__";
function createScope(props) {
    const getRootNode = ()=>{
        var _props_getRootNode;
        var _props_getRootNode1;
        return (_props_getRootNode1 = (_props_getRootNode = props.getRootNode) === null || _props_getRootNode === void 0 ? void 0 : _props_getRootNode.call(props)) !== null && _props_getRootNode1 !== void 0 ? _props_getRootNode1 : document;
    };
    const getDoc = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(getRootNode());
    const getWin = ()=>{
        var _getDoc_defaultView;
        return (_getDoc_defaultView = getDoc().defaultView) !== null && _getDoc_defaultView !== void 0 ? _getDoc_defaultView : window;
    };
    const getActiveElementFn = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getActiveElement"])(getRootNode());
    const isActiveElement = (elem)=>elem === getActiveElementFn();
    const getById = (id)=>getRootNode().getElementById(id);
    return {
        ...props,
        getRootNode,
        getDoc,
        getWin,
        getActiveElement: getActiveElementFn,
        isActiveElement,
        getById
    };
}
;
}),
"[project]/node_modules/@zag-js/interact-outside/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "trackInteractOutside",
    ()=>trackInteractOutside
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
// src/index.ts
// src/frame-utils.ts
function getWindowFrames(win) {
    const frames = {
        each (cb) {
            var _win_frames;
            for(let i = 0; i < ((_win_frames = win.frames) === null || _win_frames === void 0 ? void 0 : _win_frames.length); i += 1){
                const frame = win.frames[i];
                if (frame) cb(frame);
            }
        },
        addEventListener (event, listener, options) {
            frames.each((frame)=>{
                try {
                    frame.document.addEventListener(event, listener, options);
                } catch (e) {}
            });
            return ()=>{
                try {
                    frames.removeEventListener(event, listener, options);
                } catch (e) {}
            };
        },
        removeEventListener (event, listener, options) {
            frames.each((frame)=>{
                try {
                    frame.document.removeEventListener(event, listener, options);
                } catch (e) {}
            });
        }
    };
    return frames;
}
function getParentWindow(win) {
    const parent = win.frameElement != null ? win.parent : null;
    return {
        addEventListener: (event, listener, options)=>{
            try {
                parent === null || parent === void 0 ? void 0 : parent.addEventListener(event, listener, options);
            } catch (e) {}
            return ()=>{
                try {
                    parent === null || parent === void 0 ? void 0 : parent.removeEventListener(event, listener, options);
                } catch (e) {}
            };
        },
        removeEventListener: (event, listener, options)=>{
            try {
                parent === null || parent === void 0 ? void 0 : parent.removeEventListener(event, listener, options);
            } catch (e) {}
        }
    };
}
// src/index.ts
var POINTER_OUTSIDE_EVENT = "pointerdown.outside";
var FOCUS_OUTSIDE_EVENT = "focus.outside";
function isComposedPathFocusable(composedPath) {
    for (const node of composedPath){
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHTMLElement"])(node) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusable"])(node)) return true;
    }
    return false;
}
var isPointerEvent = (event)=>"clientY" in event;
function isEventPointWithin(node, event) {
    if (!isPointerEvent(event) || !node) return false;
    const rect = node.getBoundingClientRect();
    if (rect.width === 0 || rect.height === 0) return false;
    return rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
}
function isPointInRect(rect, point) {
    return rect.y <= point.y && point.y <= rect.y + rect.height && rect.x <= point.x && point.x <= rect.x + rect.width;
}
function isEventWithinScrollbar(event, ancestor) {
    if (!ancestor || !isPointerEvent(event)) return false;
    const isScrollableY = ancestor.scrollHeight > ancestor.clientHeight;
    const onScrollbarY = isScrollableY && event.clientX > ancestor.offsetLeft + ancestor.clientWidth;
    const isScrollableX = ancestor.scrollWidth > ancestor.clientWidth;
    const onScrollbarX = isScrollableX && event.clientY > ancestor.offsetTop + ancestor.clientHeight;
    const rect = {
        x: ancestor.offsetLeft,
        y: ancestor.offsetTop,
        width: ancestor.clientWidth + (isScrollableY ? 16 : 0),
        height: ancestor.clientHeight + (isScrollableX ? 16 : 0)
    };
    const point = {
        x: event.clientX,
        y: event.clientY
    };
    if (!isPointInRect(rect, point)) return false;
    return onScrollbarY || onScrollbarX;
}
function trackInteractOutsideImpl(node, options) {
    const { exclude, onFocusOutside, onPointerDownOutside, onInteractOutside, defer } = options;
    if (!node) return;
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(node);
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(node);
    const frames = getWindowFrames(win);
    const parentWin = getParentWindow(win);
    function isEventOutside(event, target) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHTMLElement"])(target)) return false;
        if (!target.isConnected) return false;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(node, target)) return false;
        if (isEventPointWithin(node, event)) return false;
        const triggerEl = doc.querySelector('[aria-controls="'.concat(node.id, '"]'));
        if (triggerEl) {
            const triggerAncestor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNearestOverflowAncestor"])(triggerEl);
            if (isEventWithinScrollbar(event, triggerAncestor)) return false;
        }
        const nodeAncestor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNearestOverflowAncestor"])(node);
        if (isEventWithinScrollbar(event, nodeAncestor)) return false;
        return !(exclude === null || exclude === void 0 ? void 0 : exclude(target));
    }
    const pointerdownCleanups = /* @__PURE__ */ new Set();
    const isInShadowRoot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isShadowRoot"])(node === null || node === void 0 ? void 0 : node.getRootNode());
    function onPointerDown(event) {
        function handler(clickEvent) {
            var _evt_composedPath;
            const func = defer && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTouchDevice"])() ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"] : (v)=>v();
            const evt = clickEvent !== null && clickEvent !== void 0 ? clickEvent : event;
            var _evt_composedPath1;
            const composedPath = (_evt_composedPath1 = evt === null || evt === void 0 ? void 0 : (_evt_composedPath = evt.composedPath) === null || _evt_composedPath === void 0 ? void 0 : _evt_composedPath.call(evt)) !== null && _evt_composedPath1 !== void 0 ? _evt_composedPath1 : [
                evt === null || evt === void 0 ? void 0 : evt.target
            ];
            func(()=>{
                const target = isInShadowRoot ? composedPath[0] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                if (!node || !isEventOutside(event, target)) return;
                if (onPointerDownOutside || onInteractOutside) {
                    const handler2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callAll"])(onPointerDownOutside, onInteractOutside);
                    node.addEventListener(POINTER_OUTSIDE_EVENT, handler2, {
                        once: true
                    });
                }
                fireCustomEvent(node, POINTER_OUTSIDE_EVENT, {
                    bubbles: false,
                    cancelable: true,
                    detail: {
                        originalEvent: evt,
                        contextmenu: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isContextMenuEvent"])(evt),
                        focusable: isComposedPathFocusable(composedPath),
                        target
                    }
                });
            });
        }
        if (event.pointerType === "touch") {
            pointerdownCleanups.forEach((fn)=>fn());
            pointerdownCleanups.add((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "click", handler, {
                once: true
            }));
            pointerdownCleanups.add(parentWin.addEventListener("click", handler, {
                once: true
            }));
            pointerdownCleanups.add(frames.addEventListener("click", handler, {
                once: true
            }));
        } else {
            handler();
        }
    }
    const cleanups = /* @__PURE__ */ new Set();
    const timer = setTimeout(()=>{
        cleanups.add((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "pointerdown", onPointerDown, true));
        cleanups.add(parentWin.addEventListener("pointerdown", onPointerDown, true));
        cleanups.add(frames.addEventListener("pointerdown", onPointerDown, true));
    }, 0);
    function onFocusin(event) {
        const func = defer ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"] : (v)=>v();
        func(()=>{
            const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
            if (!node || !isEventOutside(event, target)) return;
            if (onFocusOutside || onInteractOutside) {
                const handler = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callAll"])(onFocusOutside, onInteractOutside);
                node.addEventListener(FOCUS_OUTSIDE_EVENT, handler, {
                    once: true
                });
            }
            fireCustomEvent(node, FOCUS_OUTSIDE_EVENT, {
                bubbles: false,
                cancelable: true,
                detail: {
                    originalEvent: event,
                    contextmenu: false,
                    focusable: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusable"])(target),
                    target
                }
            });
        });
    }
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTouchDevice"])()) {
        cleanups.add((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "focusin", onFocusin, true));
        cleanups.add(parentWin.addEventListener("focusin", onFocusin, true));
        cleanups.add(frames.addEventListener("focusin", onFocusin, true));
    }
    return ()=>{
        clearTimeout(timer);
        pointerdownCleanups.forEach((fn)=>fn());
        cleanups.forEach((fn)=>fn());
    };
}
function trackInteractOutside(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"] : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const node = typeof nodeOrFn === "function" ? nodeOrFn() : nodeOrFn;
        cleanups.push(trackInteractOutsideImpl(node, options));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
function fireCustomEvent(el, type, init) {
    const win = el.ownerDocument.defaultView || window;
    const event = new win.CustomEvent(type, init);
    return el.dispatchEvent(event);
}
;
}),
"[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "trackDismissableBranch",
    ()=>trackDismissableBranch,
    "trackDismissableElement",
    ()=>trackDismissableElement
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$interact$2d$outside$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/interact-outside/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
// src/dismissable-layer.ts
function trackEscapeKeydown(node, fn) {
    const handleKeyDown = (event)=>{
        if (event.key !== "Escape") return;
        if (event.isComposing) return;
        fn === null || fn === void 0 ? void 0 : fn(event);
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(node), "keydown", handleKeyDown, {
        capture: true
    });
}
var LAYER_REQUEST_DISMISS_EVENT = "layer:request-dismiss";
var layerStack = {
    layers: [],
    branches: [],
    count () {
        return this.layers.length;
    },
    pointerBlockingLayers () {
        return this.layers.filter((layer)=>layer.pointerBlocking);
    },
    topMostPointerBlockingLayer () {
        return [
            ...this.pointerBlockingLayers()
        ].slice(-1)[0];
    },
    hasPointerBlockingLayer () {
        return this.pointerBlockingLayers().length > 0;
    },
    isBelowPointerBlockingLayer (node) {
        var _this_topMostPointerBlockingLayer;
        const index = this.indexOf(node);
        const highestBlockingIndex = this.topMostPointerBlockingLayer() ? this.indexOf((_this_topMostPointerBlockingLayer = this.topMostPointerBlockingLayer()) === null || _this_topMostPointerBlockingLayer === void 0 ? void 0 : _this_topMostPointerBlockingLayer.node) : -1;
        return index < highestBlockingIndex;
    },
    isTopMost (node) {
        const layer = this.layers[this.count() - 1];
        return (layer === null || layer === void 0 ? void 0 : layer.node) === node;
    },
    getNestedLayers (node) {
        return Array.from(this.layers).slice(this.indexOf(node) + 1);
    },
    isInNestedLayer (node, target) {
        return this.getNestedLayers(node).some((layer)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(layer.node, target));
    },
    isInBranch (target) {
        return Array.from(this.branches).some((branch)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(branch, target));
    },
    add (layer) {
        this.layers.push(layer);
        this.syncLayerIndex();
    },
    addBranch (node) {
        this.branches.push(node);
    },
    remove (node) {
        const index = this.indexOf(node);
        if (index < 0) return;
        if (index < this.count() - 1) {
            const _layers = this.getNestedLayers(node);
            _layers.forEach((layer)=>layerStack.dismiss(layer.node, node));
        }
        this.layers.splice(index, 1);
        this.syncLayerIndex();
    },
    removeBranch (node) {
        const index = this.branches.indexOf(node);
        if (index >= 0) this.branches.splice(index, 1);
    },
    syncLayerIndex () {
        this.layers.forEach((layer, index)=>{
            layer.node.style.setProperty("--layer-index", "".concat(index));
        });
    },
    indexOf (node) {
        return this.layers.findIndex((layer)=>layer.node === node);
    },
    dismiss (node, parent) {
        const index = this.indexOf(node);
        if (index === -1) return;
        const layer = this.layers[index];
        addListenerOnce(node, LAYER_REQUEST_DISMISS_EVENT, (event)=>{
            var _layer_requestDismiss;
            (_layer_requestDismiss = layer.requestDismiss) === null || _layer_requestDismiss === void 0 ? void 0 : _layer_requestDismiss.call(layer, event);
            if (!event.defaultPrevented) {
                layer === null || layer === void 0 ? void 0 : layer.dismiss();
            }
        });
        fireCustomEvent(node, LAYER_REQUEST_DISMISS_EVENT, {
            originalLayer: node,
            targetLayer: parent,
            originalIndex: index,
            targetIndex: parent ? this.indexOf(parent) : -1
        });
        this.syncLayerIndex();
    },
    clear () {
        this.remove(this.layers[0].node);
    }
};
function fireCustomEvent(el, type, detail) {
    const win = el.ownerDocument.defaultView || window;
    const event = new win.CustomEvent(type, {
        cancelable: true,
        bubbles: true,
        detail
    });
    return el.dispatchEvent(event);
}
function addListenerOnce(el, type, callback) {
    el.addEventListener(type, callback, {
        once: true
    });
}
var originalBodyPointerEvents;
function assignPointerEventToLayers() {
    layerStack.layers.forEach((param)=>{
        let { node } = param;
        node.style.pointerEvents = layerStack.isBelowPointerBlockingLayer(node) ? "none" : "auto";
    });
}
function clearPointerEvent(node) {
    node.style.pointerEvents = "";
}
function disablePointerEventsOutside(node, persistentElements) {
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(node);
    const cleanups = [];
    if (layerStack.hasPointerBlockingLayer() && !doc.body.hasAttribute("data-inert")) {
        originalBodyPointerEvents = document.body.style.pointerEvents;
        queueMicrotask(()=>{
            doc.body.style.pointerEvents = "none";
            doc.body.setAttribute("data-inert", "");
        });
    }
    persistentElements === null || persistentElements === void 0 ? void 0 : persistentElements.forEach((el)=>{
        const [promise, abort] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["waitForElement"])(()=>{
            const node2 = el();
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHTMLElement"])(node2) ? node2 : null;
        }, {
            timeout: 1e3
        });
        promise.then((el2)=>cleanups.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setStyle"])(el2, {
                pointerEvents: "auto"
            })));
        cleanups.push(abort);
    });
    return ()=>{
        if (layerStack.hasPointerBlockingLayer()) return;
        queueMicrotask(()=>{
            doc.body.style.pointerEvents = originalBodyPointerEvents;
            doc.body.removeAttribute("data-inert");
            if (doc.body.style.length === 0) doc.body.removeAttribute("style");
        });
        cleanups.forEach((fn)=>fn());
    };
}
// src/dismissable-layer.ts
function trackDismissableElementImpl(node, options) {
    const { warnOnMissingNode = true } = options;
    if (warnOnMissingNode && !node) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warn"])("[@zag-js/dismissable] node is `null` or `undefined`");
        return;
    }
    if (!node) {
        return;
    }
    const { onDismiss, onRequestDismiss, pointerBlocking, exclude: excludeContainers, debug } = options;
    const layer = {
        dismiss: onDismiss,
        node,
        pointerBlocking,
        requestDismiss: onRequestDismiss
    };
    layerStack.add(layer);
    assignPointerEventToLayers();
    function onPointerDownOutside(event) {
        var _options_onPointerDownOutside, _options_onInteractOutside;
        const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event.detail.originalEvent);
        if (layerStack.isBelowPointerBlockingLayer(node) || layerStack.isInBranch(target)) return;
        (_options_onPointerDownOutside = options.onPointerDownOutside) === null || _options_onPointerDownOutside === void 0 ? void 0 : _options_onPointerDownOutside.call(options, event);
        (_options_onInteractOutside = options.onInteractOutside) === null || _options_onInteractOutside === void 0 ? void 0 : _options_onInteractOutside.call(options, event);
        if (event.defaultPrevented) return;
        if (debug) {
            console.log("onPointerDownOutside:", event.detail.originalEvent);
        }
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
    }
    function onFocusOutside(event) {
        var _options_onFocusOutside, _options_onInteractOutside;
        const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event.detail.originalEvent);
        if (layerStack.isInBranch(target)) return;
        (_options_onFocusOutside = options.onFocusOutside) === null || _options_onFocusOutside === void 0 ? void 0 : _options_onFocusOutside.call(options, event);
        (_options_onInteractOutside = options.onInteractOutside) === null || _options_onInteractOutside === void 0 ? void 0 : _options_onInteractOutside.call(options, event);
        if (event.defaultPrevented) return;
        if (debug) {
            console.log("onFocusOutside:", event.detail.originalEvent);
        }
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
    }
    function onEscapeKeyDown(event) {
        var _options_onEscapeKeyDown;
        if (!layerStack.isTopMost(node)) return;
        (_options_onEscapeKeyDown = options.onEscapeKeyDown) === null || _options_onEscapeKeyDown === void 0 ? void 0 : _options_onEscapeKeyDown.call(options, event);
        if (!event.defaultPrevented && onDismiss) {
            event.preventDefault();
            onDismiss();
        }
    }
    function exclude(target) {
        var _options_persistentElements;
        if (!node) return false;
        const containers = typeof excludeContainers === "function" ? excludeContainers() : excludeContainers;
        const _containers = Array.isArray(containers) ? containers : [
            containers
        ];
        const persistentElements = (_options_persistentElements = options.persistentElements) === null || _options_persistentElements === void 0 ? void 0 : _options_persistentElements.map((fn)=>fn()).filter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHTMLElement"]);
        if (persistentElements) _containers.push(...persistentElements);
        return _containers.some((node2)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(node2, target)) || layerStack.isInNestedLayer(node, target);
    }
    const cleanups = [
        pointerBlocking ? disablePointerEventsOutside(node, options.persistentElements) : void 0,
        trackEscapeKeydown(node, onEscapeKeyDown),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$interact$2d$outside$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackInteractOutside"])(node, {
            exclude,
            onFocusOutside,
            onPointerDownOutside,
            defer: options.defer
        })
    ];
    return ()=>{
        layerStack.remove(node);
        assignPointerEventToLayers();
        clearPointerEvent(node);
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
function trackDismissableElement(nodeOrFn, options) {
    const { defer } = options;
    const func = defer ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"] : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(nodeOrFn) ? nodeOrFn() : nodeOrFn;
        cleanups.push(trackDismissableElementImpl(node, options));
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
function trackDismissableBranch(nodeOrFn) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { defer } = options;
    const func = defer ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"] : (v)=>v();
    const cleanups = [];
    cleanups.push(func(()=>{
        const node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(nodeOrFn) ? nodeOrFn() : nodeOrFn;
        if (!node) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warn"])("[@zag-js/dismissable] branch node is `null` or `undefined`");
            return;
        }
        layerStack.addBranch(node);
        cleanups.push(()=>{
            layerStack.removeBranch(node);
        });
    }));
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
    };
}
;
}),
"[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/prop-types.ts
__turbopack_context__.s([
    "createNormalizer",
    ()=>createNormalizer,
    "createProps",
    ()=>createProps
]);
function createNormalizer(fn) {
    return new Proxy({}, {
        get (_target, key) {
            if (key === "style") return (props)=>{
                return fn({
                    style: props
                }).style;
            };
            return fn;
        }
    });
}
// src/create-props.ts
var createProps = ()=>(props)=>Array.from(new Set(props));
;
}),
"[project]/node_modules/@zag-js/combobox/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "collection",
    ()=>collection,
    "connect",
    ()=>connect,
    "itemGroupLabelProps",
    ()=>itemGroupLabelProps,
    "itemGroupProps",
    ()=>itemGroupProps,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitItemGroupLabelProps",
    ()=>splitItemGroupLabelProps,
    "splitItemGroupProps",
    ()=>splitItemGroupProps,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/collection/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$aria$2d$hidden$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/aria-hidden/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
// src/combobox.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("combobox").parts("root", "clearTrigger", "content", "control", "input", "item", "itemGroup", "itemGroupLabel", "itemIndicator", "itemText", "label", "list", "positioner", "trigger");
var parts = anatomy.build();
var collection = (options)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListCollection"](options);
};
collection.empty = ()=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListCollection"]({
        items: []
    });
};
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "combobox:".concat(ctx.id);
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "combobox:".concat(ctx.id, ":label");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "combobox:".concat(ctx.id, ":control");
};
var getInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_input;
    return (_ctx_ids_input = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.input) !== null && _ctx_ids_input !== void 0 ? _ctx_ids_input : "combobox:".concat(ctx.id, ":input");
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "combobox:".concat(ctx.id, ":content");
};
var getPositionerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_positioner;
    return (_ctx_ids_positioner = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.positioner) !== null && _ctx_ids_positioner !== void 0 ? _ctx_ids_positioner : "combobox:".concat(ctx.id, ":popper");
};
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "combobox:".concat(ctx.id, ":toggle-btn");
};
var getClearTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_clearTrigger;
    return (_ctx_ids_clearTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.clearTrigger) !== null && _ctx_ids_clearTrigger !== void 0 ? _ctx_ids_clearTrigger : "combobox:".concat(ctx.id, ":clear-btn");
};
var getItemGroupId = (ctx, id)=>{
    var _ctx_ids_itemGroup, _ctx_ids;
    var _ctx_ids_itemGroup1;
    return (_ctx_ids_itemGroup1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemGroup = _ctx_ids.itemGroup) === null || _ctx_ids_itemGroup === void 0 ? void 0 : _ctx_ids_itemGroup.call(_ctx_ids, id)) !== null && _ctx_ids_itemGroup1 !== void 0 ? _ctx_ids_itemGroup1 : "combobox:".concat(ctx.id, ":optgroup:").concat(id);
};
var getItemGroupLabelId = (ctx, id)=>{
    var _ctx_ids_itemGroupLabel, _ctx_ids;
    var _ctx_ids_itemGroupLabel1;
    return (_ctx_ids_itemGroupLabel1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemGroupLabel = _ctx_ids.itemGroupLabel) === null || _ctx_ids_itemGroupLabel === void 0 ? void 0 : _ctx_ids_itemGroupLabel.call(_ctx_ids, id)) !== null && _ctx_ids_itemGroupLabel1 !== void 0 ? _ctx_ids_itemGroupLabel1 : "combobox:".concat(ctx.id, ":optgroup-label:").concat(id);
};
var getItemId = (ctx, id)=>{
    var _ctx_ids_item, _ctx_ids;
    var _ctx_ids_item1;
    return (_ctx_ids_item1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_item = _ctx_ids.item) === null || _ctx_ids_item === void 0 ? void 0 : _ctx_ids_item.call(_ctx_ids, id)) !== null && _ctx_ids_item1 !== void 0 ? _ctx_ids_item1 : "combobox:".concat(ctx.id, ":option:").concat(id);
};
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
var getInputEl = (ctx)=>ctx.getById(getInputId(ctx));
var getPositionerEl = (ctx)=>ctx.getById(getPositionerId(ctx));
var getControlEl = (ctx)=>ctx.getById(getControlId(ctx));
var getTriggerEl = (ctx)=>ctx.getById(getTriggerId(ctx));
var getClearTriggerEl = (ctx)=>ctx.getById(getClearTriggerId(ctx));
var getItemEl = (ctx, value)=>{
    if (value == null) return null;
    const selector = '[role=option][data-value="'.concat(CSS.escape(value), '"]');
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["query"])(getContentEl(ctx), selector);
};
var focusInputEl = (ctx)=>{
    const inputEl = getInputEl(ctx);
    if (ctx.isActiveElement(inputEl)) return;
    inputEl === null || inputEl === void 0 ? void 0 : inputEl.focus({
        preventScroll: true
    });
};
var focusTriggerEl = (ctx)=>{
    const triggerEl = getTriggerEl(ctx);
    if (ctx.isActiveElement(triggerEl)) return;
    triggerEl === null || triggerEl === void 0 ? void 0 : triggerEl.focus({
        preventScroll: true
    });
};
// src/combobox.connect.ts
function connect(service, normalize) {
    const { context, prop, state, send, scope, computed, event } = service;
    const translations = prop("translations");
    const collection2 = prop("collection");
    const disabled = prop("disabled");
    const interactive = computed("isInteractive");
    const invalid = prop("invalid");
    const readOnly = prop("readOnly");
    const open = state.hasTag("open");
    const focused = state.hasTag("focused");
    const composite = prop("composite");
    const highlightedValue = context.get("highlightedValue");
    const popperStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementStyles"])({
        ...prop("positioning"),
        placement: context.get("currentPlacement")
    });
    function getItemState(props2) {
        const disabled2 = collection2.getItemDisabled(props2.item);
        const value = collection2.getItemValue(props2.item);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ensure"])(value, ()=>"[zag-js] No value found for item ".concat(JSON.stringify(props2.item)));
        return {
            value,
            disabled: Boolean(disabled2 || disabled2),
            highlighted: highlightedValue === value,
            selected: context.get("value").includes(value)
        };
    }
    return {
        focused,
        open,
        inputValue: context.get("inputValue"),
        highlightedValue,
        highlightedItem: context.get("highlightedItem"),
        value: context.get("value"),
        valueAsString: computed("valueAsString"),
        hasSelectedItems: computed("hasSelectedItems"),
        selectedItems: context.get("selectedItems"),
        collection: prop("collection"),
        multiple: !!prop("multiple"),
        disabled: !!disabled,
        syncSelectedItems () {
            send({
                type: "SELECTED_ITEMS.SYNC"
            });
        },
        reposition () {
            let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            send({
                type: "POSITIONING.SET",
                options
            });
        },
        setHighlightValue (value) {
            send({
                type: "HIGHLIGHTED_VALUE.SET",
                value
            });
        },
        clearHighlightValue () {
            send({
                type: "HIGHLIGHTED_VALUE.CLEAR"
            });
        },
        selectValue (value) {
            send({
                type: "ITEM.SELECT",
                value
            });
        },
        setValue (value) {
            send({
                type: "VALUE.SET",
                value
            });
        },
        setInputValue (value) {
            let reason = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "script";
            send({
                type: "INPUT_VALUE.SET",
                value,
                src: reason
            });
        },
        clearValue (value) {
            if (value != null) {
                send({
                    type: "ITEM.CLEAR",
                    value
                });
            } else {
                send({
                    type: "VALUE.CLEAR"
                });
            }
        },
        focus () {
            var _getInputEl;
            (_getInputEl = getInputEl(scope)) === null || _getInputEl === void 0 ? void 0 : _getInputEl.focus();
        },
        setOpen (nextOpen) {
            let reason = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "script";
            const open2 = state.hasTag("open");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "OPEN" : "CLOSE",
                src: reason
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly)
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                dir: prop("dir"),
                htmlFor: getInputId(scope),
                id: getLabelId(scope),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                onClick (event2) {
                    var _getTriggerEl;
                    if (composite) return;
                    event2.preventDefault();
                    (_getTriggerEl = getTriggerEl(scope)) === null || _getTriggerEl === void 0 ? void 0 : _getTriggerEl.focus({
                        preventScroll: true
                    });
                }
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                dir: prop("dir"),
                id: getControlId(scope),
                "data-state": open ? "open" : "closed",
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid)
            });
        },
        getPositionerProps () {
            return normalize.element({
                ...parts.positioner.attrs,
                dir: prop("dir"),
                id: getPositionerId(scope),
                style: popperStyles.floating
            });
        },
        getInputProps () {
            return normalize.input({
                ...parts.input.attrs,
                dir: prop("dir"),
                "aria-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(invalid),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-autofocus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("autoFocus")),
                name: prop("name"),
                form: prop("form"),
                disabled,
                required: prop("required"),
                autoComplete: "off",
                autoCorrect: "off",
                autoCapitalize: "none",
                spellCheck: "false",
                readOnly,
                placeholder: prop("placeholder"),
                id: getInputId(scope),
                type: "text",
                role: "combobox",
                defaultValue: context.get("inputValue"),
                "aria-autocomplete": computed("autoComplete") ? "both" : "list",
                "aria-controls": getContentId(scope),
                "aria-expanded": open,
                "data-state": open ? "open" : "closed",
                "aria-activedescendant": highlightedValue ? getItemId(scope, highlightedValue) : void 0,
                onClick (event2) {
                    if (event2.defaultPrevented) return;
                    if (!prop("openOnClick")) return;
                    if (!interactive) return;
                    send({
                        type: "INPUT.CLICK",
                        src: "input-click"
                    });
                },
                onFocus () {
                    if (disabled) return;
                    send({
                        type: "INPUT.FOCUS"
                    });
                },
                onBlur () {
                    if (disabled) return;
                    send({
                        type: "INPUT.BLUR"
                    });
                },
                onChange (event2) {
                    send({
                        type: "INPUT.CHANGE",
                        value: event2.currentTarget.value,
                        src: "input-change"
                    });
                },
                onKeyDown (event2) {
                    if (event2.defaultPrevented) return;
                    if (!interactive) return;
                    if (event2.ctrlKey || event2.shiftKey || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event2)) return;
                    const openOnKeyPress = prop("openOnKeyPress");
                    const isModifierKey = event2.ctrlKey || event2.metaKey || event2.shiftKey;
                    const keypress = true;
                    const keymap = {
                        ArrowDown (event3) {
                            if (!openOnKeyPress && !open) return;
                            send({
                                type: event3.altKey ? "OPEN" : "INPUT.ARROW_DOWN",
                                keypress,
                                src: "arrow-key"
                            });
                            event3.preventDefault();
                        },
                        ArrowUp () {
                            if (!openOnKeyPress && !open) return;
                            send({
                                type: event2.altKey ? "CLOSE" : "INPUT.ARROW_UP",
                                keypress,
                                src: "arrow-key"
                            });
                            event2.preventDefault();
                        },
                        Home (event3) {
                            if (isModifierKey) return;
                            send({
                                type: "INPUT.HOME",
                                keypress
                            });
                            if (open) {
                                event3.preventDefault();
                            }
                        },
                        End (event3) {
                            if (isModifierKey) return;
                            send({
                                type: "INPUT.END",
                                keypress
                            });
                            if (open) {
                                event3.preventDefault();
                            }
                        },
                        Enter (event3) {
                            send({
                                type: "INPUT.ENTER",
                                keypress,
                                src: "item-select"
                            });
                            const submittable = computed("isCustomValue") && prop("allowCustomValue");
                            if (open && !submittable) {
                                event3.preventDefault();
                            }
                            if (highlightedValue == null) return;
                            const itemEl = getItemEl(scope, highlightedValue);
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAnchorElement"])(itemEl)) {
                                var _prop;
                                (_prop = prop("navigate")) === null || _prop === void 0 ? void 0 : _prop({
                                    value: highlightedValue,
                                    node: itemEl,
                                    href: itemEl.href
                                });
                            }
                        },
                        Escape () {
                            send({
                                type: "INPUT.ESCAPE",
                                keypress,
                                src: "escape-key"
                            });
                            event2.preventDefault();
                        }
                    };
                    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event2, {
                        dir: prop("dir")
                    });
                    const exec = keymap[key];
                    exec === null || exec === void 0 ? void 0 : exec(event2);
                }
            });
        },
        getTriggerProps () {
            let props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            return normalize.button({
                ...parts.trigger.attrs,
                dir: prop("dir"),
                id: getTriggerId(scope),
                "aria-haspopup": composite ? "listbox" : "dialog",
                type: "button",
                tabIndex: props2.focusable ? void 0 : -1,
                "aria-label": translations.triggerLabel,
                "aria-expanded": open,
                "data-state": open ? "open" : "closed",
                "aria-controls": open ? getContentId(scope) : void 0,
                disabled,
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-focusable": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(props2.focusable),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                onFocus () {
                    if (!props2.focusable) return;
                    send({
                        type: "INPUT.FOCUS",
                        src: "trigger"
                    });
                },
                onClick (event2) {
                    if (event2.defaultPrevented) return;
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event2)) return;
                    send({
                        type: "TRIGGER.CLICK",
                        src: "trigger-click"
                    });
                },
                onPointerDown (event2) {
                    if (!interactive) return;
                    if (event2.pointerType === "touch") return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event2)) return;
                    event2.preventDefault();
                    queueMicrotask(()=>{
                        var _getInputEl;
                        (_getInputEl = getInputEl(scope)) === null || _getInputEl === void 0 ? void 0 : _getInputEl.focus({
                            preventScroll: true
                        });
                    });
                },
                onKeyDown (event2) {
                    if (event2.defaultPrevented) return;
                    if (composite) return;
                    const keyMap = {
                        ArrowDown () {
                            send({
                                type: "INPUT.ARROW_DOWN",
                                src: "arrow-key"
                            });
                        },
                        ArrowUp () {
                            send({
                                type: "INPUT.ARROW_UP",
                                src: "arrow-key"
                            });
                        }
                    };
                    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event2, {
                        dir: prop("dir")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        exec(event2);
                        event2.preventDefault();
                    }
                }
            });
        },
        getContentProps () {
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: getContentId(scope),
                role: !composite ? "dialog" : "listbox",
                tabIndex: -1,
                hidden: !open,
                "data-state": open ? "open" : "closed",
                "data-placement": context.get("currentPlacement"),
                "aria-labelledby": getLabelId(scope),
                "aria-multiselectable": prop("multiple") && composite ? true : void 0,
                "data-empty": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(collection2.size === 0),
                onPointerDown (event2) {
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event2)) return;
                    event2.preventDefault();
                }
            });
        },
        getListProps () {
            return normalize.element({
                ...parts.list.attrs,
                role: !composite ? "listbox" : void 0,
                "data-empty": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(collection2.size === 0),
                "aria-labelledby": getLabelId(scope),
                "aria-multiselectable": prop("multiple") && !composite ? true : void 0
            });
        },
        getClearTriggerProps () {
            return normalize.button({
                ...parts.clearTrigger.attrs,
                dir: prop("dir"),
                id: getClearTriggerId(scope),
                type: "button",
                tabIndex: -1,
                disabled,
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "aria-label": translations.clearTriggerLabel,
                "aria-controls": getInputId(scope),
                hidden: !context.get("value").length,
                onPointerDown (event2) {
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event2)) return;
                    event2.preventDefault();
                },
                onClick (event2) {
                    if (event2.defaultPrevented) return;
                    if (!interactive) return;
                    send({
                        type: "VALUE.CLEAR",
                        src: "clear-trigger"
                    });
                }
            });
        },
        getItemState,
        getItemProps (props2) {
            const itemState = getItemState(props2);
            const value = itemState.value;
            return normalize.element({
                ...parts.item.attrs,
                dir: prop("dir"),
                id: getItemId(scope, value),
                role: "option",
                tabIndex: -1,
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted),
                "data-state": itemState.selected ? "checked" : "unchecked",
                "aria-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(itemState.highlighted),
                "aria-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(itemState.disabled),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-value": itemState.value,
                onPointerMove () {
                    if (itemState.disabled) return;
                    if (itemState.highlighted) return;
                    send({
                        type: "ITEM.POINTER_MOVE",
                        value
                    });
                },
                onPointerLeave () {
                    if (props2.persistFocus) return;
                    if (itemState.disabled) return;
                    const prev = event.previous();
                    const mouseMoved = prev === null || prev === void 0 ? void 0 : prev.type.includes("POINTER");
                    if (!mouseMoved) return;
                    send({
                        type: "ITEM.POINTER_LEAVE",
                        value
                    });
                },
                onClick (event2) {
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDownloadingEvent"])(event2)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOpeningInNewTab"])(event2)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isContextMenuEvent"])(event2)) return;
                    if (itemState.disabled) return;
                    send({
                        type: "ITEM.CLICK",
                        src: "item-select",
                        value
                    });
                }
            });
        },
        getItemTextProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.itemText.attrs,
                dir: prop("dir"),
                "data-state": itemState.selected ? "checked" : "unchecked",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted)
            });
        },
        getItemIndicatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                "aria-hidden": true,
                ...parts.itemIndicator.attrs,
                dir: prop("dir"),
                "data-state": itemState.selected ? "checked" : "unchecked",
                hidden: !itemState.selected
            });
        },
        getItemGroupProps (props2) {
            const { id } = props2;
            return normalize.element({
                ...parts.itemGroup.attrs,
                dir: prop("dir"),
                id: getItemGroupId(scope, id),
                "aria-labelledby": getItemGroupLabelId(scope, id),
                "data-empty": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(collection2.size === 0),
                role: "group"
            });
        },
        getItemGroupLabelProps (props2) {
            const { htmlFor } = props2;
            return normalize.element({
                ...parts.itemGroupLabel.attrs,
                dir: prop("dir"),
                id: getItemGroupLabelId(scope, htmlFor),
                role: "presentation"
            });
        }
    };
}
var { guards, createMachine, choose } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setup"])();
var { and, not } = guards;
var machine = createMachine({
    props (param) {
        let { props: props2 } = param;
        return {
            loopFocus: true,
            openOnClick: false,
            defaultValue: [],
            closeOnSelect: !props2.multiple,
            allowCustomValue: false,
            inputBehavior: "none",
            selectionBehavior: props2.multiple ? "clear" : "replace",
            openOnKeyPress: true,
            openOnChange: true,
            composite: true,
            navigate (param) {
                let { node } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clickIfLink"])(node);
            },
            collection: collection.empty(),
            ...props2,
            positioning: {
                placement: "bottom",
                sameWidth: true,
                ...props2.positioning
            },
            translations: {
                triggerLabel: "Toggle suggestions",
                clearTriggerLabel: "Clear value",
                ...props2.translations
            }
        };
    },
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "suggesting" : "idle";
    },
    context (param) {
        let { prop, bindable, getContext, getEvent } = param;
        return {
            currentPlacement: bindable(()=>({
                    defaultValue: void 0
                })),
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    isEqual: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"],
                    hash (value) {
                        return value.join(",");
                    },
                    onChange (value) {
                        var _prop;
                        const context = getContext();
                        const prevSelectedItems = context.get("selectedItems");
                        const collection2 = prop("collection");
                        const nextItems = value.map((v)=>{
                            const item = prevSelectedItems.find((item2)=>collection2.getItemValue(item2) === v);
                            return item || collection2.find(v);
                        });
                        context.set("selectedItems", nextItems);
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value,
                            items: nextItems
                        });
                    }
                })),
            highlightedValue: bindable(()=>({
                    defaultValue: prop("defaultHighlightedValue") || null,
                    value: prop("highlightedValue"),
                    onChange (value) {
                        var _prop;
                        const item = prop("collection").find(value);
                        (_prop = prop("onHighlightChange")) === null || _prop === void 0 ? void 0 : _prop({
                            highlightedValue: value,
                            highlightedItem: item
                        });
                    }
                })),
            inputValue: bindable(()=>{
                let inputValue = prop("inputValue") || prop("defaultInputValue") || "";
                const value = prop("defaultValue") || prop("value") || [];
                if (!inputValue.trim() && !prop("multiple")) {
                    const valueAsString = prop("collection").stringifyMany(value);
                    inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(prop("selectionBehavior"), {
                        preserve: inputValue || valueAsString,
                        replace: valueAsString,
                        clear: ""
                    });
                }
                return {
                    defaultValue: inputValue,
                    value: prop("inputValue"),
                    onChange (value2) {
                        var _prop;
                        const event = getEvent();
                        const reason = (event.previousEvent || event).src;
                        (_prop = prop("onInputValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            inputValue: value2,
                            reason
                        });
                    }
                };
            }),
            highlightedItem: bindable(()=>{
                const highlightedValue = prop("highlightedValue");
                const highlightedItem = prop("collection").find(highlightedValue);
                return {
                    defaultValue: highlightedItem
                };
            }),
            selectedItems: bindable(()=>{
                const value = prop("value") || prop("defaultValue") || [];
                const selectedItems = prop("collection").findMany(value);
                return {
                    defaultValue: selectedItems
                };
            })
        };
    },
    computed: {
        isInputValueEmpty: (param)=>{
            let { context } = param;
            return context.get("inputValue").length === 0;
        },
        isInteractive: (param)=>{
            let { prop } = param;
            return !(prop("readOnly") || prop("disabled"));
        },
        autoComplete: (param)=>{
            let { prop } = param;
            return prop("inputBehavior") === "autocomplete";
        },
        autoHighlight: (param)=>{
            let { prop } = param;
            return prop("inputBehavior") === "autohighlight";
        },
        hasSelectedItems: (param)=>{
            let { context } = param;
            return context.get("value").length > 0;
        },
        valueAsString: (param)=>{
            let { context, prop } = param;
            return prop("collection").stringifyItems(context.get("selectedItems"));
        },
        isCustomValue: (param)=>{
            let { context, computed } = param;
            return context.get("inputValue") !== computed("valueAsString");
        }
    },
    watch (param) {
        let { context, prop, track, action, send } = param;
        track([
            ()=>context.hash("value")
        ], ()=>{
            action([
                "syncSelectedItems"
            ]);
        });
        track([
            ()=>context.get("inputValue")
        ], ()=>{
            action([
                "syncInputValue"
            ]);
        });
        track([
            ()=>context.get("highlightedValue")
        ], ()=>{
            action([
                "syncHighlightedItem",
                "autofillInputValue"
            ]);
        });
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
        track([
            ()=>prop("collection").toString()
        ], ()=>{
            send({
                type: "CHILDREN_CHANGE"
            });
        });
    },
    on: {
        "SELECTED_ITEMS.SYNC": {
            actions: [
                "syncSelectedItems"
            ]
        },
        "HIGHLIGHTED_VALUE.SET": {
            actions: [
                "setHighlightedValue"
            ]
        },
        "HIGHLIGHTED_VALUE.CLEAR": {
            actions: [
                "clearHighlightedValue"
            ]
        },
        "ITEM.SELECT": {
            actions: [
                "selectItem"
            ]
        },
        "ITEM.CLEAR": {
            actions: [
                "clearItem"
            ]
        },
        "VALUE.SET": {
            actions: [
                "setValue"
            ]
        },
        "INPUT_VALUE.SET": {
            actions: [
                "setInputValue"
            ]
        },
        "POSITIONING.SET": {
            actions: [
                "reposition"
            ]
        }
    },
    entry: choose([
        {
            guard: "autoFocus",
            actions: [
                "setInitialFocus"
            ]
        }
    ]),
    states: {
        idle: {
            tags: [
                "idle",
                "closed"
            ],
            entry: [
                "scrollContentToTop",
                "clearHighlightedValue"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "interacting"
                },
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "setInitialFocus",
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "setInitialFocus",
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "INPUT.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "INPUT.FOCUS": {
                    target: "focused"
                },
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                "VALUE.CLEAR": {
                    target: "focused",
                    actions: [
                        "clearInputValue",
                        "clearSelectedItems",
                        "setInitialFocus"
                    ]
                }
            }
        },
        focused: {
            tags: [
                "focused",
                "closed"
            ],
            entry: [
                "scrollContentToTop",
                "clearHighlightedValue"
            ],
            on: {
                "CONTROLLED.OPEN": [
                    {
                        guard: "isChangeEvent",
                        target: "suggesting"
                    },
                    {
                        target: "interacting"
                    }
                ],
                "INPUT.CHANGE": [
                    {
                        guard: and("isOpenControlled", "openOnChange"),
                        actions: [
                            "setInputValue",
                            "invokeOnOpen",
                            "highlightFirstItemIfNeeded"
                        ]
                    },
                    {
                        guard: "openOnChange",
                        target: "suggesting",
                        actions: [
                            "setInputValue",
                            "invokeOnOpen",
                            "highlightFirstItemIfNeeded"
                        ]
                    },
                    {
                        actions: [
                            "setInputValue"
                        ]
                    }
                ],
                "LAYER.INTERACT_OUTSIDE": {
                    target: "idle"
                },
                "INPUT.ESCAPE": {
                    guard: and("isCustomValue", not("allowCustomValue")),
                    actions: [
                        "revertInputValue"
                    ]
                },
                "INPUT.BLUR": {
                    target: "idle"
                },
                "INPUT.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "setInitialFocus",
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "setInitialFocus",
                            "highlightFirstSelectedItem",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "INPUT.ARROW_DOWN": [
                    // == group 1 ==
                    {
                        guard: and("isOpenControlled", "autoComplete"),
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        guard: "autoComplete",
                        target: "interacting",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    // == group 2 ==
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "highlightFirstOrSelectedItem",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "highlightFirstOrSelectedItem",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "INPUT.ARROW_UP": [
                    // == group 1 ==
                    {
                        guard: "autoComplete",
                        target: "interacting",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        guard: "autoComplete",
                        target: "interacting",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    // == group 2 ==
                    {
                        target: "interacting",
                        actions: [
                            "highlightLastOrSelectedItem",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "highlightLastOrSelectedItem",
                            "invokeOnOpen"
                        ]
                    }
                ],
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "interacting",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                "VALUE.CLEAR": {
                    actions: [
                        "clearInputValue",
                        "clearSelectedItems"
                    ]
                }
            }
        },
        interacting: {
            tags: [
                "open",
                "focused"
            ],
            entry: [
                "setInitialFocus"
            ],
            effects: [
                "scrollToHighlightedItem",
                "trackDismissableLayer",
                "trackPlacement",
                "hideOtherElements"
            ],
            on: {
                "CONTROLLED.CLOSE": [
                    {
                        guard: "restoreFocus",
                        target: "focused",
                        actions: [
                            "setFinalFocus"
                        ]
                    },
                    {
                        target: "idle"
                    }
                ],
                CHILDREN_CHANGE: [
                    {
                        guard: "isHighlightedItemRemoved",
                        actions: [
                            "clearHighlightedValue"
                        ]
                    },
                    {
                        actions: [
                            "scrollToHighlightedItem"
                        ]
                    }
                ],
                "INPUT.HOME": {
                    actions: [
                        "highlightFirstItem"
                    ]
                },
                "INPUT.END": {
                    actions: [
                        "highlightLastItem"
                    ]
                },
                "INPUT.ARROW_DOWN": [
                    {
                        guard: and("autoComplete", "isLastItemHighlighted"),
                        actions: [
                            "clearHighlightedValue",
                            "scrollContentToTop"
                        ]
                    },
                    {
                        actions: [
                            "highlightNextItem"
                        ]
                    }
                ],
                "INPUT.ARROW_UP": [
                    {
                        guard: and("autoComplete", "isFirstItemHighlighted"),
                        actions: [
                            "clearHighlightedValue"
                        ]
                    },
                    {
                        actions: [
                            "highlightPrevItem"
                        ]
                    }
                ],
                "INPUT.ENTER": [
                    // == group 1 ==
                    {
                        guard: and("isOpenControlled", "isCustomValue", not("hasHighlightedItem"), not("allowCustomValue")),
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: and("isCustomValue", not("hasHighlightedItem"), not("allowCustomValue")),
                        target: "focused",
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    // == group 2 ==
                    {
                        guard: and("isOpenControlled", "closeOnSelect"),
                        actions: [
                            "selectHighlightedItem",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "closeOnSelect",
                        target: "focused",
                        actions: [
                            "selectHighlightedItem",
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    },
                    {
                        actions: [
                            "selectHighlightedItem"
                        ]
                    }
                ],
                "INPUT.CHANGE": [
                    {
                        guard: "autoComplete",
                        target: "suggesting",
                        actions: [
                            "setInputValue"
                        ]
                    },
                    {
                        target: "suggesting",
                        actions: [
                            "clearHighlightedValue",
                            "setInputValue"
                        ]
                    }
                ],
                "ITEM.POINTER_MOVE": {
                    actions: [
                        "setHighlightedValue"
                    ]
                },
                "ITEM.POINTER_LEAVE": {
                    actions: [
                        "clearHighlightedValue"
                    ]
                },
                "ITEM.CLICK": [
                    {
                        guard: and("isOpenControlled", "closeOnSelect"),
                        actions: [
                            "selectItem",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "closeOnSelect",
                        target: "focused",
                        actions: [
                            "selectItem",
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    },
                    {
                        actions: [
                            "selectItem"
                        ]
                    }
                ],
                "LAYER.ESCAPE": [
                    {
                        guard: and("isOpenControlled", "autoComplete"),
                        actions: [
                            "syncInputValue",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "autoComplete",
                        target: "focused",
                        actions: [
                            "syncInputValue",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "LAYER.INTERACT_OUTSIDE": [
                    // == group 1 ==
                    {
                        guard: and("isOpenControlled", "isCustomValue", not("allowCustomValue")),
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: and("isCustomValue", not("allowCustomValue")),
                        target: "idle",
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    // == group 2 ==
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    }
                ],
                "VALUE.CLEAR": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "clearInputValue",
                            "clearSelectedItems",
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "clearInputValue",
                            "clearSelectedItems",
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    }
                ]
            }
        },
        suggesting: {
            tags: [
                "open",
                "focused"
            ],
            effects: [
                "trackDismissableLayer",
                "scrollToHighlightedItem",
                "trackPlacement",
                "hideOtherElements"
            ],
            entry: [
                "setInitialFocus"
            ],
            on: {
                "CONTROLLED.CLOSE": [
                    {
                        guard: "restoreFocus",
                        target: "focused",
                        actions: [
                            "setFinalFocus"
                        ]
                    },
                    {
                        target: "idle"
                    }
                ],
                CHILDREN_CHANGE: [
                    {
                        guard: "autoHighlight",
                        actions: [
                            "highlightFirstItem"
                        ]
                    },
                    {
                        guard: "isHighlightedItemRemoved",
                        actions: [
                            "clearHighlightedValue"
                        ]
                    }
                ],
                "INPUT.ARROW_DOWN": {
                    target: "interacting",
                    actions: [
                        "highlightNextItem"
                    ]
                },
                "INPUT.ARROW_UP": {
                    target: "interacting",
                    actions: [
                        "highlightPrevItem"
                    ]
                },
                "INPUT.HOME": {
                    target: "interacting",
                    actions: [
                        "highlightFirstItem"
                    ]
                },
                "INPUT.END": {
                    target: "interacting",
                    actions: [
                        "highlightLastItem"
                    ]
                },
                "INPUT.ENTER": [
                    // == group 1 ==
                    {
                        guard: and("isOpenControlled", "isCustomValue", not("hasHighlightedItem"), not("allowCustomValue")),
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: and("isCustomValue", not("hasHighlightedItem"), not("allowCustomValue")),
                        target: "focused",
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    // == group 2 ==
                    {
                        guard: and("isOpenControlled", "closeOnSelect"),
                        actions: [
                            "selectHighlightedItem",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "closeOnSelect",
                        target: "focused",
                        actions: [
                            "selectHighlightedItem",
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    },
                    {
                        actions: [
                            "selectHighlightedItem"
                        ]
                    }
                ],
                "INPUT.CHANGE": {
                    actions: [
                        "setInputValue"
                    ]
                },
                "LAYER.ESCAPE": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "ITEM.POINTER_MOVE": {
                    target: "interacting",
                    actions: [
                        "setHighlightedValue"
                    ]
                },
                "ITEM.POINTER_LEAVE": {
                    actions: [
                        "clearHighlightedValue"
                    ]
                },
                "LAYER.INTERACT_OUTSIDE": [
                    // == group 1 ==
                    {
                        guard: and("isOpenControlled", "isCustomValue", not("allowCustomValue")),
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: and("isCustomValue", not("allowCustomValue")),
                        target: "idle",
                        actions: [
                            "revertInputValue",
                            "invokeOnClose"
                        ]
                    },
                    // == group 2 ==
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "ITEM.CLICK": [
                    {
                        guard: and("isOpenControlled", "closeOnSelect"),
                        actions: [
                            "selectItem",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "closeOnSelect",
                        target: "focused",
                        actions: [
                            "selectItem",
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    },
                    {
                        actions: [
                            "selectItem"
                        ]
                    }
                ],
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    }
                ],
                "VALUE.CLEAR": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "clearInputValue",
                            "clearSelectedItems",
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "clearInputValue",
                            "clearSelectedItems",
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    }
                ]
            }
        }
    },
    implementations: {
        guards: {
            isInputValueEmpty: (param)=>{
                let { computed } = param;
                return computed("isInputValueEmpty");
            },
            autoComplete: (param)=>{
                let { computed, prop } = param;
                return computed("autoComplete") && !prop("multiple");
            },
            autoHighlight: (param)=>{
                let { computed } = param;
                return computed("autoHighlight");
            },
            isFirstItemHighlighted: (param)=>{
                let { prop, context } = param;
                return prop("collection").firstValue === context.get("highlightedValue");
            },
            isLastItemHighlighted: (param)=>{
                let { prop, context } = param;
                return prop("collection").lastValue === context.get("highlightedValue");
            },
            isCustomValue: (param)=>{
                let { computed } = param;
                return computed("isCustomValue");
            },
            allowCustomValue: (param)=>{
                let { prop } = param;
                return !!prop("allowCustomValue");
            },
            hasHighlightedItem: (param)=>{
                let { context } = param;
                return context.get("highlightedValue") != null;
            },
            closeOnSelect: (param)=>{
                let { prop } = param;
                return !!prop("closeOnSelect");
            },
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") != null;
            },
            openOnChange: (param)=>{
                let { prop, context } = param;
                const openOnChange = prop("openOnChange");
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBoolean"])(openOnChange)) return openOnChange;
                return !!(openOnChange === null || openOnChange === void 0 ? void 0 : openOnChange({
                    inputValue: context.get("inputValue")
                }));
            },
            restoreFocus: (param)=>{
                let { event } = param;
                return event.restoreFocus == null ? true : !!event.restoreFocus;
            },
            isChangeEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "INPUT.CHANGE";
            },
            autoFocus: (param)=>{
                let { prop } = param;
                return !!prop("autoFocus");
            },
            isHighlightedItemRemoved: (param)=>{
                let { prop, context } = param;
                return !prop("collection").has(context.get("highlightedValue"));
            }
        },
        effects: {
            trackDismissableLayer (param) {
                let { send, prop, scope } = param;
                if (prop("disableLayer")) return;
                const contentEl = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDismissableElement"])(contentEl, {
                    defer: true,
                    exclude: ()=>[
                            getInputEl(scope),
                            getTriggerEl(scope),
                            getClearTriggerEl(scope)
                        ],
                    onFocusOutside: prop("onFocusOutside"),
                    onPointerDownOutside: prop("onPointerDownOutside"),
                    onInteractOutside: prop("onInteractOutside"),
                    onEscapeKeyDown (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        send({
                            type: "LAYER.ESCAPE",
                            src: "escape-key"
                        });
                    },
                    onDismiss () {
                        send({
                            type: "LAYER.INTERACT_OUTSIDE",
                            src: "interact-outside",
                            restoreFocus: false
                        });
                    }
                });
            },
            hideOtherElements (param) {
                let { scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$aria$2d$hidden$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaHidden"])([
                    getInputEl(scope),
                    getContentEl(scope),
                    getTriggerEl(scope),
                    getClearTriggerEl(scope)
                ]);
            },
            trackPlacement (param) {
                let { context, prop, scope } = param;
                const anchorEl = ()=>getControlEl(scope) || getTriggerEl(scope);
                const positionerEl = ()=>getPositionerEl(scope);
                context.set("currentPlacement", prop("positioning").placement);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(anchorEl, positionerEl, {
                    ...prop("positioning"),
                    defer: true,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            scrollToHighlightedItem (param) {
                let { context, prop, scope, event } = param;
                const inputEl = getInputEl(scope);
                let cleanups = [];
                const exec = (immediate)=>{
                    const pointer = event.current().type.includes("POINTER");
                    const highlightedValue = context.get("highlightedValue");
                    if (pointer || !highlightedValue) return;
                    const contentEl = getContentEl(scope);
                    const scrollToIndexFn = prop("scrollToIndexFn");
                    if (scrollToIndexFn) {
                        const highlightedIndex = prop("collection").indexOf(highlightedValue);
                        scrollToIndexFn({
                            index: highlightedIndex,
                            immediate,
                            getElement: ()=>getItemEl(scope, highlightedValue)
                        });
                        return;
                    }
                    const itemEl = getItemEl(scope, highlightedValue);
                    const raf_cleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["scrollIntoView"])(itemEl, {
                            rootEl: contentEl,
                            block: "nearest"
                        });
                    });
                    cleanups.push(raf_cleanup);
                };
                const rafCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>exec(true));
                cleanups.push(rafCleanup);
                const observerCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observeAttributes"])(inputEl, {
                    attributes: [
                        "aria-activedescendant"
                    ],
                    callback: ()=>exec(false)
                });
                cleanups.push(observerCleanup);
                return ()=>{
                    cleanups.forEach((cleanup)=>cleanup());
                };
            }
        },
        actions: {
            reposition (param) {
                let { context, prop, scope, event } = param;
                const controlEl = ()=>getControlEl(scope);
                const positionerEl = ()=>getPositionerEl(scope);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(controlEl, positionerEl, {
                    ...prop("positioning"),
                    ...event.options,
                    defer: true,
                    listeners: false,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            setHighlightedValue (param) {
                let { context, event } = param;
                if (event.value == null) return;
                context.set("highlightedValue", event.value);
            },
            clearHighlightedValue (param) {
                let { context } = param;
                context.set("highlightedValue", null);
            },
            selectHighlightedItem (params) {
                var _prop;
                const { context, prop } = params;
                const collection2 = prop("collection");
                const highlightedValue = context.get("highlightedValue");
                if (!highlightedValue || !collection2.has(highlightedValue)) return;
                const nextValue = prop("multiple") ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addOrRemove"])(context.get("value"), highlightedValue) : [
                    highlightedValue
                ];
                (_prop = prop("onSelect")) === null || _prop === void 0 ? void 0 : _prop({
                    value: nextValue,
                    itemValue: highlightedValue
                });
                context.set("value", nextValue);
                const inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(prop("selectionBehavior"), {
                    preserve: context.get("inputValue"),
                    replace: collection2.stringifyMany(nextValue),
                    clear: ""
                });
                context.set("inputValue", inputValue);
            },
            scrollToHighlightedItem (param) {
                let { context, prop, scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextTick"])(()=>{
                    const highlightedValue = context.get("highlightedValue");
                    if (highlightedValue == null) return;
                    const itemEl = getItemEl(scope, highlightedValue);
                    const contentEl = getContentEl(scope);
                    const scrollToIndexFn = prop("scrollToIndexFn");
                    if (scrollToIndexFn) {
                        const highlightedIndex = prop("collection").indexOf(highlightedValue);
                        scrollToIndexFn({
                            index: highlightedIndex,
                            immediate: true,
                            getElement: ()=>getItemEl(scope, highlightedValue)
                        });
                        return;
                    }
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["scrollIntoView"])(itemEl, {
                        rootEl: contentEl,
                        block: "nearest"
                    });
                });
            },
            selectItem (params) {
                const { context, event, flush, prop } = params;
                if (event.value == null) return;
                flush(()=>{
                    var _prop;
                    const nextValue = prop("multiple") ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addOrRemove"])(context.get("value"), event.value) : [
                        event.value
                    ];
                    (_prop = prop("onSelect")) === null || _prop === void 0 ? void 0 : _prop({
                        value: nextValue,
                        itemValue: event.value
                    });
                    context.set("value", nextValue);
                    const inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(prop("selectionBehavior"), {
                        preserve: context.get("inputValue"),
                        replace: prop("collection").stringifyMany(nextValue),
                        clear: ""
                    });
                    context.set("inputValue", inputValue);
                });
            },
            clearItem (params) {
                const { context, event, flush, prop } = params;
                if (event.value == null) return;
                flush(()=>{
                    const nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["remove"])(context.get("value"), event.value);
                    context.set("value", nextValue);
                    const inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(prop("selectionBehavior"), {
                        preserve: context.get("inputValue"),
                        replace: prop("collection").stringifyMany(nextValue),
                        clear: ""
                    });
                    context.set("inputValue", inputValue);
                });
            },
            setInitialFocus (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    focusInputEl(scope);
                });
            },
            setFinalFocus (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const triggerEl = getTriggerEl(scope);
                    if ((triggerEl === null || triggerEl === void 0 ? void 0 : triggerEl.dataset.focusable) == null) {
                        focusInputEl(scope);
                    } else {
                        focusTriggerEl(scope);
                    }
                });
            },
            syncInputValue (param) {
                let { context, scope, event } = param;
                const inputEl = getInputEl(scope);
                if (!inputEl) return;
                inputEl.value = context.get("inputValue");
                queueMicrotask(()=>{
                    if (event.current().type === "INPUT.CHANGE") return;
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setCaretToEnd"])(inputEl);
                });
            },
            setInputValue (param) {
                let { context, event } = param;
                context.set("inputValue", event.value);
            },
            clearInputValue (param) {
                let { context } = param;
                context.set("inputValue", "");
            },
            revertInputValue (param) {
                let { context, prop, computed } = param;
                const selectionBehavior = prop("selectionBehavior");
                const inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(selectionBehavior, {
                    replace: computed("hasSelectedItems") ? computed("valueAsString") : "",
                    preserve: context.get("inputValue"),
                    clear: ""
                });
                context.set("inputValue", inputValue);
            },
            setValue (params) {
                const { context, flush, event, prop } = params;
                flush(()=>{
                    context.set("value", event.value);
                    const inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(prop("selectionBehavior"), {
                        preserve: context.get("inputValue"),
                        replace: prop("collection").stringifyMany(event.value),
                        clear: ""
                    });
                    context.set("inputValue", inputValue);
                });
            },
            clearSelectedItems (params) {
                const { context, flush, prop } = params;
                flush(()=>{
                    context.set("value", []);
                    const inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(prop("selectionBehavior"), {
                        preserve: context.get("inputValue"),
                        replace: prop("collection").stringifyMany([]),
                        clear: ""
                    });
                    context.set("inputValue", inputValue);
                });
            },
            scrollContentToTop (param) {
                let { prop, scope } = param;
                const scrollToIndexFn = prop("scrollToIndexFn");
                if (scrollToIndexFn) {
                    const firstValue = prop("collection").firstValue;
                    scrollToIndexFn({
                        index: 0,
                        immediate: true,
                        getElement: ()=>getItemEl(scope, firstValue)
                    });
                } else {
                    const contentEl = getContentEl(scope);
                    if (!contentEl) return;
                    contentEl.scrollTop = 0;
                }
            },
            invokeOnOpen (param) {
                let { prop, event } = param;
                var _prop;
                const reason = getOpenChangeReason(event);
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true,
                    reason
                });
            },
            invokeOnClose (param) {
                let { prop, event } = param;
                var _prop;
                const reason = getOpenChangeReason(event);
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false,
                    reason
                });
            },
            highlightFirstItem (param) {
                let { context, prop, scope } = param;
                const exec = getContentEl(scope) ? queueMicrotask : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"];
                exec(()=>{
                    const value = prop("collection").firstValue;
                    if (value) context.set("highlightedValue", value);
                });
            },
            highlightFirstItemIfNeeded (param) {
                let { computed, action } = param;
                if (!computed("autoHighlight")) return;
                action([
                    "highlightFirstItem"
                ]);
            },
            highlightLastItem (param) {
                let { context, prop, scope } = param;
                const exec = getContentEl(scope) ? queueMicrotask : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"];
                exec(()=>{
                    const value = prop("collection").lastValue;
                    if (value) context.set("highlightedValue", value);
                });
            },
            highlightNextItem (param) {
                let { context, prop } = param;
                let value = null;
                const highlightedValue = context.get("highlightedValue");
                const collection2 = prop("collection");
                if (highlightedValue) {
                    value = collection2.getNextValue(highlightedValue);
                    if (!value && prop("loopFocus")) value = collection2.firstValue;
                } else {
                    value = collection2.firstValue;
                }
                if (value) context.set("highlightedValue", value);
            },
            highlightPrevItem (param) {
                let { context, prop } = param;
                let value = null;
                const highlightedValue = context.get("highlightedValue");
                const collection2 = prop("collection");
                if (highlightedValue) {
                    value = collection2.getPreviousValue(highlightedValue);
                    if (!value && prop("loopFocus")) value = collection2.lastValue;
                } else {
                    value = collection2.lastValue;
                }
                if (value) context.set("highlightedValue", value);
            },
            highlightFirstSelectedItem (param) {
                let { context, prop } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const [value] = prop("collection").sort(context.get("value"));
                    if (value) context.set("highlightedValue", value);
                });
            },
            highlightFirstOrSelectedItem (param) {
                let { context, prop, computed } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    let value = null;
                    if (computed("hasSelectedItems")) {
                        value = prop("collection").sort(context.get("value"))[0];
                    } else {
                        value = prop("collection").firstValue;
                    }
                    if (value) context.set("highlightedValue", value);
                });
            },
            highlightLastOrSelectedItem (param) {
                let { context, prop, computed } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const collection2 = prop("collection");
                    let value = null;
                    if (computed("hasSelectedItems")) {
                        value = collection2.sort(context.get("value"))[0];
                    } else {
                        value = collection2.lastValue;
                    }
                    if (value) context.set("highlightedValue", value);
                });
            },
            autofillInputValue (param) {
                let { context, computed, prop, event, scope } = param;
                const inputEl = getInputEl(scope);
                const collection2 = prop("collection");
                if (!computed("autoComplete") || !inputEl || !event.keypress) return;
                const valueText = collection2.stringify(context.get("highlightedValue"));
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    inputEl.value = valueText || context.get("inputValue");
                });
            },
            syncSelectedItems (params) {
                queueMicrotask(()=>{
                    const { context, prop } = params;
                    const collection2 = prop("collection");
                    const value = context.get("value");
                    const selectedItems = value.map((v)=>{
                        const item = context.get("selectedItems").find((item2)=>collection2.getItemValue(item2) === v);
                        return item || collection2.find(v);
                    });
                    context.set("selectedItems", selectedItems);
                    const inputValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(prop("selectionBehavior"), {
                        preserve: context.get("inputValue"),
                        replace: collection2.stringifyMany(value),
                        clear: ""
                    });
                    context.set("inputValue", inputValue);
                });
            },
            syncHighlightedItem (param) {
                let { context, prop } = param;
                const item = prop("collection").find(context.get("highlightedValue"));
                context.set("highlightedItem", item);
            },
            toggleVisibility (param) {
                let { event, send, prop } = param;
                send({
                    type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
                    previousEvent: event
                });
            }
        }
    }
});
function getOpenChangeReason(event) {
    return (event.previousEvent || event).src;
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "allowCustomValue",
    "autoFocus",
    "closeOnSelect",
    "collection",
    "composite",
    "defaultHighlightedValue",
    "defaultInputValue",
    "defaultOpen",
    "defaultValue",
    "dir",
    "disabled",
    "disableLayer",
    "form",
    "getRootNode",
    "highlightedValue",
    "id",
    "ids",
    "inputBehavior",
    "inputValue",
    "invalid",
    "loopFocus",
    "multiple",
    "name",
    "navigate",
    "onFocusOutside",
    "onHighlightChange",
    "onInputValueChange",
    "onInteractOutside",
    "onOpenChange",
    "onOpenChange",
    "onPointerDownOutside",
    "onSelect",
    "onValueChange",
    "open",
    "openOnChange",
    "openOnClick",
    "openOnKeyPress",
    "placeholder",
    "positioning",
    "readOnly",
    "required",
    "scrollToIndexFn",
    "selectionBehavior",
    "translations",
    "value"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "htmlFor"
]);
var splitItemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupLabelProps);
var itemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "id"
]);
var splitItemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupProps);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "item",
    "persistFocus"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
;
}),
"[project]/node_modules/@zag-js/accordion/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/accordion.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("accordion").parts("root", "item", "itemTrigger", "itemContent", "itemIndicator");
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "accordion:".concat(ctx.id);
};
var getItemId = (ctx, value)=>{
    var _ctx_ids_item, _ctx_ids;
    var _ctx_ids_item1;
    return (_ctx_ids_item1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_item = _ctx_ids.item) === null || _ctx_ids_item === void 0 ? void 0 : _ctx_ids_item.call(_ctx_ids, value)) !== null && _ctx_ids_item1 !== void 0 ? _ctx_ids_item1 : "accordion:".concat(ctx.id, ":item:").concat(value);
};
var getItemContentId = (ctx, value)=>{
    var _ctx_ids_itemContent, _ctx_ids;
    var _ctx_ids_itemContent1;
    return (_ctx_ids_itemContent1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemContent = _ctx_ids.itemContent) === null || _ctx_ids_itemContent === void 0 ? void 0 : _ctx_ids_itemContent.call(_ctx_ids, value)) !== null && _ctx_ids_itemContent1 !== void 0 ? _ctx_ids_itemContent1 : "accordion:".concat(ctx.id, ":content:").concat(value);
};
var getItemTriggerId = (ctx, value)=>{
    var _ctx_ids_itemTrigger, _ctx_ids;
    var _ctx_ids_itemTrigger1;
    return (_ctx_ids_itemTrigger1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemTrigger = _ctx_ids.itemTrigger) === null || _ctx_ids_itemTrigger === void 0 ? void 0 : _ctx_ids_itemTrigger.call(_ctx_ids, value)) !== null && _ctx_ids_itemTrigger1 !== void 0 ? _ctx_ids_itemTrigger1 : "accordion:".concat(ctx.id, ":trigger:").concat(value);
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getTriggerEls = (ctx)=>{
    const ownerId = CSS.escape(getRootId(ctx));
    const selector = "[aria-controls][data-ownedby='".concat(ownerId, "']:not([disabled])");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getRootEl(ctx), selector);
};
var getFirstTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["first"])(getTriggerEls(ctx));
var getLastTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["last"])(getTriggerEls(ctx));
var getNextTriggerEl = (ctx, id)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextById"])(getTriggerEls(ctx), getItemTriggerId(ctx, id));
var getPrevTriggerEl = (ctx, id)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prevById"])(getTriggerEls(ctx), getItemTriggerId(ctx, id));
// src/accordion.connect.ts
function connect(service, normalize) {
    const { send, context, prop, scope, computed } = service;
    const focusedValue = context.get("focusedValue");
    const value = context.get("value");
    const multiple = prop("multiple");
    function setValue(value2) {
        let nextValue = value2;
        if (!multiple && nextValue.length > 1) {
            nextValue = [
                nextValue[0]
            ];
        }
        send({
            type: "VALUE.SET",
            value: nextValue
        });
    }
    function getItemState(props2) {
        var _props2_disabled;
        return {
            expanded: value.includes(props2.value),
            focused: focusedValue === props2.value,
            disabled: Boolean((_props2_disabled = props2.disabled) !== null && _props2_disabled !== void 0 ? _props2_disabled : prop("disabled"))
        };
    }
    return {
        focusedValue,
        value,
        setValue,
        getItemState,
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope),
                "data-orientation": prop("orientation")
            });
        },
        getItemProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.item.attrs,
                dir: prop("dir"),
                id: getItemId(scope, props2.value),
                "data-state": itemState.expanded ? "open" : "closed",
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.focused),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-orientation": prop("orientation")
            });
        },
        getItemContentProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.itemContent.attrs,
                dir: prop("dir"),
                role: "region",
                id: getItemContentId(scope, props2.value),
                "aria-labelledby": getItemTriggerId(scope, props2.value),
                hidden: !itemState.expanded,
                "data-state": itemState.expanded ? "open" : "closed",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.focused),
                "data-orientation": prop("orientation")
            });
        },
        getItemIndicatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.itemIndicator.attrs,
                dir: prop("dir"),
                "aria-hidden": true,
                "data-state": itemState.expanded ? "open" : "closed",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.focused),
                "data-orientation": prop("orientation")
            });
        },
        getItemTriggerProps (props2) {
            const { value: value2 } = props2;
            const itemState = getItemState(props2);
            return normalize.button({
                ...parts.itemTrigger.attrs,
                type: "button",
                dir: prop("dir"),
                id: getItemTriggerId(scope, value2),
                "aria-controls": getItemContentId(scope, value2),
                "aria-expanded": itemState.expanded,
                disabled: itemState.disabled,
                "data-orientation": prop("orientation"),
                "aria-disabled": itemState.disabled,
                "data-state": itemState.expanded ? "open" : "closed",
                "data-ownedby": getRootId(scope),
                onFocus () {
                    if (itemState.disabled) return;
                    send({
                        type: "TRIGGER.FOCUS",
                        value: value2
                    });
                },
                onBlur () {
                    if (itemState.disabled) return;
                    send({
                        type: "TRIGGER.BLUR"
                    });
                },
                onClick (event) {
                    if (itemState.disabled) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) {
                        event.currentTarget.focus();
                    }
                    send({
                        type: "TRIGGER.CLICK",
                        value: value2
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (itemState.disabled) return;
                    const keyMap = {
                        ArrowDown () {
                            if (computed("isHorizontal")) return;
                            send({
                                type: "GOTO.NEXT",
                                value: value2
                            });
                        },
                        ArrowUp () {
                            if (computed("isHorizontal")) return;
                            send({
                                type: "GOTO.PREV",
                                value: value2
                            });
                        },
                        ArrowRight () {
                            if (!computed("isHorizontal")) return;
                            send({
                                type: "GOTO.NEXT",
                                value: value2
                            });
                        },
                        ArrowLeft () {
                            if (!computed("isHorizontal")) return;
                            send({
                                type: "GOTO.PREV",
                                value: value2
                            });
                        },
                        Home () {
                            send({
                                type: "GOTO.FIRST",
                                value: value2
                            });
                        },
                        End () {
                            send({
                                type: "GOTO.LAST",
                                value: value2
                            });
                        }
                    };
                    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir"),
                        orientation: prop("orientation")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        exec(event);
                        event.preventDefault();
                    }
                }
            });
        }
    };
}
var { and, not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            collapsible: false,
            multiple: false,
            orientation: "vertical",
            defaultValue: [],
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            focusedValue: bindable(()=>({
                    defaultValue: null,
                    sync: true,
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onFocusChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                })),
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                }))
        };
    },
    computed: {
        isHorizontal: (param)=>{
            let { prop } = param;
            return prop("orientation") === "horizontal";
        }
    },
    on: {
        "VALUE.SET": {
            actions: [
                "setValue"
            ]
        }
    },
    states: {
        idle: {
            on: {
                "TRIGGER.FOCUS": {
                    target: "focused",
                    actions: [
                        "setFocusedValue"
                    ]
                }
            }
        },
        focused: {
            on: {
                "GOTO.NEXT": {
                    actions: [
                        "focusNextTrigger"
                    ]
                },
                "GOTO.PREV": {
                    actions: [
                        "focusPrevTrigger"
                    ]
                },
                "TRIGGER.CLICK": [
                    {
                        guard: and("isExpanded", "canToggle"),
                        actions: [
                            "collapse"
                        ]
                    },
                    {
                        guard: not("isExpanded"),
                        actions: [
                            "expand"
                        ]
                    }
                ],
                "GOTO.FIRST": {
                    actions: [
                        "focusFirstTrigger"
                    ]
                },
                "GOTO.LAST": {
                    actions: [
                        "focusLastTrigger"
                    ]
                },
                "TRIGGER.BLUR": {
                    target: "idle",
                    actions: [
                        "clearFocusedValue"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            canToggle: (param)=>{
                let { prop } = param;
                return !!prop("collapsible") || !!prop("multiple");
            },
            isExpanded: (param)=>{
                let { context, event } = param;
                return context.get("value").includes(event.value);
            }
        },
        actions: {
            collapse (param) {
                let { context, prop, event } = param;
                const next = prop("multiple") ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["remove"])(context.get("value"), event.value) : [];
                context.set("value", next);
            },
            expand (param) {
                let { context, prop, event } = param;
                const next = prop("multiple") ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(context.get("value"), event.value) : [
                    event.value
                ];
                context.set("value", next);
            },
            focusFirstTrigger (param) {
                let { scope } = param;
                var _getFirstTriggerEl;
                (_getFirstTriggerEl = getFirstTriggerEl(scope)) === null || _getFirstTriggerEl === void 0 ? void 0 : _getFirstTriggerEl.focus();
            },
            focusLastTrigger (param) {
                let { scope } = param;
                var _getLastTriggerEl;
                (_getLastTriggerEl = getLastTriggerEl(scope)) === null || _getLastTriggerEl === void 0 ? void 0 : _getLastTriggerEl.focus();
            },
            focusNextTrigger (param) {
                let { context, scope } = param;
                const focusedValue = context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getNextTriggerEl(scope, focusedValue);
                triggerEl === null || triggerEl === void 0 ? void 0 : triggerEl.focus();
            },
            focusPrevTrigger (param) {
                let { context, scope } = param;
                const focusedValue = context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getPrevTriggerEl(scope, focusedValue);
                triggerEl === null || triggerEl === void 0 ? void 0 : triggerEl.focus();
            },
            setFocusedValue (param) {
                let { context, event } = param;
                context.set("focusedValue", event.value);
            },
            clearFocusedValue (param) {
                let { context } = param;
                context.set("focusedValue", null);
            },
            setValue (param) {
                let { context, event } = param;
                context.set("value", event.value);
            },
            coarseValue (param) {
                let { context, prop } = param;
                if (!prop("multiple") && context.get("value").length > 1) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warn"])("The value of accordion should be a single value when multiple is false.");
                    context.set("value", [
                        context.get("value")[0]
                    ]);
                }
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "collapsible",
    "dir",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "multiple",
    "onFocusChange",
    "onValueChange",
    "orientation",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value",
    "disabled"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
;
}),
"[project]/node_modules/@zag-js/accordion/dist/index.mjs [app-client] (ecmascript) <export anatomy as accordionAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "accordionAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$accordion$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$accordion$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/accordion/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/clipboard/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "contextProps",
    ()=>contextProps,
    "indicatorProps",
    ()=>indicatorProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitIndicatorProps",
    ()=>splitIndicatorProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/clipboard.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("clipboard").parts("root", "control", "trigger", "indicator", "input", "label");
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "clip:".concat(ctx.id);
};
var getInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_input;
    return (_ctx_ids_input = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.input) !== null && _ctx_ids_input !== void 0 ? _ctx_ids_input : "clip:".concat(ctx.id, ":input");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "clip:".concat(ctx.id, ":label");
};
var getInputEl = (ctx)=>ctx.getById(getInputId(ctx));
var writeToClipboard = (ctx, value)=>copyText(ctx.getDoc(), value);
function createNode(doc, text) {
    const node = doc.createElement("pre");
    Object.assign(node.style, {
        width: "1px",
        height: "1px",
        position: "fixed",
        top: "5px"
    });
    node.textContent = text;
    return node;
}
function copyNode(node) {
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(node);
    const selection = win.getSelection();
    if (selection == null) {
        return Promise.reject(new Error());
    }
    selection.removeAllRanges();
    const doc = node.ownerDocument;
    const range = doc.createRange();
    range.selectNodeContents(node);
    selection.addRange(range);
    doc.execCommand("copy");
    selection.removeAllRanges();
    return Promise.resolve();
}
function copyText(doc, text) {
    var _win_navigator_clipboard;
    const win = doc.defaultView || window;
    if (((_win_navigator_clipboard = win.navigator.clipboard) === null || _win_navigator_clipboard === void 0 ? void 0 : _win_navigator_clipboard.writeText) !== void 0) {
        return win.navigator.clipboard.writeText(text);
    }
    if (!doc.body) {
        return Promise.reject(new Error());
    }
    const node = createNode(doc, text);
    doc.body.appendChild(node);
    copyNode(node);
    doc.body.removeChild(node);
    return Promise.resolve();
}
// src/clipboard.connect.ts
function connect(service, normalize) {
    const { state, send, context, scope } = service;
    const copied = state.matches("copied");
    return {
        copied,
        value: context.get("value"),
        setValue (value) {
            send({
                type: "VALUE.SET",
                value
            });
        },
        copy () {
            send({
                type: "COPY"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                id: getRootId(scope)
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                htmlFor: getInputId(scope),
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                id: getLabelId(scope)
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied)
            });
        },
        getInputProps () {
            return normalize.input({
                ...parts.input.attrs,
                defaultValue: context.get("value"),
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                readOnly: true,
                "data-readonly": "true",
                id: getInputId(scope),
                onFocus (event) {
                    event.currentTarget.select();
                },
                onCopy () {
                    send({
                        type: "INPUT.COPY"
                    });
                }
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                type: "button",
                "aria-label": copied ? "Copied to clipboard" : "Copy to clipboard",
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                onClick () {
                    send({
                        type: "COPY"
                    });
                }
            });
        },
        getIndicatorProps (props2) {
            return normalize.element({
                ...parts.indicator.attrs,
                hidden: props2.copied !== copied
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            timeout: 3e3,
            defaultValue: "",
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                }))
        };
    },
    watch (param) {
        let { track, context, action } = param;
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "syncInputElement"
            ]);
        });
    },
    on: {
        "VALUE.SET": {
            actions: [
                "setValue"
            ]
        },
        COPY: {
            target: "copied",
            actions: [
                "copyToClipboard",
                "invokeOnCopy"
            ]
        }
    },
    states: {
        idle: {
            on: {
                "INPUT.COPY": {
                    target: "copied",
                    actions: [
                        "invokeOnCopy"
                    ]
                }
            }
        },
        copied: {
            effects: [
                "waitForTimeout"
            ],
            on: {
                "COPY.DONE": {
                    target: "idle"
                },
                COPY: {
                    target: "copied",
                    actions: [
                        "copyToClipboard",
                        "invokeOnCopy"
                    ]
                },
                "INPUT.COPY": {
                    actions: [
                        "invokeOnCopy"
                    ]
                }
            }
        }
    },
    implementations: {
        effects: {
            waitForTimeout (param) {
                let { prop, send } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setRafTimeout"])(()=>{
                    send({
                        type: "COPY.DONE"
                    });
                }, prop("timeout"));
            }
        },
        actions: {
            setValue (param) {
                let { context, event } = param;
                context.set("value", event.value);
            },
            copyToClipboard (param) {
                let { context, scope } = param;
                writeToClipboard(scope, context.get("value"));
            },
            invokeOnCopy (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onStatusChange")) === null || _prop === void 0 ? void 0 : _prop({
                    copied: true
                });
            },
            syncInputElement (param) {
                let { context, scope } = param;
                const inputEl = getInputEl(scope);
                if (!inputEl) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(inputEl, context.get("value"));
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "getRootNode",
    "id",
    "ids",
    "value",
    "defaultValue",
    "timeout",
    "onStatusChange",
    "onValueChange"
]);
var contextProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var indicatorProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "copied"
]);
var splitIndicatorProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(indicatorProps);
;
}),
"[project]/node_modules/@zag-js/clipboard/dist/index.mjs [app-client] (ecmascript) <export anatomy as clipboardAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "clipboardAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$clipboard$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$clipboard$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/clipboard/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/color-utils/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "Color",
    ()=>Color,
    "getColorAreaGradient",
    ()=>getColorAreaGradient,
    "normalizeColor",
    ()=>normalizeColor,
    "parseColor",
    ()=>parseColor
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>__defNormalProp(obj, key + "", value);
// src/color-format-gradient.ts
var generateRGB_R = (orientation, dir, zValue)=>{
    const maskImage = "linear-gradient(to ".concat(orientation[Number(!dir)], ", transparent, #000)");
    const result = {
        areaStyles: {
            backgroundImage: "linear-gradient(to ".concat(orientation[Number(dir)], ",rgb(").concat(zValue, ",0,0),rgb(").concat(zValue, ",255,0))")
        },
        areaGradientStyles: {
            backgroundImage: "linear-gradient(to ".concat(orientation[Number(dir)], ",rgb(").concat(zValue, ",0,255),rgb(").concat(zValue, ",255,255))"),
            WebkitMaskImage: maskImage,
            maskImage
        }
    };
    return result;
};
var generateRGB_G = (orientation, dir, zValue)=>{
    const maskImage = "linear-gradient(to ".concat(orientation[Number(!dir)], ", transparent, #000)");
    const result = {
        areaStyles: {
            backgroundImage: "linear-gradient(to ".concat(orientation[Number(dir)], ",rgb(0,").concat(zValue, ",0),rgb(255,").concat(zValue, ",0))")
        },
        areaGradientStyles: {
            backgroundImage: "linear-gradient(to ".concat(orientation[Number(dir)], ",rgb(0,").concat(zValue, ",255),rgb(255,").concat(zValue, ",255))"),
            WebkitMaskImage: maskImage,
            maskImage
        }
    };
    return result;
};
var generateRGB_B = (orientation, dir, zValue)=>{
    const maskImage = "linear-gradient(to ".concat(orientation[Number(!dir)], ", transparent, #000)");
    const result = {
        areaStyles: {
            backgroundImage: "linear-gradient(to ".concat(orientation[Number(dir)], ",rgb(0,0,").concat(zValue, "),rgb(255,0,").concat(zValue, "))")
        },
        areaGradientStyles: {
            backgroundImage: "linear-gradient(to ".concat(orientation[Number(dir)], ",rgb(0,255,").concat(zValue, "),rgb(255,255,").concat(zValue, "))"),
            WebkitMaskImage: maskImage,
            maskImage
        }
    };
    return result;
};
var generateHSL_H = (orientation, dir, zValue)=>{
    const result = {
        areaStyles: {},
        areaGradientStyles: {
            background: [
                "linear-gradient(to ".concat(orientation[Number(dir)], ", hsla(0,0%,0%,1) 0%, hsla(0,0%,0%,0) 50%, hsla(0,0%,100%,0) 50%, hsla(0,0%,100%,1) 100%)"),
                "linear-gradient(to ".concat(orientation[Number(!dir)], ",hsl(0,0%,50%),hsla(0,0%,50%,0))"),
                "hsl(".concat(zValue, ", 100%, 50%)")
            ].join(",")
        }
    };
    return result;
};
var generateHSL_S = (orientation, dir, alphaValue)=>{
    const result = {
        areaStyles: {},
        areaGradientStyles: {
            background: [
                "linear-gradient(to ".concat(orientation[Number(!dir)], ", hsla(0,0%,0%,").concat(alphaValue, ") 0%, hsla(0,0%,0%,0) 50%, hsla(0,0%,100%,0) 50%, hsla(0,0%,100%,").concat(alphaValue, ") 100%)"),
                "linear-gradient(to ".concat(orientation[Number(dir)], ",hsla(0,100%,50%,").concat(alphaValue, "),hsla(60,100%,50%,").concat(alphaValue, "),hsla(120,100%,50%,").concat(alphaValue, "),hsla(180,100%,50%,").concat(alphaValue, "),hsla(240,100%,50%,").concat(alphaValue, "),hsla(300,100%,50%,").concat(alphaValue, "),hsla(359,100%,50%,").concat(alphaValue, "))"),
                "hsl(0, 0%, 50%)"
            ].join(",")
        }
    };
    return result;
};
var generateHSL_L = (orientation, dir, zValue)=>{
    const result = {
        areaStyles: {},
        areaGradientStyles: {
            backgroundImage: [
                "linear-gradient(to ".concat(orientation[Number(!dir)], ",hsl(0,0%,").concat(zValue, "%),hsla(0,0%,").concat(zValue, "%,0))"),
                "linear-gradient(to ".concat(orientation[Number(dir)], ",hsl(0,100%,").concat(zValue, "%),hsl(60,100%,").concat(zValue, "%),hsl(120,100%,").concat(zValue, "%),hsl(180,100%,").concat(zValue, "%),hsl(240,100%,").concat(zValue, "%),hsl(300,100%,").concat(zValue, "%),hsl(360,100%,").concat(zValue, "%))")
            ].join(",")
        }
    };
    return result;
};
var generateHSB_H = (orientation, dir, zValue)=>{
    const result = {
        areaStyles: {},
        areaGradientStyles: {
            background: [
                "linear-gradient(to ".concat(orientation[Number(dir)], ",hsl(0,0%,0%),hsla(0,0%,0%,0))"),
                "linear-gradient(to ".concat(orientation[Number(!dir)], ",hsl(0,0%,100%),hsla(0,0%,100%,0))"),
                "hsl(".concat(zValue, ", 100%, 50%)")
            ].join(",")
        }
    };
    return result;
};
var generateHSB_S = (orientation, dir, alphaValue)=>{
    const result = {
        areaStyles: {},
        areaGradientStyles: {
            background: [
                "linear-gradient(to ".concat(orientation[Number(!dir)], ",hsla(0,0%,0%,").concat(alphaValue, "),hsla(0,0%,0%,0))"),
                "linear-gradient(to ".concat(orientation[Number(dir)], ",hsla(0,100%,50%,").concat(alphaValue, "),hsla(60,100%,50%,").concat(alphaValue, "),hsla(120,100%,50%,").concat(alphaValue, "),hsla(180,100%,50%,").concat(alphaValue, "),hsla(240,100%,50%,").concat(alphaValue, "),hsla(300,100%,50%,").concat(alphaValue, "),hsla(359,100%,50%,").concat(alphaValue, "))"),
                "linear-gradient(to ".concat(orientation[Number(!dir)], ",hsl(0,0%,0%),hsl(0,0%,100%))")
            ].join(",")
        }
    };
    return result;
};
var generateHSB_B = (orientation, dir, alphaValue)=>{
    const result = {
        areaStyles: {},
        areaGradientStyles: {
            background: [
                "linear-gradient(to ".concat(orientation[Number(!dir)], ",hsla(0,0%,100%,").concat(alphaValue, "),hsla(0,0%,100%,0))"),
                "linear-gradient(to ".concat(orientation[Number(dir)], ",hsla(0,100%,50%,").concat(alphaValue, "),hsla(60,100%,50%,").concat(alphaValue, "),hsla(120,100%,50%,").concat(alphaValue, "),hsla(180,100%,50%,").concat(alphaValue, "),hsla(240,100%,50%,").concat(alphaValue, "),hsla(300,100%,50%,").concat(alphaValue, "),hsla(359,100%,50%,").concat(alphaValue, "))"),
                "#000"
            ].join(",")
        }
    };
    return result;
};
// src/area-gradient.ts
function getColorAreaGradient(color, options) {
    const { xChannel, yChannel, dir: dirProp = "ltr" } = options;
    const { zChannel } = color.getColorAxes({
        xChannel,
        yChannel
    });
    const zValue = color.getChannelValue(zChannel);
    const { minValue: zMin, maxValue: zMax } = color.getChannelRange(zChannel);
    const orientation = [
        "top",
        dirProp === "rtl" ? "left" : "right"
    ];
    let dir = false;
    let background = {
        areaStyles: {},
        areaGradientStyles: {}
    };
    let alphaValue = (zValue - zMin) / (zMax - zMin);
    let isHSL = color.getFormat() === "hsla";
    switch(zChannel){
        case "red":
            {
                dir = xChannel === "green";
                background = generateRGB_R(orientation, dir, zValue);
                break;
            }
        case "green":
            {
                dir = xChannel === "red";
                background = generateRGB_G(orientation, dir, zValue);
                break;
            }
        case "blue":
            {
                dir = xChannel === "red";
                background = generateRGB_B(orientation, dir, zValue);
                break;
            }
        case "hue":
            {
                dir = xChannel !== "saturation";
                if (isHSL) {
                    background = generateHSL_H(orientation, dir, zValue);
                } else {
                    background = generateHSB_H(orientation, dir, zValue);
                }
                break;
            }
        case "saturation":
            {
                dir = xChannel === "hue";
                if (isHSL) {
                    background = generateHSL_S(orientation, dir, alphaValue);
                } else {
                    background = generateHSB_S(orientation, dir, alphaValue);
                }
                break;
            }
        case "brightness":
            {
                dir = xChannel === "hue";
                background = generateHSB_B(orientation, dir, alphaValue);
                break;
            }
        case "lightness":
            {
                dir = xChannel === "hue";
                background = generateHSL_L(orientation, dir, zValue);
                break;
            }
    }
    return background;
}
var isEqualObject = (a, b)=>{
    if (Object.keys(a).length !== Object.keys(b).length) return false;
    for(let key in a)if (a[key] !== b[key]) return false;
    return true;
};
var Color = class {
    toHexInt() {
        return this.toFormat("rgba").toHexInt();
    }
    getChannelValue(channel) {
        if (channel in this) return this[channel];
        throw new Error("Unsupported color channel: " + channel);
    }
    getChannelValuePercent(channel, valueToCheck) {
        const value = valueToCheck !== null && valueToCheck !== void 0 ? valueToCheck : this.getChannelValue(channel);
        const { minValue, maxValue } = this.getChannelRange(channel);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValuePercent"])(value, minValue, maxValue);
    }
    getChannelPercentValue(channel, percentToCheck) {
        const { minValue, maxValue, step } = this.getChannelRange(channel);
        const percentValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPercentValue"])(percentToCheck, minValue, maxValue, step);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snapValueToStep"])(percentValue, minValue, maxValue, step);
    }
    withChannelValue(channel, value) {
        const { minValue, maxValue } = this.getChannelRange(channel);
        if (channel in this) {
            let clone = this.clone();
            clone[channel] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(value, minValue, maxValue);
            return clone;
        }
        throw new Error("Unsupported color channel: " + channel);
    }
    getColorAxes(xyChannels) {
        let { xChannel, yChannel } = xyChannels;
        let xCh = xChannel || this.getChannels().find((c)=>c !== yChannel);
        let yCh = yChannel || this.getChannels().find((c)=>c !== xCh);
        let zCh = this.getChannels().find((c)=>c !== xCh && c !== yCh);
        return {
            xChannel: xCh,
            yChannel: yCh,
            zChannel: zCh
        };
    }
    incrementChannel(channel, stepSize) {
        const { minValue, maxValue, step } = this.getChannelRange(channel);
        const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snapValueToStep"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(this.getChannelValue(channel) + stepSize, minValue, maxValue), minValue, maxValue, step);
        return this.withChannelValue(channel, value);
    }
    decrementChannel(channel, stepSize) {
        return this.incrementChannel(channel, -stepSize);
    }
    isEqual(color) {
        const isSame = isEqualObject(this.toJSON(), color.toJSON());
        return isSame && this.getChannelValue("alpha") === color.getChannelValue("alpha");
    }
};
var HEX_COLOR_REGEX = /^#[\da-f]+$/i;
var RGB_COLOR_REGEX = /^rgba?\((.*)\)$/;
var HEX_STARTING_REGEX = /[^#]/gi;
var _RGBColor = class _RGBColor extends Color {
    static parse(value) {
        let colors = [];
        if (HEX_COLOR_REGEX.test(value) && [
            4,
            5,
            7,
            9
        ].includes(value.length)) {
            const values = (value.length < 6 ? value.replace(HEX_STARTING_REGEX, "$&$&") : value).slice(1).split("");
            while(values.length > 0){
                colors.push(parseInt(values.splice(0, 2).join(""), 16));
            }
            colors[3] = colors[3] !== void 0 ? colors[3] / 255 : void 0;
        }
        const match = value.match(RGB_COLOR_REGEX);
        if (match === null || match === void 0 ? void 0 : match[1]) {
            colors = match[1].split(",").map((value2)=>Number(value2.trim())).map((num, i)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(num, 0, i < 3 ? 255 : 1));
        }
        var _colors_;
        return colors.length < 3 ? void 0 : new _RGBColor(colors[0], colors[1], colors[2], (_colors_ = colors[3]) !== null && _colors_ !== void 0 ? _colors_ : 1);
    }
    toString(format) {
        switch(format){
            case "hex":
                return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0")).toUpperCase();
            case "hexa":
                return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0") + Math.round(this.alpha * 255).toString(16).padStart(2, "0")).toUpperCase();
            case "rgb":
                return "rgb(".concat(this.red, ", ").concat(this.green, ", ").concat(this.blue, ")");
            case "css":
            case "rgba":
                return "rgba(".concat(this.red, ", ").concat(this.green, ", ").concat(this.blue, ", ").concat(this.alpha, ")");
            case "hsl":
                return this.toHSL().toString("hsl");
            case "hsb":
                return this.toHSB().toString("hsb");
            default:
                return this.toFormat(format).toString(format);
        }
    }
    toFormat(format) {
        switch(format){
            case "rgba":
                return this;
            case "hsba":
                return this.toHSB();
            case "hsla":
                return this.toHSL();
            default:
                throw new Error("Unsupported color conversion: rgb -> " + format);
        }
    }
    toHexInt() {
        return this.red << 16 | this.green << 8 | this.blue;
    }
    /**
   * Converts an RGB color value to HSB.
   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
   * @returns An HSBColor object.
   */ toHSB() {
        const red = this.red / 255;
        const green = this.green / 255;
        const blue = this.blue / 255;
        const min = Math.min(red, green, blue);
        const brightness = Math.max(red, green, blue);
        const chroma = brightness - min;
        const saturation = brightness === 0 ? 0 : chroma / brightness;
        let hue = 0;
        if (chroma !== 0) {
            switch(brightness){
                case red:
                    hue = (green - blue) / chroma + (green < blue ? 6 : 0);
                    break;
                case green:
                    hue = (blue - red) / chroma + 2;
                    break;
                case blue:
                    hue = (red - green) / chroma + 4;
                    break;
            }
            hue /= 6;
        }
        return new HSBColor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(hue * 360, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(saturation * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(brightness * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.alpha, 2));
    }
    /**
   * Converts an RGB color value to HSL.
   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
   * @returns An HSLColor object.
   */ toHSL() {
        const red = this.red / 255;
        const green = this.green / 255;
        const blue = this.blue / 255;
        const min = Math.min(red, green, blue);
        const max = Math.max(red, green, blue);
        const lightness = (max + min) / 2;
        const chroma = max - min;
        let hue = -1;
        let saturation = -1;
        if (chroma === 0) {
            hue = saturation = 0;
        } else {
            saturation = chroma / (lightness < 0.5 ? max + min : 2 - max - min);
            switch(max){
                case red:
                    hue = (green - blue) / chroma + (green < blue ? 6 : 0);
                    break;
                case green:
                    hue = (blue - red) / chroma + 2;
                    break;
                case blue:
                    hue = (red - green) / chroma + 4;
                    break;
            }
            hue /= 6;
        }
        return new HSLColor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(hue * 360, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(saturation * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(lightness * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.alpha, 2));
    }
    clone() {
        return new _RGBColor(this.red, this.green, this.blue, this.alpha);
    }
    getChannelFormatOptions(channel) {
        switch(channel){
            case "red":
            case "green":
            case "blue":
                return {
                    style: "decimal"
                };
            case "alpha":
                return {
                    style: "percent"
                };
            default:
                throw new Error("Unknown color channel: " + channel);
        }
    }
    formatChannelValue(channel, locale) {
        let options = this.getChannelFormatOptions(channel);
        let value = this.getChannelValue(channel);
        return new Intl.NumberFormat(locale, options).format(value);
    }
    getChannelRange(channel) {
        switch(channel){
            case "red":
            case "green":
            case "blue":
                return {
                    minValue: 0,
                    maxValue: 255,
                    step: 1,
                    pageSize: 17
                };
            case "alpha":
                return {
                    minValue: 0,
                    maxValue: 1,
                    step: 0.01,
                    pageSize: 0.1
                };
            default:
                throw new Error("Unknown color channel: " + channel);
        }
    }
    toJSON() {
        return {
            r: this.red,
            g: this.green,
            b: this.blue,
            a: this.alpha
        };
    }
    getFormat() {
        return "rgba";
    }
    getChannels() {
        return _RGBColor.colorChannels;
    }
    constructor(red, green, blue, alpha){
        super();
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.alpha = alpha;
    }
};
__publicField(_RGBColor, "colorChannels", [
    "red",
    "green",
    "blue"
]);
var RGBColor = _RGBColor;
// src/hsl-color.ts
var HSL_REGEX = /hsl\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsla\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
var _HSLColor = class _HSLColor extends Color {
    static parse(value) {
        let m;
        if (m = value.match(HSL_REGEX)) {
            var _m_;
            const [h, s, l, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(",").map((n)=>Number(n.trim().replace("%", "")));
            return new _HSLColor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mod"])(h, 360), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(s, 0, 100), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(l, 0, 100), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(a !== null && a !== void 0 ? a : 1, 0, 1));
        }
    }
    toString(format) {
        switch(format){
            case "hex":
                return this.toRGB().toString("hex");
            case "hexa":
                return this.toRGB().toString("hexa");
            case "hsl":
                return "hsl(".concat(this.hue, ", ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.saturation, 2), "%, ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.lightness, 2), "%)");
            case "css":
            case "hsla":
                return "hsla(".concat(this.hue, ", ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.saturation, 2), "%, ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.lightness, 2), "%, ").concat(this.alpha, ")");
            case "hsb":
                return this.toHSB().toString("hsb");
            case "rgb":
                return this.toRGB().toString("rgb");
            default:
                return this.toFormat(format).toString(format);
        }
    }
    toFormat(format) {
        switch(format){
            case "hsla":
                return this;
            case "hsba":
                return this.toHSB();
            case "rgba":
                return this.toRGB();
            default:
                throw new Error("Unsupported color conversion: hsl -> " + format);
        }
    }
    /**
   * Converts a HSL color to HSB.
   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.
   * @returns An HSBColor object.
   */ toHSB() {
        let saturation = this.saturation / 100;
        let lightness = this.lightness / 100;
        let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);
        saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);
        return new HSBColor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.hue, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(saturation * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(brightness * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.alpha, 2));
    }
    /**
   * Converts a HSL color to RGB.
   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.
   * @returns An RGBColor object.
   */ toRGB() {
        let hue = this.hue;
        let saturation = this.saturation / 100;
        let lightness = this.lightness / 100;
        let a = saturation * Math.min(lightness, 1 - lightness);
        let fn = function(n) {
            let k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + hue / 30) % 12;
            return lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        };
        return new RGBColor(Math.round(fn(0) * 255), Math.round(fn(8) * 255), Math.round(fn(4) * 255), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.alpha, 2));
    }
    clone() {
        return new _HSLColor(this.hue, this.saturation, this.lightness, this.alpha);
    }
    getChannelFormatOptions(channel) {
        switch(channel){
            case "hue":
                return {
                    style: "unit",
                    unit: "degree",
                    unitDisplay: "narrow"
                };
            case "saturation":
            case "lightness":
            case "alpha":
                return {
                    style: "percent"
                };
            default:
                throw new Error("Unknown color channel: " + channel);
        }
    }
    formatChannelValue(channel, locale) {
        let options = this.getChannelFormatOptions(channel);
        let value = this.getChannelValue(channel);
        if (channel === "saturation" || channel === "lightness") {
            value /= 100;
        }
        return new Intl.NumberFormat(locale, options).format(value);
    }
    getChannelRange(channel) {
        switch(channel){
            case "hue":
                return {
                    minValue: 0,
                    maxValue: 360,
                    step: 1,
                    pageSize: 15
                };
            case "saturation":
            case "lightness":
                return {
                    minValue: 0,
                    maxValue: 100,
                    step: 1,
                    pageSize: 10
                };
            case "alpha":
                return {
                    minValue: 0,
                    maxValue: 1,
                    step: 0.01,
                    pageSize: 0.1
                };
            default:
                throw new Error("Unknown color channel: " + channel);
        }
    }
    toJSON() {
        return {
            h: this.hue,
            s: this.saturation,
            l: this.lightness,
            a: this.alpha
        };
    }
    getFormat() {
        return "hsla";
    }
    getChannels() {
        return _HSLColor.colorChannels;
    }
    constructor(hue, saturation, lightness, alpha){
        super();
        this.hue = hue;
        this.saturation = saturation;
        this.lightness = lightness;
        this.alpha = alpha;
    }
};
__publicField(_HSLColor, "colorChannels", [
    "hue",
    "saturation",
    "lightness"
]);
var HSLColor = _HSLColor;
// src/hsb-color.ts
var HSB_REGEX = /hsb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
var _HSBColor = class _HSBColor extends Color {
    static parse(value) {
        let m;
        if (m = value.match(HSB_REGEX)) {
            var _m_;
            const [h, s, b, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(",").map((n)=>Number(n.trim().replace("%", "")));
            return new _HSBColor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mod"])(h, 360), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(s, 0, 100), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(b, 0, 100), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(a !== null && a !== void 0 ? a : 1, 0, 1));
        }
    }
    toString(format) {
        switch(format){
            case "css":
                return this.toHSL().toString("css");
            case "hex":
                return this.toRGB().toString("hex");
            case "hexa":
                return this.toRGB().toString("hexa");
            case "hsb":
                return "hsb(".concat(this.hue, ", ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.saturation, 2), "%, ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.brightness, 2), "%)");
            case "hsba":
                return "hsba(".concat(this.hue, ", ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.saturation, 2), "%, ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.brightness, 2), "%, ").concat(this.alpha, ")");
            case "hsl":
                return this.toHSL().toString("hsl");
            case "rgb":
                return this.toRGB().toString("rgb");
            default:
                return this.toFormat(format).toString(format);
        }
    }
    toFormat(format) {
        switch(format){
            case "hsba":
                return this;
            case "hsla":
                return this.toHSL();
            case "rgba":
                return this.toRGB();
            default:
                throw new Error("Unsupported color conversion: hsb -> " + format);
        }
    }
    /**
   * Converts a HSB color to HSL.
   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.
   * @returns An HSLColor object.
   */ toHSL() {
        let saturation = this.saturation / 100;
        let brightness = this.brightness / 100;
        let lightness = brightness * (1 - saturation / 2);
        saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);
        return new HSLColor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.hue, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(saturation * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(lightness * 100, 2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.alpha, 2));
    }
    /**
   * Converts a HSV color value to RGB.
   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.
   * @returns An RGBColor object.
   */ toRGB() {
        let hue = this.hue;
        let saturation = this.saturation / 100;
        let brightness = this.brightness / 100;
        let fn = function(n) {
            let k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + hue / 60) % 6;
            return brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);
        };
        return new RGBColor(Math.round(fn(5) * 255), Math.round(fn(3) * 255), Math.round(fn(1) * 255), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFixedNumber"])(this.alpha, 2));
    }
    clone() {
        return new _HSBColor(this.hue, this.saturation, this.brightness, this.alpha);
    }
    getChannelFormatOptions(channel) {
        switch(channel){
            case "hue":
                return {
                    style: "unit",
                    unit: "degree",
                    unitDisplay: "narrow"
                };
            case "saturation":
            case "brightness":
            case "alpha":
                return {
                    style: "percent"
                };
            default:
                throw new Error("Unknown color channel: " + channel);
        }
    }
    formatChannelValue(channel, locale) {
        let options = this.getChannelFormatOptions(channel);
        let value = this.getChannelValue(channel);
        if (channel === "saturation" || channel === "brightness") {
            value /= 100;
        }
        return new Intl.NumberFormat(locale, options).format(value);
    }
    getChannelRange(channel) {
        switch(channel){
            case "hue":
                return {
                    minValue: 0,
                    maxValue: 360,
                    step: 1,
                    pageSize: 15
                };
            case "saturation":
            case "brightness":
                return {
                    minValue: 0,
                    maxValue: 100,
                    step: 1,
                    pageSize: 10
                };
            case "alpha":
                return {
                    minValue: 0,
                    maxValue: 1,
                    step: 0.01,
                    pageSize: 0.1
                };
            default:
                throw new Error("Unknown color channel: " + channel);
        }
    }
    toJSON() {
        return {
            h: this.hue,
            s: this.saturation,
            b: this.brightness,
            a: this.alpha
        };
    }
    getFormat() {
        return "hsba";
    }
    getChannels() {
        return _HSBColor.colorChannels;
    }
    constructor(hue, saturation, brightness, alpha){
        super();
        this.hue = hue;
        this.saturation = saturation;
        this.brightness = brightness;
        this.alpha = alpha;
    }
};
__publicField(_HSBColor, "colorChannels", [
    "hue",
    "saturation",
    "brightness"
]);
var HSBColor = _HSBColor;
// src/native-color.ts
var nativeColors = "aliceblue:f0f8ff,antiquewhite:faebd7,aqua:00ffff,aquamarine:7fffd4,azure:f0ffff,beige:f5f5dc,bisque:ffe4c4,black:000000,blanchedalmond:ffebcd,blue:0000ff,blueviolet:8a2be2,brown:a52a2a,burlywood:deb887,cadetblue:5f9ea0,chartreuse:7fff00,chocolate:d2691e,coral:ff7f50,cornflowerblue:6495ed,cornsilk:fff8dc,crimson:dc143c,cyan:00ffff,darkblue:00008b,darkcyan:008b8b,darkgoldenrod:b8860b,darkgray:a9a9a9,darkgreen:006400,darkkhaki:bdb76b,darkmagenta:8b008b,darkolivegreen:556b2f,darkorange:ff8c00,darkorchid:9932cc,darkred:8b0000,darksalmon:e9967a,darkseagreen:8fbc8f,darkslateblue:483d8b,darkslategray:2f4f4f,darkturquoise:00ced1,darkviolet:9400d3,deeppink:ff1493,deepskyblue:00bfff,dimgray:696969,dodgerblue:1e90ff,firebrick:b22222,floralwhite:fffaf0,forestgreen:228b22,fuchsia:ff00ff,gainsboro:dcdcdc,ghostwhite:f8f8ff,gold:ffd700,goldenrod:daa520,gray:808080,green:008000,greenyellow:adff2f,honeydew:f0fff0,hotpink:ff69b4,indianred:cd5c5c,indigo:4b0082,ivory:fffff0,khaki:f0e68c,lavender:e6e6fa,lavenderblush:fff0f5,lawngreen:7cfc00,lemonchiffon:fffacd,lightblue:add8e6,lightcoral:f08080,lightcyan:e0ffff,lightgoldenrodyellow:fafad2,lightgrey:d3d3d3,lightgreen:90ee90,lightpink:ffb6c1,lightsalmon:ffa07a,lightseagreen:20b2aa,lightskyblue:87cefa,lightslategray:778899,lightsteelblue:b0c4de,lightyellow:ffffe0,lime:00ff00,limegreen:32cd32,linen:faf0e6,magenta:ff00ff,maroon:800000,mediumaquamarine:66cdaa,mediumblue:0000cd,mediumorchid:ba55d3,mediumpurple:9370d8,mediumseagreen:3cb371,mediumslateblue:7b68ee,mediumspringgreen:00fa9a,mediumturquoise:48d1cc,mediumvioletred:c71585,midnightblue:191970,mintcream:f5fffa,mistyrose:ffe4e1,moccasin:ffe4b5,navajowhite:ffdead,navy:000080,oldlace:fdf5e6,olive:808000,olivedrab:6b8e23,orange:ffa500,orangered:ff4500,orchid:da70d6,palegoldenrod:eee8aa,palegreen:98fb98,paleturquoise:afeeee,palevioletred:d87093,papayawhip:ffefd5,peachpuff:ffdab9,peru:cd853f,pink:ffc0cb,plum:dda0dd,powderblue:b0e0e6,purple:800080,rebeccapurple:663399,red:ff0000,rosybrown:bc8f8f,royalblue:4169e1,saddlebrown:8b4513,salmon:fa8072,sandybrown:f4a460,seagreen:2e8b57,seashell:fff5ee,sienna:a0522d,silver:c0c0c0,skyblue:87ceeb,slateblue:6a5acd,slategray:708090,snow:fffafa,springgreen:00ff7f,steelblue:4682b4,tan:d2b48c,teal:008080,thistle:d8bfd8,tomato:ff6347,turquoise:40e0d0,violet:ee82ee,wheat:f5deb3,white:ffffff,whitesmoke:f5f5f5,yellow:ffff00,yellowgreen:9acd32";
var makeMap = (str)=>{
    const map = /* @__PURE__ */ new Map();
    const list = str.split(",");
    for(let i = 0; i < list.length; i++){
        const [key, val] = list[i].split(":");
        map.set(key, "#".concat(val));
        if (key.includes("gray")) map.set(key.replace("gray", "grey"), "#".concat(val));
    }
    return map;
};
var nativeColorMap = makeMap(nativeColors);
// src/parse-color.ts
var parseColor = (value)=>{
    if (nativeColorMap.has(value)) {
        return parseColor(nativeColorMap.get(value));
    }
    const result = RGBColor.parse(value) || HSBColor.parse(value) || HSLColor.parse(value);
    if (!result) {
        var _Error_captureStackTrace, _Error;
        const error = new Error("Invalid color value: " + value);
        (_Error_captureStackTrace = (_Error = Error).captureStackTrace) === null || _Error_captureStackTrace === void 0 ? void 0 : _Error_captureStackTrace.call(_Error, error, parseColor);
        throw error;
    }
    return result;
};
var normalizeColor = (v)=>{
    return typeof v === "string" ? parseColor(v) : v;
};
;
}),
"[project]/node_modules/@zag-js/color-picker/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "areaProps",
    ()=>areaProps,
    "channelProps",
    ()=>channelProps,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "parse",
    ()=>parse,
    "props",
    ()=>props,
    "splitAreaProps",
    ()=>splitAreaProps,
    "splitChannelProps",
    ()=>splitChannelProps,
    "splitProps",
    ()=>splitProps,
    "splitSwatchProps",
    ()=>splitSwatchProps,
    "splitSwatchTriggerProps",
    ()=>splitSwatchTriggerProps,
    "splitTransparencyGridProps",
    ()=>splitTransparencyGridProps,
    "swatchProps",
    ()=>swatchProps,
    "swatchTriggerProps",
    ()=>swatchTriggerProps,
    "transparencyGridProps",
    ()=>transparencyGridProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/color-utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
// src/color-picker.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("color-picker", [
    "root",
    "label",
    "control",
    "trigger",
    "positioner",
    "content",
    "area",
    "areaThumb",
    "valueText",
    "areaBackground",
    "channelSlider",
    "channelSliderLabel",
    "channelSliderTrack",
    "channelSliderThumb",
    "channelSliderValueText",
    "channelInput",
    "transparencyGrid",
    "swatchGroup",
    "swatchTrigger",
    "swatchIndicator",
    "swatch",
    "eyeDropperTrigger",
    "formatTrigger",
    "formatSelect"
]);
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "color-picker:".concat(ctx.id);
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "color-picker:".concat(ctx.id, ":label");
};
var getHiddenInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_hiddenInput;
    return (_ctx_ids_hiddenInput = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.hiddenInput) !== null && _ctx_ids_hiddenInput !== void 0 ? _ctx_ids_hiddenInput : "color-picker:".concat(ctx.id, ":hidden-input");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "color-picker:".concat(ctx.id, ":control");
};
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "color-picker:".concat(ctx.id, ":trigger");
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "color-picker:".concat(ctx.id, ":content");
};
var getPositionerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_positioner;
    return (_ctx_ids_positioner = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.positioner) !== null && _ctx_ids_positioner !== void 0 ? _ctx_ids_positioner : "color-picker:".concat(ctx.id, ":positioner");
};
var getFormatSelectId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_formatSelect;
    return (_ctx_ids_formatSelect = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.formatSelect) !== null && _ctx_ids_formatSelect !== void 0 ? _ctx_ids_formatSelect : "color-picker:".concat(ctx.id, ":format-select");
};
var getAreaId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_area;
    return (_ctx_ids_area = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.area) !== null && _ctx_ids_area !== void 0 ? _ctx_ids_area : "color-picker:".concat(ctx.id, ":area");
};
var getAreaGradientId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_areaGradient;
    return (_ctx_ids_areaGradient = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.areaGradient) !== null && _ctx_ids_areaGradient !== void 0 ? _ctx_ids_areaGradient : "color-picker:".concat(ctx.id, ":area-gradient");
};
var getAreaThumbId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_areaThumb;
    return (_ctx_ids_areaThumb = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.areaThumb) !== null && _ctx_ids_areaThumb !== void 0 ? _ctx_ids_areaThumb : "color-picker:".concat(ctx.id, ":area-thumb");
};
var getChannelSliderTrackId = (ctx, channel)=>{
    var _ctx_ids_channelSliderTrack, _ctx_ids;
    var _ctx_ids_channelSliderTrack1;
    return (_ctx_ids_channelSliderTrack1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_channelSliderTrack = _ctx_ids.channelSliderTrack) === null || _ctx_ids_channelSliderTrack === void 0 ? void 0 : _ctx_ids_channelSliderTrack.call(_ctx_ids, channel)) !== null && _ctx_ids_channelSliderTrack1 !== void 0 ? _ctx_ids_channelSliderTrack1 : "color-picker:".concat(ctx.id, ":slider-track:").concat(channel);
};
var getChannelSliderThumbId = (ctx, channel)=>{
    var _ctx_ids_channelSliderThumb, _ctx_ids;
    var _ctx_ids_channelSliderThumb1;
    return (_ctx_ids_channelSliderThumb1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_channelSliderThumb = _ctx_ids.channelSliderThumb) === null || _ctx_ids_channelSliderThumb === void 0 ? void 0 : _ctx_ids_channelSliderThumb.call(_ctx_ids, channel)) !== null && _ctx_ids_channelSliderThumb1 !== void 0 ? _ctx_ids_channelSliderThumb1 : "color-picker:".concat(ctx.id, ":slider-thumb:").concat(channel);
};
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
var getAreaThumbEl = (ctx)=>ctx.getById(getAreaThumbId(ctx));
var getChannelSliderThumbEl = (ctx, channel)=>ctx.getById(getChannelSliderThumbId(ctx, channel));
var getFormatSelectEl = (ctx)=>ctx.getById(getFormatSelectId(ctx));
var getHiddenInputEl = (ctx)=>ctx.getById(getHiddenInputId(ctx));
var getAreaEl = (ctx)=>ctx.getById(getAreaId(ctx));
var getAreaValueFromPoint = (ctx, point, dir)=>{
    const areaEl = getAreaEl(ctx);
    if (!areaEl) return;
    const { getPercentValue } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRelativePoint"])(point, areaEl);
    return {
        x: getPercentValue({
            dir,
            orientation: "horizontal"
        }),
        y: getPercentValue({
            orientation: "vertical"
        })
    };
};
var getControlEl = (ctx)=>ctx.getById(getControlId(ctx));
var getTriggerEl = (ctx)=>ctx.getById(getTriggerId(ctx));
var getPositionerEl = (ctx)=>ctx.getById(getPositionerId(ctx));
var getChannelSliderTrackEl = (ctx, channel)=>ctx.getById(getChannelSliderTrackId(ctx, channel));
var getChannelSliderValueFromPoint = (ctx, point, channel, dir)=>{
    const trackEl = getChannelSliderTrackEl(ctx, channel);
    if (!trackEl) return;
    const { getPercentValue } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRelativePoint"])(point, trackEl);
    return {
        x: getPercentValue({
            dir,
            orientation: "horizontal"
        }),
        y: getPercentValue({
            orientation: "vertical"
        })
    };
};
var getChannelInputEls = (ctx)=>{
    return [
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getContentEl(ctx), "input[data-channel]"),
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getControlEl(ctx), "input[data-channel]")
    ];
};
function getChannelDisplayColor(color, channel) {
    switch(channel){
        case "hue":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseColor"])("hsl(".concat(color.getChannelValue("hue"), ", 100%, 50%)"));
        case "lightness":
        case "brightness":
        case "saturation":
        case "red":
        case "green":
        case "blue":
            return color.withChannelValue("alpha", 1);
        case "alpha":
            {
                return color;
            }
        default:
            throw new Error("Unknown color channel: " + channel);
    }
}
function getChannelValue(color, channel) {
    if (channel == null) return "";
    if (channel === "hex") {
        return color.toString("hex");
    }
    if (channel === "css") {
        return color.toString("css");
    }
    if (channel in color) {
        return color.getChannelValue(channel).toString();
    }
    const isHSL = color.getFormat() === "hsla";
    switch(channel){
        case "hue":
            return isHSL ? color.toFormat("hsla").getChannelValue("hue").toString() : color.toFormat("hsba").getChannelValue("hue").toString();
        case "saturation":
            return isHSL ? color.toFormat("hsla").getChannelValue("saturation").toString() : color.toFormat("hsba").getChannelValue("saturation").toString();
        case "lightness":
            return color.toFormat("hsla").getChannelValue("lightness").toString();
        case "brightness":
            return color.toFormat("hsba").getChannelValue("brightness").toString();
        case "red":
        case "green":
        case "blue":
            return color.toFormat("rgba").getChannelValue(channel).toString();
        default:
            return color.getChannelValue(channel).toString();
    }
}
function getChannelRange(color, channel) {
    switch(channel){
        case "hex":
            const minColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseColor"])("#000000");
            const maxColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseColor"])("#FFFFFF");
            return {
                minValue: minColor.toHexInt(),
                maxValue: maxColor.toHexInt(),
                pageSize: 10,
                step: 1
            };
        case "css":
            return void 0;
        case "hue":
        case "saturation":
        case "lightness":
            return color.toFormat("hsla").getChannelRange(channel);
        case "brightness":
            return color.toFormat("hsba").getChannelRange(channel);
        case "red":
        case "green":
        case "blue":
            return color.toFormat("rgba").getChannelRange(channel);
        default:
            return color.getChannelRange(channel);
    }
}
// src/utils/get-slider-background.ts
function getSliderBackgroundDirection(orientation, dir) {
    if (orientation === "vertical") {
        return "top";
    } else if (dir === "ltr") {
        return "right";
    } else {
        return "left";
    }
}
var getSliderBackground = (props2)=>{
    const { channel, value, dir, orientation } = props2;
    const bgDirection = getSliderBackgroundDirection(orientation, dir);
    const { minValue, maxValue } = value.getChannelRange(channel);
    switch(channel){
        case "hue":
            return "linear-gradient(to ".concat(bgDirection, ", rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)");
        case "lightness":
            {
                let start = value.withChannelValue(channel, minValue).toString("css");
                let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString("css");
                let end = value.withChannelValue(channel, maxValue).toString("css");
                return "linear-gradient(to ".concat(bgDirection, ", ").concat(start, ", ").concat(middle, ", ").concat(end, ")");
            }
        case "saturation":
        case "brightness":
        case "red":
        case "green":
        case "blue":
        case "alpha":
            {
                let start = value.withChannelValue(channel, minValue).toString("css");
                let end = value.withChannelValue(channel, maxValue).toString("css");
                return "linear-gradient(to ".concat(bgDirection, ", ").concat(start, ", ").concat(end, ")");
            }
        default:
            throw new Error("Unknown color channel: " + channel);
    }
};
// src/color-picker.connect.ts
function connect(service, normalize) {
    const { context, send, prop, computed, state, scope } = service;
    const value = context.get("value");
    const format = context.get("format");
    const areaValue = computed("areaValue");
    const valueAsString = computed("valueAsString");
    const disabled = computed("disabled");
    const interactive = computed("interactive");
    const dragging = state.hasTag("dragging");
    const open = state.hasTag("open");
    const focused = state.hasTag("focused");
    const getAreaChannels = (props2)=>{
        const channels = areaValue.getChannels();
        var _props2_xChannel, _props2_yChannel;
        return {
            xChannel: (_props2_xChannel = props2.xChannel) !== null && _props2_xChannel !== void 0 ? _props2_xChannel : channels[1],
            yChannel: (_props2_yChannel = props2.yChannel) !== null && _props2_yChannel !== void 0 ? _props2_yChannel : channels[2]
        };
    };
    const currentPlacement = context.get("currentPlacement");
    const popperStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementStyles"])({
        ...prop("positioning"),
        placement: currentPlacement
    });
    function getSwatchTriggerState(props2) {
        const color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["normalizeColor"])(props2.value).toFormat(context.get("format"));
        return {
            value: color,
            valueAsString: color.toString("hex"),
            checked: color.isEqual(value),
            disabled: props2.disabled || !interactive
        };
    }
    return {
        dragging,
        open,
        valueAsString,
        value,
        inline: !!prop("inline"),
        setOpen (nextOpen) {
            if (prop("inline")) return;
            const open2 = state.hasTag("open");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "OPEN" : "CLOSE"
            });
        },
        setValue (value2) {
            send({
                type: "VALUE.SET",
                value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["normalizeColor"])(value2),
                src: "set-color"
            });
        },
        getChannelValue (channel) {
            return getChannelValue(value, channel);
        },
        getChannelValueText (channel, locale) {
            return value.formatChannelValue(channel, locale);
        },
        setChannelValue (channel, channelValue) {
            const color = value.withChannelValue(channel, channelValue);
            send({
                type: "VALUE.SET",
                value: color,
                src: "set-channel"
            });
        },
        format: context.get("format"),
        setFormat (format2) {
            const formatValue = value.toFormat(format2);
            send({
                type: "VALUE.SET",
                value: formatValue,
                src: "set-format"
            });
        },
        alpha: value.getChannelValue("alpha"),
        setAlpha (alphaValue) {
            const color = value.withChannelValue("alpha", alphaValue);
            send({
                type: "VALUE.SET",
                value: color,
                src: "set-alpha"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                style: {
                    "--value": value.toString("css")
                }
            });
        },
        getLabelProps () {
            return normalize.element({
                ...parts.label.attrs,
                dir: prop("dir"),
                id: getLabelId(scope),
                htmlFor: getHiddenInputId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                onClick (event) {
                    event.preventDefault();
                    const inputEl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["query"])(getControlEl(scope), "[data-channel=hex]");
                    inputEl === null || inputEl === void 0 ? void 0 : inputEl.focus({
                        preventScroll: true
                    });
                }
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                id: getControlId(scope),
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-state": open ? "open" : "closed",
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused)
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                id: getTriggerId(scope),
                dir: prop("dir"),
                disabled,
                "aria-label": "select color. current color is ".concat(valueAsString),
                "aria-controls": getContentId(scope),
                "aria-labelledby": getLabelId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-placement": currentPlacement,
                "aria-expanded": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(open),
                "data-state": open ? "open" : "closed",
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                type: "button",
                onClick () {
                    if (!interactive) return;
                    send({
                        type: "TRIGGER.CLICK"
                    });
                },
                onBlur () {
                    if (!interactive) return;
                    send({
                        type: "TRIGGER.BLUR"
                    });
                },
                style: {
                    position: "relative"
                }
            });
        },
        getPositionerProps () {
            return normalize.element({
                ...parts.positioner.attrs,
                id: getPositionerId(scope),
                dir: prop("dir"),
                style: popperStyles.floating
            });
        },
        getContentProps () {
            return normalize.element({
                ...parts.content.attrs,
                id: getContentId(scope),
                dir: prop("dir"),
                tabIndex: -1,
                "data-placement": currentPlacement,
                "data-state": open ? "open" : "closed",
                hidden: !open
            });
        },
        getValueTextProps () {
            return normalize.element({
                ...parts.valueText.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused)
            });
        },
        getAreaProps () {
            let props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            const { xChannel, yChannel } = getAreaChannels(props2);
            const { areaStyles } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getColorAreaGradient"])(areaValue, {
                xChannel,
                yChannel,
                dir: prop("dir")
            });
            return normalize.element({
                ...parts.area.attrs,
                id: getAreaId(scope),
                role: "group",
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                onPointerDown (event) {
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isModifierKey"])(event)) return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    const channel = {
                        xChannel,
                        yChannel
                    };
                    send({
                        type: "AREA.POINTER_DOWN",
                        point,
                        channel,
                        id: "area"
                    });
                    event.preventDefault();
                },
                style: {
                    position: "relative",
                    touchAction: "none",
                    forcedColorAdjust: "none",
                    ...areaStyles
                }
            });
        },
        getAreaBackgroundProps () {
            let props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            const { xChannel, yChannel } = getAreaChannels(props2);
            const { areaGradientStyles } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getColorAreaGradient"])(areaValue, {
                xChannel,
                yChannel,
                dir: prop("dir")
            });
            return normalize.element({
                ...parts.areaBackground.attrs,
                id: getAreaGradientId(scope),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                style: {
                    position: "relative",
                    touchAction: "none",
                    forcedColorAdjust: "none",
                    ...areaGradientStyles
                }
            });
        },
        getAreaThumbProps () {
            let props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            const { xChannel, yChannel } = getAreaChannels(props2);
            const channel = {
                xChannel,
                yChannel
            };
            const xPercent = areaValue.getChannelValuePercent(xChannel);
            const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);
            const isRtl = prop("dir") === "rtl";
            const finalXPercent = isRtl ? 1 - xPercent : xPercent;
            const xValue = areaValue.getChannelValue(xChannel);
            const yValue = areaValue.getChannelValue(yChannel);
            const color = areaValue.withChannelValue("alpha", 1).toString("css");
            return normalize.element({
                ...parts.areaThumb.attrs,
                id: getAreaThumbId(scope),
                dir: prop("dir"),
                tabIndex: disabled ? void 0 : 0,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                role: "slider",
                "aria-valuemin": 0,
                "aria-valuemax": 100,
                "aria-valuenow": xValue,
                "aria-label": "".concat(xChannel, " and ").concat(yChannel),
                "aria-roledescription": "2d slider",
                "aria-valuetext": "".concat(xChannel, " ").concat(xValue, ", ").concat(yChannel, " ").concat(yValue),
                style: {
                    position: "absolute",
                    left: "".concat(finalXPercent * 100, "%"),
                    top: "".concat(yPercent * 100, "%"),
                    transform: "translate(-50%, -50%)",
                    touchAction: "none",
                    forcedColorAdjust: "none",
                    "--color": color,
                    background: color
                },
                onFocus () {
                    if (!interactive) return;
                    send({
                        type: "AREA.FOCUS",
                        id: "area",
                        channel
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    const step = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventStep"])(event);
                    const keyMap = {
                        ArrowUp () {
                            send({
                                type: "AREA.ARROW_UP",
                                channel,
                                step
                            });
                        },
                        ArrowDown () {
                            send({
                                type: "AREA.ARROW_DOWN",
                                channel,
                                step
                            });
                        },
                        ArrowLeft () {
                            send({
                                type: "AREA.ARROW_LEFT",
                                channel,
                                step
                            });
                        },
                        ArrowRight () {
                            send({
                                type: "AREA.ARROW_RIGHT",
                                channel,
                                step
                            });
                        },
                        PageUp () {
                            send({
                                type: "AREA.PAGE_UP",
                                channel,
                                step
                            });
                        },
                        PageDown () {
                            send({
                                type: "AREA.PAGE_DOWN",
                                channel,
                                step
                            });
                        },
                        Escape (event2) {
                            event2.stopPropagation();
                        }
                    };
                    const exec = keyMap[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir")
                    })];
                    if (exec) {
                        exec(event);
                        event.preventDefault();
                    }
                }
            });
        },
        getTransparencyGridProps () {
            let props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            const { size = "12px" } = props2;
            return normalize.element({
                ...parts.transparencyGrid.attrs,
                style: {
                    "--size": size,
                    width: "100%",
                    height: "100%",
                    position: "absolute",
                    backgroundColor: "#fff",
                    backgroundImage: "conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)",
                    backgroundSize: "var(--size) var(--size)",
                    inset: "0px",
                    zIndex: "auto",
                    pointerEvents: "none"
                }
            });
        },
        getChannelSliderProps (props2) {
            const { orientation = "horizontal", channel, format: format2 } = props2;
            return normalize.element({
                ...parts.channelSlider.attrs,
                "data-channel": channel,
                "data-orientation": orientation,
                role: "presentation",
                onPointerDown (event) {
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isModifierKey"])(event)) return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    send({
                        type: "CHANNEL_SLIDER.POINTER_DOWN",
                        channel,
                        format: format2,
                        point,
                        id: channel,
                        orientation
                    });
                    event.preventDefault();
                },
                style: {
                    position: "relative",
                    touchAction: "none"
                }
            });
        },
        getChannelSliderTrackProps (props2) {
            const { orientation = "horizontal", channel, format: format2 } = props2;
            const normalizedValue = format2 ? value.toFormat(format2) : areaValue;
            return normalize.element({
                ...parts.channelSliderTrack.attrs,
                id: getChannelSliderTrackId(scope, channel),
                role: "group",
                "data-channel": channel,
                "data-orientation": orientation,
                style: {
                    position: "relative",
                    forcedColorAdjust: "none",
                    backgroundImage: getSliderBackground({
                        orientation,
                        channel,
                        dir: prop("dir"),
                        value: normalizedValue
                    })
                }
            });
        },
        getChannelSliderLabelProps (props2) {
            const { channel } = props2;
            return normalize.element({
                ...parts.channelSliderLabel.attrs,
                "data-channel": channel,
                onClick (event) {
                    var _scope_getById;
                    if (!interactive) return;
                    event.preventDefault();
                    const thumbId = getChannelSliderThumbId(scope, channel);
                    (_scope_getById = scope.getById(thumbId)) === null || _scope_getById === void 0 ? void 0 : _scope_getById.focus({
                        preventScroll: true
                    });
                },
                style: {
                    userSelect: "none",
                    WebkitUserSelect: "none"
                }
            });
        },
        getChannelSliderValueTextProps (props2) {
            return normalize.element({
                ...parts.channelSliderValueText.attrs,
                "data-channel": props2.channel
            });
        },
        getChannelSliderThumbProps (props2) {
            const { orientation = "horizontal", channel, format: format2 } = props2;
            const normalizedValue = format2 ? value.toFormat(format2) : areaValue;
            const channelRange = normalizedValue.getChannelRange(channel);
            const channelValue = normalizedValue.getChannelValue(channel);
            const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);
            const isRtl = prop("dir") === "rtl";
            const finalOffset = orientation === "horizontal" && isRtl ? 1 - offset : offset;
            const placementStyles = orientation === "horizontal" ? {
                left: "".concat(finalOffset * 100, "%"),
                top: "50%"
            } : {
                top: "".concat(offset * 100, "%"),
                left: "50%"
            };
            return normalize.element({
                ...parts.channelSliderThumb.attrs,
                id: getChannelSliderThumbId(scope, channel),
                role: "slider",
                "aria-label": channel,
                tabIndex: disabled ? void 0 : 0,
                "data-channel": channel,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": orientation,
                "aria-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "aria-orientation": orientation,
                "aria-valuemax": channelRange.maxValue,
                "aria-valuemin": channelRange.minValue,
                "aria-valuenow": channelValue,
                "aria-valuetext": "".concat(channel, " ").concat(channelValue),
                style: {
                    forcedColorAdjust: "none",
                    position: "absolute",
                    background: getChannelDisplayColor(areaValue, channel).toString("css"),
                    ...placementStyles
                },
                onFocus () {
                    if (!interactive) return;
                    send({
                        type: "CHANNEL_SLIDER.FOCUS",
                        channel
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    const step = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventStep"])(event) * channelRange.step;
                    const keyMap = {
                        ArrowUp () {
                            send({
                                type: "CHANNEL_SLIDER.ARROW_UP",
                                channel,
                                step
                            });
                        },
                        ArrowDown () {
                            send({
                                type: "CHANNEL_SLIDER.ARROW_DOWN",
                                channel,
                                step
                            });
                        },
                        ArrowLeft () {
                            send({
                                type: "CHANNEL_SLIDER.ARROW_LEFT",
                                channel,
                                step
                            });
                        },
                        ArrowRight () {
                            send({
                                type: "CHANNEL_SLIDER.ARROW_RIGHT",
                                channel,
                                step
                            });
                        },
                        PageUp () {
                            send({
                                type: "CHANNEL_SLIDER.PAGE_UP",
                                channel
                            });
                        },
                        PageDown () {
                            send({
                                type: "CHANNEL_SLIDER.PAGE_DOWN",
                                channel
                            });
                        },
                        Home () {
                            send({
                                type: "CHANNEL_SLIDER.HOME",
                                channel
                            });
                        },
                        End () {
                            send({
                                type: "CHANNEL_SLIDER.END",
                                channel
                            });
                        },
                        Escape (event2) {
                            event2.stopPropagation();
                        }
                    };
                    const exec = keyMap[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir")
                    })];
                    if (exec) {
                        exec(event);
                        event.preventDefault();
                    }
                }
            });
        },
        getChannelInputProps (props2) {
            const { channel } = props2;
            const isTextField = channel === "hex" || channel === "css";
            const channelRange = getChannelRange(value, channel);
            return normalize.input({
                ...parts.channelInput.attrs,
                dir: prop("dir"),
                type: isTextField ? "text" : "number",
                "data-channel": channel,
                "aria-label": channel,
                spellCheck: false,
                autoComplete: "off",
                disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                readOnly: prop("readOnly"),
                defaultValue: getChannelValue(value, channel),
                min: channelRange === null || channelRange === void 0 ? void 0 : channelRange.minValue,
                max: channelRange === null || channelRange === void 0 ? void 0 : channelRange.maxValue,
                step: channelRange === null || channelRange === void 0 ? void 0 : channelRange.step,
                onBeforeInput (event) {
                    if (isTextField || !interactive) return;
                    const value2 = event.currentTarget.value;
                    if (value2.match(/[^0-9.]/g)) {
                        event.preventDefault();
                    }
                },
                onFocus (event) {
                    if (!interactive) return;
                    send({
                        type: "CHANNEL_INPUT.FOCUS",
                        channel
                    });
                    event.currentTarget.select();
                },
                onBlur (event) {
                    if (!interactive) return;
                    const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;
                    send({
                        type: "CHANNEL_INPUT.BLUR",
                        channel,
                        value: value2,
                        isTextField
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    if (event.key === "Enter") {
                        const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;
                        send({
                            type: "CHANNEL_INPUT.CHANGE",
                            channel,
                            value: value2,
                            isTextField
                        });
                        event.preventDefault();
                    }
                },
                style: {
                    appearance: "none",
                    WebkitAppearance: "none",
                    MozAppearance: "textfield"
                }
            });
        },
        getHiddenInputProps () {
            return normalize.input({
                type: "text",
                disabled,
                name: prop("name"),
                tabIndex: -1,
                readOnly: prop("readOnly"),
                required: prop("required"),
                id: getHiddenInputId(scope),
                style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visuallyHiddenStyle"],
                defaultValue: valueAsString
            });
        },
        getEyeDropperTriggerProps () {
            return normalize.button({
                ...parts.eyeDropperTrigger.attrs,
                type: "button",
                dir: prop("dir"),
                disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                "aria-label": "Pick a color from the screen",
                onClick () {
                    if (!interactive) return;
                    send({
                        type: "EYEDROPPER.CLICK"
                    });
                }
            });
        },
        getSwatchGroupProps () {
            return normalize.element({
                ...parts.swatchGroup.attrs,
                role: "group"
            });
        },
        getSwatchTriggerState,
        getSwatchTriggerProps (props2) {
            const swatchState = getSwatchTriggerState(props2);
            return normalize.button({
                ...parts.swatchTrigger.attrs,
                disabled: swatchState.disabled,
                dir: prop("dir"),
                type: "button",
                "aria-label": "select ".concat(swatchState.valueAsString, " as the color"),
                "data-state": swatchState.checked ? "checked" : "unchecked",
                "data-value": swatchState.valueAsString,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(swatchState.disabled),
                onClick () {
                    if (swatchState.disabled) return;
                    send({
                        type: "SWATCH_TRIGGER.CLICK",
                        value: swatchState.value
                    });
                },
                style: {
                    "--color": swatchState.valueAsString,
                    position: "relative"
                }
            });
        },
        getSwatchIndicatorProps (props2) {
            const swatchState = getSwatchTriggerState(props2);
            return normalize.element({
                ...parts.swatchIndicator.attrs,
                dir: prop("dir"),
                hidden: !swatchState.checked
            });
        },
        getSwatchProps (props2) {
            const { respectAlpha = true } = props2;
            const swatchState = getSwatchTriggerState(props2);
            const color = swatchState.value.toString(respectAlpha ? "css" : "hex");
            return normalize.element({
                ...parts.swatch.attrs,
                dir: prop("dir"),
                "data-state": swatchState.checked ? "checked" : "unchecked",
                "data-value": swatchState.valueAsString,
                style: {
                    "--color": color,
                    position: "relative",
                    background: color
                }
            });
        },
        getFormatTriggerProps () {
            return normalize.button({
                ...parts.formatTrigger.attrs,
                dir: prop("dir"),
                type: "button",
                "aria-label": "change color format to ".concat(getNextFormat(format)),
                onClick (event) {
                    if (event.currentTarget.disabled) return;
                    const nextFormat = getNextFormat(format);
                    send({
                        type: "FORMAT.SET",
                        format: nextFormat,
                        src: "format-trigger"
                    });
                }
            });
        },
        getFormatSelectProps () {
            return normalize.select({
                ...parts.formatSelect.attrs,
                "aria-label": "change color format",
                dir: prop("dir"),
                defaultValue: prop("format"),
                disabled,
                onChange (event) {
                    const format2 = assertFormat(event.currentTarget.value);
                    send({
                        type: "FORMAT.SET",
                        format: format2,
                        src: "format-select"
                    });
                }
            });
        }
    };
}
var formats = [
    "hsba",
    "hsla",
    "rgba"
];
var formatRegex = new RegExp("^(".concat(formats.join("|"), ")$"));
function getNextFormat(format) {
    const index = formats.indexOf(format);
    var _formats_;
    return (_formats_ = formats[index + 1]) !== null && _formats_ !== void 0 ? _formats_ : formats[0];
}
function assertFormat(format) {
    if (formatRegex.test(format)) return format;
    throw new Error("Unsupported color format: ".concat(format));
}
var parse = (colorString)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseColor"])(colorString);
};
// src/utils/is-valid-hex.ts
var HEX_REGEX = /^[0-9a-fA-F]{3,8}$/;
function isValidHex(value) {
    return HEX_REGEX.test(value);
}
function prefixHex(value) {
    if (value.startsWith("#")) return value;
    if (isValidHex(value)) return "#".concat(value);
    return value;
}
// src/color-picker.machine.ts
var { and } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            dir: "ltr",
            defaultValue: parse("#000000"),
            defaultFormat: "rgba",
            openAutoFocus: true,
            ...props2,
            positioning: {
                placement: "bottom",
                ...props2.positioning
            }
        };
    },
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen") || prop("inline");
        return open ? "open" : "idle";
    },
    context (param) {
        let { prop, bindable, getContext } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    isEqual (a, b) {
                        return a.toString("css") === (b === null || b === void 0 ? void 0 : b.toString("css"));
                    },
                    hash (a) {
                        return a.toString("css");
                    },
                    onChange (value) {
                        var _prop;
                        const ctx = getContext();
                        const valueAsString = value.toString(ctx.get("format"));
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value,
                            valueAsString
                        });
                    }
                })),
            format: bindable(()=>({
                    defaultValue: prop("defaultFormat"),
                    value: prop("format"),
                    onChange (format) {
                        var _prop;
                        (_prop = prop("onFormatChange")) === null || _prop === void 0 ? void 0 : _prop({
                            format
                        });
                    }
                })),
            activeId: bindable(()=>({
                    defaultValue: null
                })),
            activeChannel: bindable(()=>({
                    defaultValue: null
                })),
            activeOrientation: bindable(()=>({
                    defaultValue: null
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                })),
            restoreFocus: bindable(()=>({
                    defaultValue: true
                })),
            currentPlacement: bindable(()=>({
                    defaultValue: void 0
                }))
        };
    },
    computed: {
        rtl: (param)=>{
            let { prop } = param;
            return prop("dir") === "rtl";
        },
        disabled: (param)=>{
            let { prop, context } = param;
            return !!prop("disabled") || context.get("fieldsetDisabled");
        },
        interactive: (param)=>{
            let { prop } = param;
            return !(prop("disabled") || prop("readOnly"));
        },
        valueAsString: (param)=>{
            let { context } = param;
            return context.get("value").toString(context.get("format"));
        },
        areaValue: (param)=>{
            let { context } = param;
            const format = context.get("format").startsWith("hsl") ? "hsla" : "hsba";
            return context.get("value").toFormat(format);
        }
    },
    effects: [
        "trackFormControl"
    ],
    watch (param) {
        let { prop, context, action, track } = param;
        track([
            ()=>context.hash("value")
        ], ()=>{
            action([
                "syncInputElements",
                "dispatchChangeEvent"
            ]);
        });
        track([
            ()=>context.get("format")
        ], ()=>{
            action([
                "syncFormatSelectElement"
            ]);
        });
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
    },
    on: {
        "VALUE.SET": {
            actions: [
                "setValue"
            ]
        },
        "FORMAT.SET": {
            actions: [
                "setFormat"
            ]
        },
        "CHANNEL_INPUT.CHANGE": {
            actions: [
                "setChannelColorFromInput"
            ]
        },
        "EYEDROPPER.CLICK": {
            actions: [
                "openEyeDropper"
            ]
        },
        "SWATCH_TRIGGER.CLICK": {
            actions: [
                "setValue"
            ]
        }
    },
    states: {
        idle: {
            tags: [
                "closed"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "open",
                    actions: [
                        "setInitialFocus"
                    ]
                },
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen",
                            "setInitialFocus"
                        ]
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen",
                            "setInitialFocus"
                        ]
                    }
                ],
                "CHANNEL_INPUT.FOCUS": {
                    target: "focused",
                    actions: [
                        "setActiveChannel"
                    ]
                }
            }
        },
        focused: {
            tags: [
                "closed",
                "focused"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "open",
                    actions: [
                        "setInitialFocus"
                    ]
                },
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen",
                            "setInitialFocus"
                        ]
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen",
                            "setInitialFocus"
                        ]
                    }
                ],
                "CHANNEL_INPUT.FOCUS": {
                    actions: [
                        "setActiveChannel"
                    ]
                },
                "CHANNEL_INPUT.BLUR": {
                    target: "idle",
                    actions: [
                        "setChannelColorFromInput"
                    ]
                },
                "TRIGGER.BLUR": {
                    target: "idle"
                }
            }
        },
        open: {
            tags: [
                "open"
            ],
            effects: [
                "trackPositioning",
                "trackDismissableElement"
            ],
            on: {
                "CONTROLLED.CLOSE": [
                    {
                        guard: "shouldRestoreFocus",
                        target: "focused",
                        actions: [
                            "setReturnFocus"
                        ]
                    },
                    {
                        target: "idle"
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "AREA.POINTER_DOWN": {
                    target: "open:dragging",
                    actions: [
                        "setActiveChannel",
                        "setAreaColorFromPoint",
                        "focusAreaThumb"
                    ]
                },
                "AREA.FOCUS": {
                    actions: [
                        "setActiveChannel"
                    ]
                },
                "CHANNEL_SLIDER.POINTER_DOWN": {
                    target: "open:dragging",
                    actions: [
                        "setActiveChannel",
                        "setChannelColorFromPoint",
                        "focusChannelThumb"
                    ]
                },
                "CHANNEL_SLIDER.FOCUS": {
                    actions: [
                        "setActiveChannel"
                    ]
                },
                "AREA.ARROW_LEFT": {
                    actions: [
                        "decrementAreaXChannel"
                    ]
                },
                "AREA.ARROW_RIGHT": {
                    actions: [
                        "incrementAreaXChannel"
                    ]
                },
                "AREA.ARROW_UP": {
                    actions: [
                        "incrementAreaYChannel"
                    ]
                },
                "AREA.ARROW_DOWN": {
                    actions: [
                        "decrementAreaYChannel"
                    ]
                },
                "AREA.PAGE_UP": {
                    actions: [
                        "incrementAreaXChannel"
                    ]
                },
                "AREA.PAGE_DOWN": {
                    actions: [
                        "decrementAreaXChannel"
                    ]
                },
                "CHANNEL_SLIDER.ARROW_LEFT": {
                    actions: [
                        "decrementChannel"
                    ]
                },
                "CHANNEL_SLIDER.ARROW_RIGHT": {
                    actions: [
                        "incrementChannel"
                    ]
                },
                "CHANNEL_SLIDER.ARROW_UP": {
                    actions: [
                        "incrementChannel"
                    ]
                },
                "CHANNEL_SLIDER.ARROW_DOWN": {
                    actions: [
                        "decrementChannel"
                    ]
                },
                "CHANNEL_SLIDER.PAGE_UP": {
                    actions: [
                        "incrementChannel"
                    ]
                },
                "CHANNEL_SLIDER.PAGE_DOWN": {
                    actions: [
                        "decrementChannel"
                    ]
                },
                "CHANNEL_SLIDER.HOME": {
                    actions: [
                        "setChannelToMin"
                    ]
                },
                "CHANNEL_SLIDER.END": {
                    actions: [
                        "setChannelToMax"
                    ]
                },
                "CHANNEL_INPUT.BLUR": {
                    actions: [
                        "setChannelColorFromInput"
                    ]
                },
                INTERACT_OUTSIDE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "shouldRestoreFocus",
                        target: "focused",
                        actions: [
                            "invokeOnClose",
                            "setReturnFocus"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "SWATCH_TRIGGER.CLICK": [
                    {
                        guard: and("isOpenControlled", "closeOnSelect"),
                        actions: [
                            "setValue",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "closeOnSelect",
                        target: "focused",
                        actions: [
                            "setValue",
                            "invokeOnClose",
                            "setReturnFocus"
                        ]
                    },
                    {
                        actions: [
                            "setValue"
                        ]
                    }
                ]
            }
        },
        "open:dragging": {
            tags: [
                "open"
            ],
            exit: [
                "clearActiveChannel"
            ],
            effects: [
                "trackPointerMove",
                "disableTextSelection",
                "trackPositioning",
                "trackDismissableElement"
            ],
            on: {
                "CONTROLLED.CLOSE": [
                    {
                        guard: "shouldRestoreFocus",
                        target: "focused",
                        actions: [
                            "setReturnFocus"
                        ]
                    },
                    {
                        target: "idle"
                    }
                ],
                "AREA.POINTER_MOVE": {
                    actions: [
                        "setAreaColorFromPoint",
                        "focusAreaThumb"
                    ]
                },
                "AREA.POINTER_UP": {
                    target: "open",
                    actions: [
                        "invokeOnChangeEnd"
                    ]
                },
                "CHANNEL_SLIDER.POINTER_MOVE": {
                    actions: [
                        "setChannelColorFromPoint",
                        "focusChannelThumb"
                    ]
                },
                "CHANNEL_SLIDER.POINTER_UP": {
                    target: "open",
                    actions: [
                        "invokeOnChangeEnd"
                    ]
                },
                INTERACT_OUTSIDE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "shouldRestoreFocus",
                        target: "focused",
                        actions: [
                            "invokeOnClose",
                            "setReturnFocus"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ]
            }
        }
    },
    implementations: {
        guards: {
            closeOnSelect: (param)=>{
                let { prop } = param;
                return !!prop("closeOnSelect");
            },
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") != null || !!prop("inline");
            },
            shouldRestoreFocus: (param)=>{
                let { context } = param;
                return !!context.get("restoreFocus");
            }
        },
        effects: {
            trackPositioning (param) {
                let { context, prop, scope } = param;
                if (prop("inline")) return;
                if (!context.get("currentPlacement")) {
                    var _prop;
                    context.set("currentPlacement", (_prop = prop("positioning")) === null || _prop === void 0 ? void 0 : _prop.placement);
                }
                const anchorEl = getTriggerEl(scope);
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(anchorEl, getPositionerEl2, {
                    ...prop("positioning"),
                    defer: true,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            trackDismissableElement (param) {
                let { context, scope, prop, send } = param;
                if (prop("inline")) return;
                const getContentEl2 = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDismissableElement"])(getContentEl2, {
                    exclude: getTriggerEl(scope),
                    defer: true,
                    onInteractOutside (event) {
                        var _prop;
                        (_prop = prop("onInteractOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                        if (event.defaultPrevented) return;
                        context.set("restoreFocus", !(event.detail.focusable || event.detail.contextmenu));
                    },
                    onPointerDownOutside: prop("onPointerDownOutside"),
                    onFocusOutside: prop("onFocusOutside"),
                    onDismiss () {
                        send({
                            type: "INTERACT_OUTSIDE"
                        });
                    }
                });
            },
            trackFormControl (param) {
                let { context, scope, send } = param;
                const inputEl = getHiddenInputEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(inputEl, {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        send({
                            type: "VALUE.SET",
                            value: context.initial("value"),
                            src: "form.reset"
                        });
                    }
                });
            },
            trackPointerMove (param) {
                let { context, scope, event, send } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackPointerMove"])(scope.getDoc(), {
                    onPointerMove (param) {
                        let { point } = param;
                        const type = context.get("activeId") === "area" ? "AREA.POINTER_MOVE" : "CHANNEL_SLIDER.POINTER_MOVE";
                        send({
                            type,
                            point,
                            format: event.format
                        });
                    },
                    onPointerUp () {
                        const type = context.get("activeId") === "area" ? "AREA.POINTER_UP" : "CHANNEL_SLIDER.POINTER_UP";
                        send({
                            type
                        });
                    }
                });
            },
            disableTextSelection (param) {
                let { scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["disableTextSelection"])({
                    doc: scope.getDoc(),
                    target: getContentEl(scope)
                });
            }
        },
        actions: {
            openEyeDropper (param) {
                let { scope, context } = param;
                const win = scope.getWin();
                const isSupported = "EyeDropper" in win;
                if (!isSupported) return;
                const picker = new win.EyeDropper();
                picker.open().then((param)=>{
                    let { sRGBHex } = param;
                    const format = context.get("value").getFormat();
                    const color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseColor"])(sRGBHex).toFormat(format);
                    context.set("value", color);
                }).catch(()=>void 0);
            },
            setActiveChannel (param) {
                let { context, event } = param;
                context.set("activeId", event.id);
                if (event.channel) context.set("activeChannel", event.channel);
                if (event.orientation) context.set("activeOrientation", event.orientation);
            },
            clearActiveChannel (param) {
                let { context } = param;
                context.set("activeChannel", null);
                context.set("activeId", null);
                context.set("activeOrientation", null);
            },
            setAreaColorFromPoint (param) {
                let { context, event, computed, scope, prop } = param;
                const v = event.format ? context.get("value").toFormat(event.format) : computed("areaValue");
                const { xChannel, yChannel } = event.channel || context.get("activeChannel");
                const percent = getAreaValueFromPoint(scope, event.point, prop("dir"));
                if (!percent) return;
                const xValue = v.getChannelPercentValue(xChannel, percent.x);
                const yValue = v.getChannelPercentValue(yChannel, 1 - percent.y);
                const color = v.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);
                context.set("value", color);
            },
            setChannelColorFromPoint (param) {
                let { context, event, computed, scope, prop } = param;
                const channel = event.channel || context.get("activeId");
                const normalizedValue = event.format ? context.get("value").toFormat(event.format) : computed("areaValue");
                const percent = getChannelSliderValueFromPoint(scope, event.point, channel, prop("dir"));
                if (!percent) return;
                const orientation = context.get("activeOrientation") || "horizontal";
                const channelPercent = orientation === "horizontal" ? percent.x : percent.y;
                const value = normalizedValue.getChannelPercentValue(channel, channelPercent);
                const color = normalizedValue.withChannelValue(channel, value);
                context.set("value", color);
            },
            setValue (param) {
                let { context, event } = param;
                context.set("value", event.value);
            },
            setFormat (param) {
                let { context, event } = param;
                context.set("format", event.format);
            },
            dispatchChangeEvent (param) {
                let { scope, computed } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dispatchInputValueEvent"])(getHiddenInputEl(scope), {
                    value: computed("valueAsString")
                });
            },
            syncInputElements (param) {
                let { context, scope } = param;
                syncChannelInputs(scope, context.get("value"));
            },
            invokeOnChangeEnd (param) {
                let { context, prop, computed } = param;
                var _prop;
                (_prop = prop("onValueChangeEnd")) === null || _prop === void 0 ? void 0 : _prop({
                    value: context.get("value"),
                    valueAsString: computed("valueAsString")
                });
            },
            setChannelColorFromInput (param) {
                let { context, event, scope, prop } = param;
                var _prop;
                const { channel, isTextField, value } = event;
                const currentAlpha = context.get("value").getChannelValue("alpha");
                let color;
                if (channel === "alpha") {
                    let valueAsNumber = parseFloat(value);
                    valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;
                    color = context.get("value").withChannelValue("alpha", valueAsNumber);
                } else if (isTextField) {
                    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tryCatch"])(()=>{
                        const parseValue = channel === "hex" ? prefixHex(value) : value;
                        return parse(parseValue).withChannelValue("alpha", currentAlpha);
                    }, ()=>context.get("value"));
                } else {
                    const current = context.get("value").toFormat(context.get("format"));
                    const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;
                    color = current.withChannelValue(channel, valueAsNumber);
                }
                syncChannelInputs(scope, context.get("value"), color);
                context.set("value", color);
                (_prop = prop("onValueChangeEnd")) === null || _prop === void 0 ? void 0 : _prop({
                    value: color,
                    valueAsString: color.toString(context.get("format"))
                });
            },
            incrementChannel (param) {
                let { context, event } = param;
                const color = context.get("value").incrementChannel(event.channel, event.step);
                context.set("value", color);
            },
            decrementChannel (param) {
                let { context, event } = param;
                const color = context.get("value").decrementChannel(event.channel, event.step);
                context.set("value", color);
            },
            incrementAreaXChannel (param) {
                let { context, event, computed } = param;
                const { xChannel } = event.channel;
                const color = computed("areaValue").incrementChannel(xChannel, event.step);
                context.set("value", color);
            },
            decrementAreaXChannel (param) {
                let { context, event, computed } = param;
                const { xChannel } = event.channel;
                const color = computed("areaValue").decrementChannel(xChannel, event.step);
                context.set("value", color);
            },
            incrementAreaYChannel (param) {
                let { context, event, computed } = param;
                const { yChannel } = event.channel;
                const color = computed("areaValue").incrementChannel(yChannel, event.step);
                context.set("value", color);
            },
            decrementAreaYChannel (param) {
                let { context, event, computed } = param;
                const { yChannel } = event.channel;
                const color = computed("areaValue").decrementChannel(yChannel, event.step);
                context.set("value", color);
            },
            setChannelToMax (param) {
                let { context, event } = param;
                const value = context.get("value");
                const range = value.getChannelRange(event.channel);
                const color = value.withChannelValue(event.channel, range.maxValue);
                context.set("value", color);
            },
            setChannelToMin (param) {
                let { context, event } = param;
                const value = context.get("value");
                const range = value.getChannelRange(event.channel);
                const color = value.withChannelValue(event.channel, range.minValue);
                context.set("value", color);
            },
            focusAreaThumb (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _getAreaThumbEl;
                    (_getAreaThumbEl = getAreaThumbEl(scope)) === null || _getAreaThumbEl === void 0 ? void 0 : _getAreaThumbEl.focus({
                        preventScroll: true
                    });
                });
            },
            focusChannelThumb (param) {
                let { event, scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _getChannelSliderThumbEl;
                    (_getChannelSliderThumbEl = getChannelSliderThumbEl(scope, event.channel)) === null || _getChannelSliderThumbEl === void 0 ? void 0 : _getChannelSliderThumbEl.focus({
                        preventScroll: true
                    });
                });
            },
            setInitialFocus (param) {
                let { prop, scope } = param;
                if (!prop("openAutoFocus")) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const element = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getInitialFocus"])({
                        root: getContentEl(scope),
                        getInitialEl: prop("initialFocusEl")
                    });
                    element === null || element === void 0 ? void 0 : element.focus({
                        preventScroll: true
                    });
                });
            },
            setReturnFocus (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _getTriggerEl;
                    (_getTriggerEl = getTriggerEl(scope)) === null || _getTriggerEl === void 0 ? void 0 : _getTriggerEl.focus({
                        preventScroll: true
                    });
                });
            },
            syncFormatSelectElement (param) {
                let { context, scope } = param;
                syncFormatSelect(scope, context.get("format"));
            },
            invokeOnOpen (param) {
                let { prop } = param;
                var _prop;
                if (prop("inline")) return;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true
                });
            },
            invokeOnClose (param) {
                let { prop } = param;
                var _prop;
                if (prop("inline")) return;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false
                });
            },
            toggleVisibility (param) {
                let { prop, event, send } = param;
                send({
                    type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
                    previousEvent: event
                });
            }
        }
    }
});
function syncChannelInputs(scope, currentValue, nextValue) {
    const channelInputEls = getChannelInputEls(scope);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
        channelInputEls.forEach((inputEl)=>{
            const channel = inputEl.dataset.channel;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(inputEl, getChannelValue(nextValue || currentValue, channel));
        });
    });
}
function syncFormatSelect(scope, format) {
    const selectEl = getFormatSelectEl(scope);
    if (!selectEl) return;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(selectEl, format));
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "closeOnSelect",
    "dir",
    "disabled",
    "format",
    "defaultFormat",
    "getRootNode",
    "id",
    "ids",
    "initialFocusEl",
    "inline",
    "name",
    "positioning",
    "onFocusOutside",
    "onFormatChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onValueChange",
    "onValueChangeEnd",
    "defaultOpen",
    "open",
    "positioning",
    "required",
    "readOnly",
    "value",
    "defaultValue",
    "invalid",
    "openAutoFocus"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var areaProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "xChannel",
    "yChannel"
]);
var splitAreaProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(areaProps);
var channelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "channel",
    "orientation"
]);
var splitChannelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(channelProps);
var swatchTriggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value",
    "disabled"
]);
var splitSwatchTriggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(swatchTriggerProps);
var swatchProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value",
    "respectAlpha"
]);
var splitSwatchProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(swatchProps);
var transparencyGridProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "size"
]);
var splitTransparencyGridProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(transparencyGridProps);
;
}),
"[project]/node_modules/@zag-js/focus-trap/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "FocusTrap",
    ()=>FocusTrap,
    "trapFocus",
    ()=>trapFocus
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
;
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var activeFocusTraps = {
    activateTrap (trapStack, trap) {
        if (trapStack.length > 0) {
            const activeTrap = trapStack[trapStack.length - 1];
            if (activeTrap !== trap) {
                activeTrap.pause();
            }
        }
        const trapIndex = trapStack.indexOf(trap);
        if (trapIndex === -1) {
            trapStack.push(trap);
        } else {
            trapStack.splice(trapIndex, 1);
            trapStack.push(trap);
        }
    },
    deactivateTrap (trapStack, trap) {
        const trapIndex = trapStack.indexOf(trap);
        if (trapIndex !== -1) {
            trapStack.splice(trapIndex, 1);
        }
        if (trapStack.length > 0) {
            trapStack[trapStack.length - 1].unpause();
        }
    }
};
var sharedTrapStack = [];
var FocusTrap = class {
    get active() {
        return this.state.active;
    }
    get paused() {
        return this.state.paused;
    }
    findContainerIndex(element, event) {
        const composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
        return this.state.containerGroups.findIndex((param)=>{
            let { container, tabbableNodes } = param;
            return container.contains(element) || (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find((node)=>node === element);
        });
    }
    updateTabbableNodes() {
        this.state.containerGroups = this.state.containers.map((container)=>{
            const tabbableNodes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTabbables"])(container);
            const focusableNodes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFocusables"])(container);
            const firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
            const lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
            const firstDomTabbableNode = focusableNodes.find((node)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTabbable"])(node));
            const lastDomTabbableNode = focusableNodes.slice().reverse().find((node)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTabbable"])(node));
            const posTabIndexesFound = !!tabbableNodes.find((node)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTabIndex"])(node) > 0);
            function nextTabbableNode(node) {
                let forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
                const nodeIdx = tabbableNodes.indexOf(node);
                if (nodeIdx < 0) {
                    if (forward) {
                        return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find((el)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTabbable"])(el));
                    }
                    return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find((el)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTabbable"])(el));
                }
                return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
            }
            return {
                container,
                tabbableNodes,
                focusableNodes,
                posTabIndexesFound,
                firstTabbableNode,
                lastTabbableNode,
                firstDomTabbableNode,
                lastDomTabbableNode,
                nextTabbableNode
            };
        });
        this.state.tabbableGroups = this.state.containerGroups.filter((group)=>group.tabbableNodes.length > 0);
        if (this.state.tabbableGroups.length <= 0 && !this.getNodeForOption("fallbackFocus")) {
            throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
        }
        if (this.state.containerGroups.find((g)=>g.posTabIndexesFound) && this.state.containerGroups.length > 1) {
            throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
        }
    }
    addListeners() {
        if (!this.state.active) return;
        activeFocusTraps.activateTrap(this.trapStack, this);
        this.state.delayInitialFocusTimer = this.config.delayInitialFocus ? delay(()=>{
            this.tryFocus(this.getInitialFocusNode());
        }) : this.tryFocus(this.getInitialFocusNode());
        this.listenerCleanups.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(this.doc, "focusin", this.handleFocus, true), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(this.doc, "mousedown", this.handlePointerDown, {
            capture: true,
            passive: false
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(this.doc, "touchstart", this.handlePointerDown, {
            capture: true,
            passive: false
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(this.doc, "click", this.handleClick, {
            capture: true,
            passive: false
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(this.doc, "keydown", this.handleTabKey, {
            capture: true,
            passive: false
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(this.doc, "keydown", this.handleEscapeKey));
        return this;
    }
    removeListeners() {
        if (!this.state.active) return;
        this.listenerCleanups.forEach((cleanup)=>cleanup());
        this.listenerCleanups = [];
        return this;
    }
    activate(activateOptions) {
        if (this.state.active) {
            return this;
        }
        const onActivate = this.getOption(activateOptions, "onActivate");
        const onPostActivate = this.getOption(activateOptions, "onPostActivate");
        const checkCanFocusTrap = this.getOption(activateOptions, "checkCanFocusTrap");
        if (!checkCanFocusTrap) {
            this.updateTabbableNodes();
        }
        this.state.active = true;
        this.state.paused = false;
        this.state.nodeFocusedBeforeActivation = this.doc.activeElement || null;
        onActivate === null || onActivate === void 0 ? void 0 : onActivate();
        const finishActivation = ()=>{
            if (checkCanFocusTrap) {
                this.updateTabbableNodes();
            }
            this.addListeners();
            this.updateObservedNodes();
            onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();
        };
        if (checkCanFocusTrap) {
            checkCanFocusTrap(this.state.containers.concat()).then(finishActivation, finishActivation);
            return this;
        }
        finishActivation();
        return this;
    }
    constructor(elements, options){
        var _this = this;
        __publicField(this, "trapStack");
        __publicField(this, "config");
        __publicField(this, "doc");
        __publicField(this, "state", {
            containers: [],
            containerGroups: [],
            tabbableGroups: [],
            nodeFocusedBeforeActivation: null,
            mostRecentlyFocusedNode: null,
            active: false,
            paused: false,
            delayInitialFocusTimer: void 0,
            recentNavEvent: void 0
        });
        __publicField(this, "listenerCleanups", []);
        __publicField(this, "handleFocus", (event)=>{
            const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
            const targetContained = this.findContainerIndex(target, event) >= 0;
            if (targetContained || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDocument"])(target)) {
                if (targetContained) {
                    this.state.mostRecentlyFocusedNode = target;
                }
            } else {
                event.stopImmediatePropagation();
                let nextNode;
                let navAcrossContainers = true;
                if (this.state.mostRecentlyFocusedNode) {
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTabIndex"])(this.state.mostRecentlyFocusedNode) > 0) {
                        const mruContainerIdx = this.findContainerIndex(this.state.mostRecentlyFocusedNode);
                        const { tabbableNodes } = this.state.containerGroups[mruContainerIdx];
                        if (tabbableNodes.length > 0) {
                            const mruTabIdx = tabbableNodes.findIndex((node)=>node === this.state.mostRecentlyFocusedNode);
                            if (mruTabIdx >= 0) {
                                if (this.config.isKeyForward(this.state.recentNavEvent)) {
                                    if (mruTabIdx + 1 < tabbableNodes.length) {
                                        nextNode = tabbableNodes[mruTabIdx + 1];
                                        navAcrossContainers = false;
                                    }
                                } else {
                                    if (mruTabIdx - 1 >= 0) {
                                        nextNode = tabbableNodes[mruTabIdx - 1];
                                        navAcrossContainers = false;
                                    }
                                }
                            }
                        }
                    } else {
                        if (!this.state.containerGroups.some((g)=>g.tabbableNodes.some((n)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTabIndex"])(n) > 0))) {
                            navAcrossContainers = false;
                        }
                    }
                } else {
                    navAcrossContainers = false;
                }
                if (navAcrossContainers) {
                    nextNode = this.findNextNavNode({
                        // move FROM the MRU node, not event-related node (which will be the node that is
                        //  outside the trap causing the focus escape we're trying to fix)
                        target: this.state.mostRecentlyFocusedNode,
                        isBackward: this.config.isKeyBackward(this.state.recentNavEvent)
                    });
                }
                if (nextNode) {
                    this.tryFocus(nextNode);
                } else {
                    this.tryFocus(this.state.mostRecentlyFocusedNode || this.getInitialFocusNode());
                }
            }
            this.state.recentNavEvent = void 0;
        });
        __publicField(this, "handlePointerDown", (event)=>{
            const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
            if (this.findContainerIndex(target, event) >= 0) {
                return;
            }
            if (valueOrHandler(this.config.clickOutsideDeactivates, event)) {
                this.deactivate({
                    returnFocus: this.config.returnFocusOnDeactivate
                });
                return;
            }
            if (valueOrHandler(this.config.allowOutsideClick, event)) {
                return;
            }
            event.preventDefault();
        });
        __publicField(this, "handleClick", (event)=>{
            const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
            if (this.findContainerIndex(target, event) >= 0) {
                return;
            }
            if (valueOrHandler(this.config.clickOutsideDeactivates, event)) {
                return;
            }
            if (valueOrHandler(this.config.allowOutsideClick, event)) {
                return;
            }
            event.preventDefault();
            event.stopImmediatePropagation();
        });
        __publicField(this, "handleTabKey", (event)=>{
            if (this.config.isKeyForward(event) || this.config.isKeyBackward(event)) {
                this.state.recentNavEvent = event;
                const isBackward = this.config.isKeyBackward(event);
                const destinationNode = this.findNextNavNode({
                    event,
                    isBackward
                });
                if (!destinationNode) return;
                if (isTabEvent(event)) {
                    event.preventDefault();
                }
                this.tryFocus(destinationNode);
            }
        });
        __publicField(this, "handleEscapeKey", (event)=>{
            if (isEscapeEvent(event) && valueOrHandler(this.config.escapeDeactivates, event) !== false) {
                event.preventDefault();
                this.deactivate();
            }
        });
        __publicField(this, "_mutationObserver");
        __publicField(this, "setupMutationObserver", ()=>{
            const win = this.doc.defaultView || window;
            this._mutationObserver = new win.MutationObserver((mutations)=>{
                const isFocusedNodeRemoved = mutations.some((mutation)=>{
                    const removedNodes = Array.from(mutation.removedNodes);
                    return removedNodes.some((node)=>node === this.state.mostRecentlyFocusedNode);
                });
                if (isFocusedNodeRemoved) {
                    this.tryFocus(this.getInitialFocusNode());
                }
            });
        });
        __publicField(this, "updateObservedNodes", ()=>{
            var _this__mutationObserver;
            (_this__mutationObserver = this._mutationObserver) === null || _this__mutationObserver === void 0 ? void 0 : _this__mutationObserver.disconnect();
            if (this.state.active && !this.state.paused) {
                this.state.containers.map((container)=>{
                    var _this__mutationObserver;
                    (_this__mutationObserver = this._mutationObserver) === null || _this__mutationObserver === void 0 ? void 0 : _this__mutationObserver.observe(container, {
                        subtree: true,
                        childList: true
                    });
                });
            }
        });
        __publicField(this, "getInitialFocusNode", ()=>{
            let node = this.getNodeForOption("initialFocus", {
                hasFallback: true
            });
            if (node === false) {
                return false;
            }
            if (node === void 0 || node && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusable"])(node)) {
                if (this.findContainerIndex(this.doc.activeElement) >= 0) {
                    node = this.doc.activeElement;
                } else {
                    const firstTabbableGroup = this.state.tabbableGroups[0];
                    const firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
                    node = firstTabbableNode || this.getNodeForOption("fallbackFocus");
                }
            } else if (node === null) {
                node = this.getNodeForOption("fallbackFocus");
            }
            if (!node) {
                throw new Error("Your focus-trap needs to have at least one focusable element");
            }
            if (!node.isConnected) {
                node = this.getNodeForOption("fallbackFocus");
            }
            return node;
        });
        __publicField(this, "tryFocus", (node)=>{
            if (node === false) return;
            if (node === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getActiveElement"])(this.doc)) return;
            if (!node || !node.focus) {
                this.tryFocus(this.getInitialFocusNode());
                return;
            }
            node.focus({
                preventScroll: !!this.config.preventScroll
            });
            this.state.mostRecentlyFocusedNode = node;
            if (isSelectableInput(node)) {
                node.select();
            }
        });
        __publicField(this, "deactivate", (deactivateOptions)=>{
            if (!this.state.active) return this;
            const options = {
                onDeactivate: this.config.onDeactivate,
                onPostDeactivate: this.config.onPostDeactivate,
                checkCanReturnFocus: this.config.checkCanReturnFocus,
                ...deactivateOptions
            };
            clearTimeout(this.state.delayInitialFocusTimer);
            this.state.delayInitialFocusTimer = void 0;
            this.removeListeners();
            this.state.active = false;
            this.state.paused = false;
            this.updateObservedNodes();
            activeFocusTraps.deactivateTrap(this.trapStack, this);
            const onDeactivate = this.getOption(options, "onDeactivate");
            const onPostDeactivate = this.getOption(options, "onPostDeactivate");
            const checkCanReturnFocus = this.getOption(options, "checkCanReturnFocus");
            const returnFocus = this.getOption(options, "returnFocus", "returnFocusOnDeactivate");
            onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();
            const finishDeactivation = ()=>{
                delay(()=>{
                    if (returnFocus) {
                        const returnFocusNode = this.getReturnFocusNode(this.state.nodeFocusedBeforeActivation);
                        this.tryFocus(returnFocusNode);
                    }
                    onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();
                });
            };
            if (returnFocus && checkCanReturnFocus) {
                const returnFocusNode = this.getReturnFocusNode(this.state.nodeFocusedBeforeActivation);
                checkCanReturnFocus(returnFocusNode).then(finishDeactivation, finishDeactivation);
                return this;
            }
            finishDeactivation();
            return this;
        });
        __publicField(this, "pause", (pauseOptions)=>{
            if (this.state.paused || !this.state.active) {
                return this;
            }
            const onPause = this.getOption(pauseOptions, "onPause");
            const onPostPause = this.getOption(pauseOptions, "onPostPause");
            this.state.paused = true;
            onPause === null || onPause === void 0 ? void 0 : onPause();
            this.removeListeners();
            this.updateObservedNodes();
            onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();
            return this;
        });
        __publicField(this, "unpause", (unpauseOptions)=>{
            if (!this.state.paused || !this.state.active) {
                return this;
            }
            const onUnpause = this.getOption(unpauseOptions, "onUnpause");
            const onPostUnpause = this.getOption(unpauseOptions, "onPostUnpause");
            this.state.paused = false;
            onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();
            this.updateTabbableNodes();
            this.addListeners();
            this.updateObservedNodes();
            onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();
            return this;
        });
        __publicField(this, "updateContainerElements", (containerElements)=>{
            this.state.containers = Array.isArray(containerElements) ? containerElements.filter(Boolean) : [
                containerElements
            ].filter(Boolean);
            if (this.state.active) {
                this.updateTabbableNodes();
            }
            this.updateObservedNodes();
            return this;
        });
        __publicField(this, "getReturnFocusNode", (previousActiveElement)=>{
            const node = this.getNodeForOption("setReturnFocus", {
                params: [
                    previousActiveElement
                ]
            });
            return node ? node : node === false ? false : previousActiveElement;
        });
        __publicField(this, "getOption", (configOverrideOptions, optionName, configOptionName)=>{
            return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : // @ts-expect-error
            this.config[configOptionName || optionName];
        });
        __publicField(this, "getNodeForOption", function(optionName) {
            let { hasFallback = false, params = [] } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            let optionValue = _this.config[optionName];
            if (typeof optionValue === "function") optionValue = optionValue(...params);
            if (optionValue === true) optionValue = void 0;
            if (!optionValue) {
                if (optionValue === void 0 || optionValue === false) {
                    return optionValue;
                }
                throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
            }
            let node = optionValue;
            if (typeof optionValue === "string") {
                try {
                    node = _this.doc.querySelector(optionValue);
                } catch (err) {
                    throw new Error("`".concat(optionName, '` appears to be an invalid selector; error="').concat(err.message, '"'));
                }
                if (!node) {
                    if (!hasFallback) {
                        throw new Error("`".concat(optionName, "` as selector refers to no known node"));
                    }
                }
            }
            return node;
        });
        __publicField(this, "findNextNavNode", (opts)=>{
            const { event, isBackward = false } = opts;
            const target = opts.target || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
            this.updateTabbableNodes();
            let destinationNode = null;
            if (this.state.tabbableGroups.length > 0) {
                const containerIndex = this.findContainerIndex(target, event);
                const containerGroup = containerIndex >= 0 ? this.state.containerGroups[containerIndex] : void 0;
                if (containerIndex < 0) {
                    if (isBackward) {
                        destinationNode = this.state.tabbableGroups[this.state.tabbableGroups.length - 1].lastTabbableNode;
                    } else {
                        destinationNode = this.state.tabbableGroups[0].firstTabbableNode;
                    }
                } else if (isBackward) {
                    let startOfGroupIndex = this.state.tabbableGroups.findIndex((param)=>{
                        let { firstTabbableNode } = param;
                        return target === firstTabbableNode;
                    });
                    if (startOfGroupIndex < 0 && ((containerGroup === null || containerGroup === void 0 ? void 0 : containerGroup.container) === target || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusable"])(target) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTabbable"])(target) && !(containerGroup === null || containerGroup === void 0 ? void 0 : containerGroup.nextTabbableNode(target, false)))) {
                        startOfGroupIndex = containerIndex;
                    }
                    if (startOfGroupIndex >= 0) {
                        const destinationGroupIndex = startOfGroupIndex === 0 ? this.state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
                        const destinationGroup = this.state.tabbableGroups[destinationGroupIndex];
                        destinationNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTabIndex"])(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
                    } else if (!isTabEvent(event)) {
                        destinationNode = containerGroup === null || containerGroup === void 0 ? void 0 : containerGroup.nextTabbableNode(target, false);
                    }
                } else {
                    let lastOfGroupIndex = this.state.tabbableGroups.findIndex((param)=>{
                        let { lastTabbableNode } = param;
                        return target === lastTabbableNode;
                    });
                    if (lastOfGroupIndex < 0 && ((containerGroup === null || containerGroup === void 0 ? void 0 : containerGroup.container) === target || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusable"])(target) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTabbable"])(target) && !(containerGroup === null || containerGroup === void 0 ? void 0 : containerGroup.nextTabbableNode(target)))) {
                        lastOfGroupIndex = containerIndex;
                    }
                    if (lastOfGroupIndex >= 0) {
                        const destinationGroupIndex = lastOfGroupIndex === this.state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
                        const destinationGroup = this.state.tabbableGroups[destinationGroupIndex];
                        destinationNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTabIndex"])(target) >= 0 ? destinationGroup.firstTabbableNode : destinationGroup.firstDomTabbableNode;
                    } else if (!isTabEvent(event)) {
                        destinationNode = containerGroup === null || containerGroup === void 0 ? void 0 : containerGroup.nextTabbableNode(target);
                    }
                }
            } else {
                destinationNode = this.getNodeForOption("fallbackFocus");
            }
            return destinationNode;
        });
        this.trapStack = options.trapStack || sharedTrapStack;
        const config = {
            returnFocusOnDeactivate: true,
            escapeDeactivates: true,
            delayInitialFocus: true,
            isKeyForward (e) {
                return isTabEvent(e) && !e.shiftKey;
            },
            isKeyBackward (e) {
                return isTabEvent(e) && e.shiftKey;
            },
            ...options
        };
        this.doc = config.document || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(Array.isArray(elements) ? elements[0] : elements);
        this.config = config;
        this.updateContainerElements(elements);
        this.setupMutationObserver();
    }
};
var isTabEvent = (event)=>event.key === "Tab";
var valueOrHandler = function(value) {
    for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        params[_key - 1] = arguments[_key];
    }
    return typeof value === "function" ? value(...params) : value;
};
var isEscapeEvent = (event)=>!event.isComposing && event.key === "Escape";
var delay = (fn)=>setTimeout(fn, 0);
var isSelectableInput = (node)=>node.localName === "input" && "select" in node && typeof node.select === "function";
// src/index.ts
function trapFocus(el) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let trap;
    const cleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
        const contentEl = typeof el === "function" ? el() : el;
        if (!contentEl) return;
        trap = new FocusTrap(contentEl, {
            escapeDeactivates: false,
            allowOutsideClick: true,
            preventScroll: true,
            returnFocusOnDeactivate: true,
            delayInitialFocus: false,
            fallbackFocus: contentEl,
            ...options,
            document: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(contentEl)
        });
        try {
            trap.activate();
        } catch (e) {}
    });
    return function destroy() {
        trap === null || trap === void 0 ? void 0 : trap.deactivate();
        cleanup();
    };
}
;
}),
"[project]/node_modules/@zag-js/remove-scroll/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "preventBodyScroll",
    ()=>preventBodyScroll
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
;
// src/index.ts
var LOCK_CLASSNAME = "data-scroll-lock";
function getPaddingProperty(documentElement) {
    const documentLeft = documentElement.getBoundingClientRect().left;
    const scrollbarX = Math.round(documentLeft) + documentElement.scrollLeft;
    return scrollbarX ? "paddingLeft" : "paddingRight";
}
function preventBodyScroll(_document) {
    const doc = _document !== null && _document !== void 0 ? _document : document;
    var _doc_defaultView;
    const win = (_doc_defaultView = doc.defaultView) !== null && _doc_defaultView !== void 0 ? _doc_defaultView : window;
    const { documentElement, body } = doc;
    const locked = body.hasAttribute(LOCK_CLASSNAME);
    if (locked) return;
    const scrollbarWidth = win.innerWidth - documentElement.clientWidth;
    body.setAttribute(LOCK_CLASSNAME, "");
    const setScrollbarWidthProperty = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setStyleProperty"])(documentElement, "--scrollbar-width", "".concat(scrollbarWidth, "px"));
    const paddingProperty = getPaddingProperty(documentElement);
    const setBodyStyle = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setStyle"])(body, {
            overflow: "hidden",
            [paddingProperty]: "".concat(scrollbarWidth, "px")
        });
    const setBodyStyleIOS = ()=>{
        const { scrollX, scrollY, visualViewport } = win;
        var _visualViewport_offsetLeft;
        const offsetLeft = (_visualViewport_offsetLeft = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.offsetLeft) !== null && _visualViewport_offsetLeft !== void 0 ? _visualViewport_offsetLeft : 0;
        var _visualViewport_offsetTop;
        const offsetTop = (_visualViewport_offsetTop = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.offsetTop) !== null && _visualViewport_offsetTop !== void 0 ? _visualViewport_offsetTop : 0;
        const restoreStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setStyle"])(body, {
            position: "fixed",
            overflow: "hidden",
            top: "".concat(-(scrollY - Math.floor(offsetTop)), "px"),
            left: "".concat(-(scrollX - Math.floor(offsetLeft)), "px"),
            right: "0",
            [paddingProperty]: "".concat(scrollbarWidth, "px")
        });
        return ()=>{
            restoreStyle === null || restoreStyle === void 0 ? void 0 : restoreStyle();
            win.scrollTo({
                left: scrollX,
                top: scrollY,
                behavior: "instant"
            });
        };
    };
    const cleanups = [
        setScrollbarWidthProperty(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIos"])() ? setBodyStyleIOS() : setBodyStyle()
    ];
    return ()=>{
        cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
        body.removeAttribute(LOCK_CLASSNAME);
    };
}
;
}),
"[project]/node_modules/@zag-js/dialog/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$aria$2d$hidden$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/aria-hidden/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$trap$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/focus-trap/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$remove$2d$scroll$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/remove-scroll/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
// src/dialog.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("dialog").parts("trigger", "backdrop", "positioner", "content", "title", "description", "closeTrigger");
var parts = anatomy.build();
// src/dialog.dom.ts
var getPositionerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_positioner;
    return (_ctx_ids_positioner = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.positioner) !== null && _ctx_ids_positioner !== void 0 ? _ctx_ids_positioner : "dialog:".concat(ctx.id, ":positioner");
};
var getBackdropId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_backdrop;
    return (_ctx_ids_backdrop = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.backdrop) !== null && _ctx_ids_backdrop !== void 0 ? _ctx_ids_backdrop : "dialog:".concat(ctx.id, ":backdrop");
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "dialog:".concat(ctx.id, ":content");
};
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "dialog:".concat(ctx.id, ":trigger");
};
var getTitleId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_title;
    return (_ctx_ids_title = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.title) !== null && _ctx_ids_title !== void 0 ? _ctx_ids_title : "dialog:".concat(ctx.id, ":title");
};
var getDescriptionId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_description;
    return (_ctx_ids_description = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.description) !== null && _ctx_ids_description !== void 0 ? _ctx_ids_description : "dialog:".concat(ctx.id, ":description");
};
var getCloseTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_closeTrigger;
    return (_ctx_ids_closeTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.closeTrigger) !== null && _ctx_ids_closeTrigger !== void 0 ? _ctx_ids_closeTrigger : "dialog:".concat(ctx.id, ":close");
};
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
var getPositionerEl = (ctx)=>ctx.getById(getPositionerId(ctx));
var getBackdropEl = (ctx)=>ctx.getById(getBackdropId(ctx));
var getTriggerEl = (ctx)=>ctx.getById(getTriggerId(ctx));
var getTitleEl = (ctx)=>ctx.getById(getTitleId(ctx));
var getDescriptionEl = (ctx)=>ctx.getById(getDescriptionId(ctx));
var getCloseTriggerEl = (ctx)=>ctx.getById(getCloseTriggerId(ctx));
// src/dialog.connect.ts
function connect(service, normalize) {
    const { state, send, context, prop, scope } = service;
    const ariaLabel = prop("aria-label");
    const open = state.matches("open");
    return {
        open,
        setOpen (nextOpen) {
            const open2 = state.matches("open");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "OPEN" : "CLOSE"
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                dir: prop("dir"),
                id: getTriggerId(scope),
                "aria-haspopup": "dialog",
                type: "button",
                "aria-expanded": open,
                "data-state": open ? "open" : "closed",
                "aria-controls": getContentId(scope),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    send({
                        type: "TOGGLE"
                    });
                }
            });
        },
        getBackdropProps () {
            return normalize.element({
                ...parts.backdrop.attrs,
                dir: prop("dir"),
                hidden: !open,
                id: getBackdropId(scope),
                "data-state": open ? "open" : "closed"
            });
        },
        getPositionerProps () {
            return normalize.element({
                ...parts.positioner.attrs,
                dir: prop("dir"),
                id: getPositionerId(scope),
                style: {
                    pointerEvents: open ? void 0 : "none"
                }
            });
        },
        getContentProps () {
            const rendered = context.get("rendered");
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                role: prop("role"),
                hidden: !open,
                id: getContentId(scope),
                tabIndex: -1,
                "data-state": open ? "open" : "closed",
                "aria-modal": true,
                "aria-label": ariaLabel || void 0,
                "aria-labelledby": ariaLabel || !rendered.title ? void 0 : getTitleId(scope),
                "aria-describedby": rendered.description ? getDescriptionId(scope) : void 0
            });
        },
        getTitleProps () {
            return normalize.element({
                ...parts.title.attrs,
                dir: prop("dir"),
                id: getTitleId(scope)
            });
        },
        getDescriptionProps () {
            return normalize.element({
                ...parts.description.attrs,
                dir: prop("dir"),
                id: getDescriptionId(scope)
            });
        },
        getCloseTriggerProps () {
            return normalize.button({
                ...parts.closeTrigger.attrs,
                dir: prop("dir"),
                id: getCloseTriggerId(scope),
                type: "button",
                onClick (event) {
                    if (event.defaultPrevented) return;
                    event.stopPropagation();
                    send({
                        type: "CLOSE"
                    });
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2, scope } = param;
        const alertDialog = props2.role === "alertdialog";
        const initialFocusEl = alertDialog ? ()=>getCloseTriggerEl(scope) : void 0;
        const modal = typeof props2.modal === "boolean" ? props2.modal : true;
        return {
            role: "dialog",
            modal,
            trapFocus: modal,
            preventScroll: modal,
            closeOnInteractOutside: !alertDialog,
            closeOnEscape: true,
            restoreFocus: true,
            initialFocusEl,
            ...props2
        };
    },
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "open" : "closed";
    },
    context (param) {
        let { bindable } = param;
        return {
            rendered: bindable(()=>({
                    defaultValue: {
                        title: true,
                        description: true
                    }
                }))
        };
    },
    watch (param) {
        let { track, action, prop } = param;
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
    },
    states: {
        open: {
            entry: [
                "checkRenderedElements",
                "syncZIndex"
            ],
            effects: [
                "trackDismissableElement",
                "trapFocus",
                "preventScroll",
                "hideContentBelow"
            ],
            on: {
                "CONTROLLED.CLOSE": {
                    target: "closed"
                },
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                TOGGLE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ]
            }
        },
        closed: {
            on: {
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                TOGGLE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ]
            }
        }
    },
    implementations: {
        guards: {
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") != void 0;
            }
        },
        effects: {
            trackDismissableElement (param) {
                let { scope, send, prop } = param;
                const getContentEl2 = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDismissableElement"])(getContentEl2, {
                    defer: true,
                    pointerBlocking: prop("modal"),
                    exclude: [
                        getTriggerEl(scope)
                    ],
                    onInteractOutside (event) {
                        var _prop;
                        (_prop = prop("onInteractOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                        if (!prop("closeOnInteractOutside")) {
                            event.preventDefault();
                        }
                    },
                    persistentElements: prop("persistentElements"),
                    onFocusOutside: prop("onFocusOutside"),
                    onPointerDownOutside: prop("onPointerDownOutside"),
                    onRequestDismiss: prop("onRequestDismiss"),
                    onEscapeKeyDown (event) {
                        var _prop;
                        (_prop = prop("onEscapeKeyDown")) === null || _prop === void 0 ? void 0 : _prop(event);
                        if (!prop("closeOnEscape")) {
                            event.preventDefault();
                        }
                    },
                    onDismiss () {
                        send({
                            type: "CLOSE",
                            src: "interact-outside"
                        });
                    }
                });
            },
            preventScroll (param) {
                let { scope, prop } = param;
                if (!prop("preventScroll")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$remove$2d$scroll$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["preventBodyScroll"])(scope.getDoc());
            },
            trapFocus (param) {
                let { scope, prop } = param;
                if (!prop("trapFocus")) return;
                const contentEl = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$trap$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trapFocus"])(contentEl, {
                    preventScroll: true,
                    returnFocusOnDeactivate: !!prop("restoreFocus"),
                    initialFocus: prop("initialFocusEl"),
                    setReturnFocus: (el)=>{
                        var _prop;
                        var _prop1;
                        return (_prop1 = (_prop = prop("finalFocusEl")) === null || _prop === void 0 ? void 0 : _prop()) !== null && _prop1 !== void 0 ? _prop1 : el;
                    }
                });
            },
            hideContentBelow (param) {
                let { scope, prop } = param;
                if (!prop("modal")) return;
                const getElements = ()=>[
                        getContentEl(scope)
                    ];
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$aria$2d$hidden$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaHidden"])(getElements, {
                    defer: true
                });
            }
        },
        actions: {
            checkRenderedElements (param) {
                let { context, scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    context.set("rendered", {
                        title: !!getTitleEl(scope),
                        description: !!getDescriptionEl(scope)
                    });
                });
            },
            syncZIndex (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const contentEl = getContentEl(scope);
                    if (!contentEl) return;
                    const styles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(contentEl);
                    const elems = [
                        getPositionerEl(scope),
                        getBackdropEl(scope)
                    ];
                    elems.forEach((node)=>{
                        node === null || node === void 0 ? void 0 : node.style.setProperty("--z-index", styles.zIndex);
                        node === null || node === void 0 ? void 0 : node.style.setProperty("--layer-index", styles.getPropertyValue("--layer-index"));
                    });
                });
            },
            invokeOnClose (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false
                });
            },
            invokeOnOpen (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true
                });
            },
            toggleVisibility (param) {
                let { prop, send, event } = param;
                send({
                    type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
                    previousEvent: event
                });
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "aria-label",
    "closeOnEscape",
    "closeOnInteractOutside",
    "dir",
    "finalFocusEl",
    "getRootNode",
    "getRootNode",
    "id",
    "id",
    "ids",
    "initialFocusEl",
    "modal",
    "onEscapeKeyDown",
    "onFocusOutside",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onRequestDismiss",
    "defaultOpen",
    "open",
    "persistentElements",
    "preventScroll",
    "restoreFocus",
    "role",
    "trapFocus"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/dialog/dist/index.mjs [app-client] (ecmascript) <export anatomy as dialogAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "dialogAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dialog$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dialog$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dialog/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/editable/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$interact$2d$outside$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/interact-outside/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
// src/editable.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("editable").parts("root", "area", "label", "preview", "input", "editTrigger", "submitTrigger", "cancelTrigger", "control");
var parts = anatomy.build();
// src/editable.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "editable:".concat(ctx.id);
};
var getAreaId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_area;
    return (_ctx_ids_area = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.area) !== null && _ctx_ids_area !== void 0 ? _ctx_ids_area : "editable:".concat(ctx.id, ":area");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "editable:".concat(ctx.id, ":label");
};
var getPreviewId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_preview;
    return (_ctx_ids_preview = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.preview) !== null && _ctx_ids_preview !== void 0 ? _ctx_ids_preview : "editable:".concat(ctx.id, ":preview");
};
var getInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_input;
    return (_ctx_ids_input = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.input) !== null && _ctx_ids_input !== void 0 ? _ctx_ids_input : "editable:".concat(ctx.id, ":input");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "editable:".concat(ctx.id, ":control");
};
var getSubmitTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_submitTrigger;
    return (_ctx_ids_submitTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.submitTrigger) !== null && _ctx_ids_submitTrigger !== void 0 ? _ctx_ids_submitTrigger : "editable:".concat(ctx.id, ":submit");
};
var getCancelTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_cancelTrigger;
    return (_ctx_ids_cancelTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.cancelTrigger) !== null && _ctx_ids_cancelTrigger !== void 0 ? _ctx_ids_cancelTrigger : "editable:".concat(ctx.id, ":cancel");
};
var getEditTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_editTrigger;
    return (_ctx_ids_editTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.editTrigger) !== null && _ctx_ids_editTrigger !== void 0 ? _ctx_ids_editTrigger : "editable:".concat(ctx.id, ":edit");
};
var getInputEl = (ctx)=>ctx.getById(getInputId(ctx));
var getPreviewEl = (ctx)=>ctx.getById(getPreviewId(ctx));
var getSubmitTriggerEl = (ctx)=>ctx.getById(getSubmitTriggerId(ctx));
var getCancelTriggerEl = (ctx)=>ctx.getById(getCancelTriggerId(ctx));
var getEditTriggerEl = (ctx)=>ctx.getById(getEditTriggerId(ctx));
// src/editable.connect.ts
function connect(service, normalize) {
    const { state, context, send, prop, scope, computed } = service;
    const disabled = prop("disabled");
    const interactive = computed("isInteractive");
    const readOnly = prop("readOnly");
    const invalid = prop("invalid");
    const autoResize = prop("autoResize");
    const translations = prop("translations");
    const editing = state.matches("edit");
    const placeholderProp = prop("placeholder");
    const placeholder = typeof placeholderProp === "string" ? {
        edit: placeholderProp,
        preview: placeholderProp
    } : placeholderProp;
    const value = context.get("value");
    const empty = value.trim() === "";
    var _placeholder_preview;
    const valueText = empty ? (_placeholder_preview = placeholder === null || placeholder === void 0 ? void 0 : placeholder.preview) !== null && _placeholder_preview !== void 0 ? _placeholder_preview : "" : value;
    return {
        editing,
        empty,
        value,
        valueText,
        setValue (value2) {
            send({
                type: "VALUE.SET",
                value: value2,
                src: "setValue"
            });
        },
        clearValue () {
            send({
                type: "VALUE.SET",
                value: "",
                src: "clearValue"
            });
        },
        edit () {
            if (!interactive) return;
            send({
                type: "EDIT"
            });
        },
        cancel () {
            if (!interactive) return;
            send({
                type: "CANCEL"
            });
        },
        submit () {
            if (!interactive) return;
            send({
                type: "SUBMIT"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                id: getRootId(scope),
                dir: prop("dir")
            });
        },
        getAreaProps () {
            return normalize.element({
                ...parts.area.attrs,
                id: getAreaId(scope),
                dir: prop("dir"),
                style: autoResize ? {
                    display: "inline-grid"
                } : void 0,
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(editing),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-placeholder-shown": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(empty)
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                id: getLabelId(scope),
                dir: prop("dir"),
                htmlFor: getInputId(scope),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(editing),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                onClick () {
                    if (editing) return;
                    const previewEl = getPreviewEl(scope);
                    previewEl === null || previewEl === void 0 ? void 0 : previewEl.focus({
                        preventScroll: true
                    });
                }
            });
        },
        getInputProps () {
            return normalize.input({
                ...parts.input.attrs,
                dir: prop("dir"),
                "aria-label": translations === null || translations === void 0 ? void 0 : translations.input,
                name: prop("name"),
                form: prop("form"),
                id: getInputId(scope),
                hidden: autoResize ? void 0 : !editing,
                placeholder: placeholder === null || placeholder === void 0 ? void 0 : placeholder.edit,
                maxLength: prop("maxLength"),
                required: prop("required"),
                disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                readOnly,
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
                "aria-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(invalid),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-autoresize": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(autoResize),
                defaultValue: value,
                size: autoResize ? 1 : void 0,
                onChange (event) {
                    send({
                        type: "VALUE.SET",
                        src: "input.change",
                        value: event.currentTarget.value
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    const keyMap = {
                        Escape () {
                            send({
                                type: "CANCEL"
                            });
                            event.preventDefault();
                        },
                        Enter (event2) {
                            if (!computed("submitOnEnter")) return;
                            const { localName } = event2.currentTarget;
                            if (localName === "textarea") {
                                const submitMod = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isApple"])() ? event2.metaKey : event2.ctrlKey;
                                if (!submitMod) return;
                                send({
                                    type: "SUBMIT",
                                    src: "keydown.enter"
                                });
                                return;
                            }
                            if (localName === "input" && !event2.shiftKey && !event2.metaKey) {
                                send({
                                    type: "SUBMIT",
                                    src: "keydown.enter"
                                });
                                event2.preventDefault();
                            }
                        }
                    };
                    const exec = keyMap[event.key];
                    if (exec) {
                        exec(event);
                    }
                },
                style: autoResize ? {
                    gridArea: "1 / 1 / auto / auto",
                    visibility: !editing ? "hidden" : void 0
                } : void 0
            });
        },
        getPreviewProps () {
            return normalize.element({
                id: getPreviewId(scope),
                ...parts.preview.attrs,
                dir: prop("dir"),
                "data-placeholder-shown": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(empty),
                "aria-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(readOnly),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "aria-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(disabled),
                "aria-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(invalid),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "aria-label": translations === null || translations === void 0 ? void 0 : translations.edit,
                "data-autoresize": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(autoResize),
                children: valueText,
                hidden: autoResize ? void 0 : editing,
                tabIndex: interactive ? 0 : void 0,
                onClick () {
                    if (!interactive) return;
                    if (prop("activationMode") !== "click") return;
                    send({
                        type: "EDIT",
                        src: "click"
                    });
                },
                onFocus () {
                    if (!interactive) return;
                    if (prop("activationMode") !== "focus") return;
                    send({
                        type: "EDIT",
                        src: "focus"
                    });
                },
                onDoubleClick (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    if (prop("activationMode") !== "dblclick") return;
                    send({
                        type: "EDIT",
                        src: "dblclick"
                    });
                },
                style: autoResize ? {
                    whiteSpace: "pre",
                    userSelect: "none",
                    gridArea: "1 / 1 / auto / auto",
                    visibility: editing ? "hidden" : void 0,
                    // in event the preview overflow's the parent element
                    overflow: "hidden",
                    textOverflow: "ellipsis"
                } : void 0
            });
        },
        getEditTriggerProps () {
            return normalize.button({
                ...parts.editTrigger.attrs,
                id: getEditTriggerId(scope),
                dir: prop("dir"),
                "aria-label": translations === null || translations === void 0 ? void 0 : translations.edit,
                hidden: editing,
                type: "button",
                disabled,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    send({
                        type: "EDIT",
                        src: "edit.click"
                    });
                }
            });
        },
        getControlProps () {
            return normalize.element({
                id: getControlId(scope),
                ...parts.control.attrs,
                dir: prop("dir")
            });
        },
        getSubmitTriggerProps () {
            return normalize.button({
                ...parts.submitTrigger.attrs,
                dir: prop("dir"),
                id: getSubmitTriggerId(scope),
                "aria-label": translations === null || translations === void 0 ? void 0 : translations.submit,
                hidden: !editing,
                disabled,
                type: "button",
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    send({
                        type: "SUBMIT",
                        src: "submit.click"
                    });
                }
            });
        },
        getCancelTriggerProps () {
            return normalize.button({
                ...parts.cancelTrigger.attrs,
                dir: prop("dir"),
                "aria-label": translations === null || translations === void 0 ? void 0 : translations.cancel,
                id: getCancelTriggerId(scope),
                hidden: !editing,
                type: "button",
                disabled,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    send({
                        type: "CANCEL",
                        src: "cancel.click"
                    });
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            activationMode: "focus",
            submitMode: "both",
            defaultValue: "",
            selectOnFocus: true,
            ...props2,
            translations: {
                input: "editable input",
                edit: "edit",
                submit: "submit",
                cancel: "cancel",
                ...props2.translations
            }
        };
    },
    initialState (param) {
        let { prop } = param;
        const edit = prop("edit") || prop("defaultEdit");
        return edit ? "edit" : "preview";
    },
    entry: [
        "focusInputIfNeeded"
    ],
    context: (param)=>{
        let { bindable, prop } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        var _prop;
                        return (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                })),
            previousValue: bindable(()=>({
                    defaultValue: ""
                }))
        };
    },
    watch (param) {
        let { track, action, context, prop } = param;
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "syncInputValue"
            ]);
        });
        track([
            ()=>prop("edit")
        ], ()=>{
            action([
                "toggleEditing"
            ]);
        });
    },
    computed: {
        submitOnEnter (param) {
            let { prop } = param;
            const submitMode = prop("submitMode");
            return submitMode === "both" || submitMode === "enter";
        },
        submitOnBlur (param) {
            let { prop } = param;
            const submitMode = prop("submitMode");
            return submitMode === "both" || submitMode === "blur";
        },
        isInteractive (param) {
            let { prop } = param;
            return !(prop("disabled") || prop("readOnly"));
        }
    },
    on: {
        "VALUE.SET": {
            actions: [
                "setValue"
            ]
        }
    },
    states: {
        preview: {
            entry: [
                "blurInputIfNeeded"
            ],
            on: {
                "CONTROLLED.EDIT": {
                    target: "edit",
                    actions: [
                        "setPreviousValue",
                        "focusInput"
                    ]
                },
                EDIT: [
                    {
                        guard: "isEditControlled",
                        actions: [
                            "invokeOnEdit"
                        ]
                    },
                    {
                        target: "edit",
                        actions: [
                            "setPreviousValue",
                            "focusInput",
                            "invokeOnEdit"
                        ]
                    }
                ]
            }
        },
        edit: {
            effects: [
                "trackInteractOutside"
            ],
            on: {
                "CONTROLLED.PREVIEW": [
                    {
                        guard: "isSubmitEvent",
                        target: "preview",
                        actions: [
                            "setPreviousValue",
                            "restoreFocus",
                            "invokeOnSubmit"
                        ]
                    },
                    {
                        target: "preview",
                        actions: [
                            "revertValue",
                            "restoreFocus",
                            "invokeOnCancel"
                        ]
                    }
                ],
                CANCEL: [
                    {
                        guard: "isEditControlled",
                        actions: [
                            "invokeOnPreview"
                        ]
                    },
                    {
                        target: "preview",
                        actions: [
                            "revertValue",
                            "restoreFocus",
                            "invokeOnCancel",
                            "invokeOnPreview"
                        ]
                    }
                ],
                SUBMIT: [
                    {
                        guard: "isEditControlled",
                        actions: [
                            "invokeOnPreview"
                        ]
                    },
                    {
                        target: "preview",
                        actions: [
                            "setPreviousValue",
                            "restoreFocus",
                            "invokeOnSubmit",
                            "invokeOnPreview"
                        ]
                    }
                ]
            }
        }
    },
    implementations: {
        guards: {
            isEditControlled: (param)=>{
                let { prop } = param;
                return prop("edit") != void 0;
            },
            isSubmitEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "SUBMIT";
            }
        },
        effects: {
            trackInteractOutside (param) {
                let { send, scope, prop, computed } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$interact$2d$outside$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackInteractOutside"])(getInputEl(scope), {
                    exclude (target) {
                        const ignore = [
                            getCancelTriggerEl(scope),
                            getSubmitTriggerEl(scope)
                        ];
                        return ignore.some((el)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(el, target));
                    },
                    onFocusOutside: prop("onFocusOutside"),
                    onPointerDownOutside: prop("onPointerDownOutside"),
                    onInteractOutside (event) {
                        var _prop;
                        (_prop = prop("onInteractOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                        if (event.defaultPrevented) return;
                        const { focusable } = event.detail;
                        send({
                            type: computed("submitOnBlur") ? "SUBMIT" : "CANCEL",
                            src: "interact-outside",
                            focusable
                        });
                    }
                });
            }
        },
        actions: {
            restoreFocus (param) {
                let { event, scope, prop } = param;
                if (event.focusable) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _prop;
                    var _prop1;
                    const finalEl = (_prop1 = (_prop = prop("finalFocusEl")) === null || _prop === void 0 ? void 0 : _prop()) !== null && _prop1 !== void 0 ? _prop1 : getEditTriggerEl(scope);
                    finalEl === null || finalEl === void 0 ? void 0 : finalEl.focus({
                        preventScroll: true
                    });
                });
            },
            clearValue (param) {
                let { context } = param;
                context.set("value", "");
            },
            focusInputIfNeeded (param) {
                let { action, prop } = param;
                const edit = prop("edit") || prop("defaultEdit");
                if (!edit) return;
                action([
                    "focusInput"
                ]);
            },
            focusInput (param) {
                let { scope, prop } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const inputEl = getInputEl(scope);
                    if (!inputEl) return;
                    if (prop("selectOnFocus")) {
                        inputEl.select();
                    } else {
                        inputEl.focus({
                            preventScroll: true
                        });
                    }
                });
            },
            invokeOnCancel (param) {
                let { prop, context } = param;
                var _prop;
                const prev = context.get("previousValue");
                (_prop = prop("onValueRevert")) === null || _prop === void 0 ? void 0 : _prop({
                    value: prev
                });
            },
            invokeOnSubmit (param) {
                let { prop, context } = param;
                var _prop;
                const value = context.get("value");
                (_prop = prop("onValueCommit")) === null || _prop === void 0 ? void 0 : _prop({
                    value
                });
            },
            invokeOnEdit (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onEditChange")) === null || _prop === void 0 ? void 0 : _prop({
                    edit: true
                });
            },
            invokeOnPreview (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onEditChange")) === null || _prop === void 0 ? void 0 : _prop({
                    edit: false
                });
            },
            toggleEditing (param) {
                let { prop, send, event } = param;
                send({
                    type: prop("edit") ? "CONTROLLED.EDIT" : "CONTROLLED.PREVIEW",
                    previousEvent: event
                });
            },
            syncInputValue (param) {
                let { context, scope } = param;
                const inputEl = getInputEl(scope);
                if (!inputEl) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(inputEl, context.get("value"));
            },
            setValue (param) {
                let { context, prop, event } = param;
                const max = prop("maxLength");
                const value = max != null ? event.value.slice(0, max) : event.value;
                context.set("value", value);
            },
            setPreviousValue (param) {
                let { context } = param;
                context.set("previousValue", context.get("value"));
            },
            revertValue (param) {
                let { context } = param;
                const value = context.get("previousValue");
                if (!value) return;
                context.set("value", value);
            },
            blurInputIfNeeded (param) {
                let { scope } = param;
                var _getInputEl;
                (_getInputEl = getInputEl(scope)) === null || _getInputEl === void 0 ? void 0 : _getInputEl.blur();
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "activationMode",
    "autoResize",
    "dir",
    "disabled",
    "finalFocusEl",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "maxLength",
    "name",
    "onEditChange",
    "onFocusOutside",
    "onInteractOutside",
    "onPointerDownOutside",
    "onValueChange",
    "onValueCommit",
    "onValueRevert",
    "placeholder",
    "readOnly",
    "required",
    "selectOnFocus",
    "edit",
    "defaultEdit",
    "submitMode",
    "translations",
    "defaultValue",
    "value"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/editable/dist/index.mjs [app-client] (ecmascript) <export anatomy as editableAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "editableAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$editable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$editable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/editable/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/file-utils/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/data-transfer.ts
__turbopack_context__.s([
    "dataURItoBlob",
    ()=>dataURItoBlob,
    "downloadFile",
    ()=>downloadFile,
    "getAcceptAttrString",
    ()=>getAcceptAttrString,
    "getFileDataUrl",
    ()=>getFileDataUrl,
    "getFileEntries",
    ()=>getFileEntries,
    "getFileMimeType",
    ()=>getFileMimeType,
    "getTotalFileSize",
    ()=>getTotalFileSize,
    "isFileEqual",
    ()=>isFileEqual,
    "isValidFileSize",
    ()=>isValidFileSize,
    "isValidFileType",
    ()=>isValidFileType
]);
var getItemEntry = (item)=>typeof item.getAsEntry === "function" ? item.getAsEntry() : typeof item.webkitGetAsEntry === "function" ? item.webkitGetAsEntry() : null;
var isDirectoryEntry = (entry)=>entry.isDirectory;
var isFileEntry = (entry)=>entry.isFile;
var addRelativePath = (file, path)=>{
    Object.defineProperty(file, "relativePath", {
        value: path ? "".concat(path, "/").concat(file.name) : file.name
    });
    return file;
};
var getFileEntries = (items, traverseDirectories)=>Promise.all(Array.from(items).filter((item)=>item.kind === "file").map((item)=>{
        const entry = getItemEntry(item);
        if (!entry) return null;
        if (isDirectoryEntry(entry) && traverseDirectories) {
            return getDirectoryFiles(entry.createReader(), "".concat(entry.name));
        }
        if (isFileEntry(entry) && typeof item.getAsFile === "function") {
            const file = item.getAsFile();
            return Promise.resolve(file ? addRelativePath(file, "") : null);
        }
        if (isFileEntry(entry)) {
            return new Promise((resolve)=>{
                entry.file((file)=>{
                    resolve(addRelativePath(file, ""));
                });
            });
        }
    }).filter((b)=>b));
var getDirectoryFiles = function(reader) {
    let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    return new Promise((resolve)=>{
        const entryPromises = [];
        const readDirectoryEntries = ()=>{
            reader.readEntries((entries)=>{
                if (entries.length === 0) {
                    resolve(Promise.all(entryPromises).then((entries2)=>entries2.flat()));
                    return;
                }
                const promises = entries.map((entry)=>{
                    if (!entry) return null;
                    if (isDirectoryEntry(entry)) {
                        return getDirectoryFiles(entry.createReader(), "".concat(path).concat(entry.name));
                    }
                    if (isFileEntry(entry)) {
                        return new Promise((resolve2)=>{
                            entry.file((file)=>{
                                resolve2(addRelativePath(file, path));
                            });
                        });
                    }
                }).filter((b)=>b);
                entryPromises.push(Promise.all(promises));
                readDirectoryEntries();
            });
        };
        readDirectoryEntries();
    });
};
// src/data-url-to-blob.ts
function dataURItoBlob(uri) {
    const binary = atob(uri.split(",")[1]);
    const mimeString = uri.split(",")[0].split(":")[1].split(";")[0];
    const buffer = new ArrayBuffer(binary.length);
    const intArray = new Uint8Array(buffer);
    for(let i = 0; i < binary.length; i++){
        intArray[i] = binary.charCodeAt(i);
    }
    return new Blob([
        buffer
    ], {
        type: mimeString
    });
}
// src/download-file.ts
var BOM_REGEX = /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i;
var MAC_REGEX = /Macintosh/;
var APPLE_WEBKIT_REGEX = /AppleWebKit/;
var SAFARI_REGEX = /Safari/;
function getBlob(blobOrString, type, appendBOM) {
    let blob = typeof blobOrString === "string" ? new Blob([
        blobOrString
    ], {
        type
    }) : blobOrString;
    if (appendBOM && BOM_REGEX.test(blob.type)) {
        return new Blob([
            String.fromCharCode(65279),
            blob
        ], {
            type: blob.type
        });
    }
    return blob;
}
function isMSEdge(win) {
    return Boolean(win.navigator && win.navigator.msSaveOrOpenBlob);
}
function isWebView(win) {
    return win.navigator && MAC_REGEX.test(win.navigator.userAgent) && APPLE_WEBKIT_REGEX.test(win.navigator.userAgent) && !SAFARI_REGEX.test(win.navigator.userAgent);
}
function downloadFile(options) {
    const { file, win = window, type, name, appendBOM, revokeTimeout = 0 } = options;
    const doc = win.document;
    const blob = getBlob(file, type, appendBOM);
    const fileName = (file instanceof File ? name || file.name : name) || "file-download";
    if (isMSEdge(win)) {
        win.navigator.msSaveOrOpenBlob(blob, fileName);
        return;
    }
    const isMacOSWebView = isWebView(win);
    const anchor = doc.createElement("a");
    const canUseDownload = "download" in anchor && !isMacOSWebView;
    if (canUseDownload) {
        const url2 = win.URL.createObjectURL(blob);
        anchor.href = url2;
        anchor.rel = "noopener";
        anchor.download = fileName;
        anchor.style.display = "none";
        doc.body.appendChild(anchor);
        anchor.dispatchEvent(new win.MouseEvent("click"));
        setTimeout(()=>{
            win.URL.revokeObjectURL(url2);
            anchor.remove();
        }, revokeTimeout);
        return;
    }
    const url = win.URL.createObjectURL(blob);
    const popup = win.open(url, "_blank");
    if (!popup) {
        win.location.href = url;
    }
    setTimeout(()=>{
        win.URL.revokeObjectURL(url);
    }, revokeTimeout);
}
// src/get-accept-attr.ts
function isMIMEType(v) {
    return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
    return /^.*\.[\w]+$/.test(v);
}
var isValidMIME = (v)=>isMIMEType(v) || isExt(v);
function getAcceptAttrString(accept) {
    if (accept == null) return;
    if (typeof accept === "string") {
        return accept;
    }
    if (Array.isArray(accept)) {
        return accept.filter(isValidMIME).join(",");
    }
    return Object.entries(accept).reduce((a, param)=>{
        let [mimeType, ext] = param;
        return [
            ...a,
            mimeType,
            ...ext
        ];
    }, []).filter(isValidMIME).join(",");
}
// src/get-file-data-url.ts
var getFileDataUrl = async (file)=>{
    const reader = new FileReader();
    return new Promise((resolve, reject)=>{
        reader.onerror = ()=>{
            reader.abort();
            reject(new Error("There was an error reading a file"));
        };
        reader.onloadend = ()=>{
            const { result } = reader;
            if (result instanceof ArrayBuffer) {
                reject(new Error("Expected DataURL as string from Blob/File, got ArrayBuffer"));
            } else {
                resolve(result || void 0);
            }
        };
        reader.readAsDataURL(file);
    });
};
// src/get-total-file-size.ts
var getTotalFileSize = (files)=>{
    return files.reduce((acc, file)=>acc + file.size, 0);
};
// src/is-file-equal.ts
var isFileEqual = (file1, file2)=>{
    return file1.name === file2.name && file1.size === file2.size && file1.type === file2.type;
};
// src/is-valid-file-size.ts
var isDefined = (v)=>v !== void 0 && v !== null;
function isValidFileSize(file, minSize, maxSize) {
    if (isDefined(file.size)) {
        if (isDefined(minSize) && isDefined(maxSize)) {
            if (file.size > maxSize) return [
                false,
                "FILE_TOO_LARGE"
            ];
            if (file.size < minSize) return [
                false,
                "FILE_TOO_SMALL"
            ];
        } else if (isDefined(minSize) && file.size < minSize) {
            return [
                false,
                "FILE_TOO_SMALL"
            ];
        } else if (isDefined(maxSize) && file.size > maxSize) {
            return [
                false,
                "FILE_TOO_LARGE"
            ];
        }
    }
    return [
        true,
        null
    ];
}
// src/mime-types.ts
var mimeTypes = "3g2_video/3gpp2[3gp,3gpp_video/3gpp[3mf_model/3mf[7z_application/x-7z-compressed[aac_audio/aac[ac_application/pkix-attr-cert[adp_audio/adpcm[adts_audio/aac[ai_application/postscript[aml_application/automationml-aml+xml[amlx_application/automationml-amlx+zip[amr_audio/amr[apk_application/vnd.android.package-archive[apng_image/apng[appcache,manifest_text/cache-manifest[appinstaller_application/appinstaller[appx_application/appx[appxbundle_application/appxbundle[asc_application/pgp-keys[atom_application/atom+xml[atomcat_application/atomcat+xml[atomdeleted_application/atomdeleted+xml[atomsvc_application/atomsvc+xml[au,snd_audio/basic[avi_video/x-msvideo[avci_image/avci[avcs_image/avcs[avif_image/avif[aw_application/applixware[bdoc_application/bdoc[bin,bpk,buffer,deb,deploy,dist,distz,dll,dmg,dms,dump,elc,exe,img,iso,lrf,mar,msi,msm,msp,pkg,so_application/octet-stream[bmp,dib_image/bmp[btf,btif_image/prs.btif[bz2_application/x-bzip2[c_text/x-c[ccxml_application/ccxml+xml[cdfx_application/cdfx+xml[cdmia_application/cdmi-capability[cdmic_application/cdmi-container[cdmid_application/cdmi-domain[cdmio_application/cdmi-object[cdmiq_application/cdmi-queue[cer_application/pkix-cert[cgm_image/cgm[cjs_application/node[class_application/java-vm[coffee,litcoffee_text/coffeescript[conf,def,in,ini,list,log,text,txt_text/plain[cpp,cxx,cc_text/x-c++src[cpl_application/cpl+xml[cpt_application/mac-compactpro[crl_application/pkix-crl[css_text/css[csv_text/csv[cu_application/cu-seeme[cwl_application/cwl[cww_application/prs.cww[davmount_application/davmount+xml[dbk_application/docbook+xml[doc_application/msword[docx_application/vnd.openxmlformats-officedocument.wordprocessingml.document[dsc_text/prs.lines.tag[dssc_application/dssc+der[dtd_application/xml-dtd[dwd_application/atsc-dwd+xml[ear,jar,war_application/java-archive[ecma_application/ecmascript[emf_image/emf[eml,mime_message/rfc822[emma_application/emma+xml[emotionml_application/emotionml+xml[eot_application/vnd.ms-fontobject[eps,ps_application/postscript[epub_application/epub+zip[exi_application/exi[exp_application/express[exr_image/aces[ez_application/andrew-inset[fdf_application/fdf[fdt_application/fdt+xml[fits_image/fits[flac_audio/flac[flv_video/x-flv[g3_image/g3fax[geojson_application/geo+json[gif_image/gif[glb_model/gltf-binary[gltf_model/gltf+json[gml_application/gml+xml[go_text/x-go[gpx_application/gpx+xml[gz_application/gzip[h_text/x-h[h261_video/h261[h263_video/h263[h264_video/h264[heic_image/heic[heics_image/heic-sequence[heif_image/heif[heifs_image/heif-sequence[htm,html,shtml_text/html[ico_image/x-icon[icns_image/x-icns[ics,ifb_text/calendar[iges,igs_model/iges[ink,inkml_application/inkml+xml[ipa_application/octet-stream[java_text/x-java-source[jp2,jpg2_image/jp2[jpeg,jpe,jpg_image/jpeg[jpf,jpx_image/jpx[jpm,jpgm_image/jpm[jpgv_video/jpeg[jph_image/jph[js,mjs_text/javascript[json_application/json[json5_application/json5[jsonld_application/ld+json[jsx_text/jsx[jxl_image/jxl[jxr_image/jxr[ktx_image/ktx[ktx2_image/ktx2[less_text/less[m1v,m2v,mpe,mpeg,mpg_video/mpeg[m4a_audio/mp4[m4v_video/x-m4v[md,markdown_text/markdown[mid,midi,kar,rmi_audio/midi[mkv_video/x-matroska[mp2,mp2a,mp3,mpga,m3a,m2a_audio/mpeg[mp4,mp4v,mpg4_video/mp4[mp4a_audio/mp4[mp4s,m4p_application/mp4[odp_application/vnd.oasis.opendocument.presentation[oda_application/oda[ods_application/vnd.oasis.opendocument.spreadsheet[odt_application/vnd.oasis.opendocument.text[oga,ogg,opus,spx_audio/ogg[ogv_video/ogg[ogx_application/ogg[otf_font/otf[p12,pfx_application/x-pkcs12[pdf_application/pdf[pem_application/x-pem-file[php_text/x-php[png_image/png[ppt_application/vnd.ms-powerpoint[pptx_application/vnd.openxmlformats-officedocument.presentationml.presentation[pskcxml_application/pskc+xml[psd_image/vnd.adobe.photoshop[py_text/x-python[qt,mov_video/quicktime[rar_application/vnd.rar[rdf_application/rdf+xml[rtf_text/rtf[sass_text/x-sass[scss_text/x-scss[sgm,sgml_text/sgml[sh_application/x-sh[svg,svgz_image/svg+xml[swf_application/x-shockwave-flash[tar_application/x-tar[tif,tiff_image/tiff[toml_application/toml[ts_video/mp2t[tsx_text/tsx[tsv_text/tab-separated-values[ttc_font/collection[ttf_font/ttf[vtt_text/vtt[wasm_application/wasm[wav_audio/wav[weba_audio/webm[webm_video/webm[webmanifest_application/manifest+json[webp_image/webp[wma_audio/x-ms-wma[wmv_video/x-ms-wmv[woff_font/woff[woff2_font/woff2[xls_application/vnd.ms-excel[xlsx_application/vnd.openxmlformats-officedocument.spreadsheetml.sheet[xml_application/xml[xz_application/x-xz[yaml,yml_text/yaml[zip_application/zip";
var mimeTypesMap = new Map(mimeTypes.split("[").flatMap((mime)=>{
    const [extensions, mimeType] = mime.split("_");
    return extensions.split(",").map((ext)=>[
            ext,
            mimeType
        ]);
}));
// src/get-file-mime-type.ts
function getFileMimeType(name) {
    const extension = name.split(".").pop();
    return extension ? mimeTypesMap.get(extension) || null : null;
}
// src/is-valid-file-type.ts
function isFileAccepted(file, accept) {
    if (file && accept) {
        const types = Array.isArray(accept) ? accept : typeof accept === "string" ? accept.split(",") : [];
        if (types.length === 0) return true;
        const fileName = file.name || "";
        const mimeType = (file.type || getFileMimeType(fileName) || "").toLowerCase();
        const baseMimeType = mimeType.replace(/\/.*$/, "");
        return types.some((type)=>{
            const validType = type.trim().toLowerCase();
            if (validType.charAt(0) === ".") {
                return fileName.toLowerCase().endsWith(validType);
            }
            if (validType.endsWith("/*")) {
                return baseMimeType === validType.replace(/\/.*$/, "");
            }
            return mimeType === validType;
        });
    }
    return true;
}
function isValidFileType(file, accept) {
    const isAcceptable = file.type === "application/x-moz-file" || isFileAccepted(file, accept);
    return [
        isAcceptable,
        isAcceptable ? null : "FILE_INVALID_TYPE"
    ];
}
;
}),
"[project]/node_modules/@zag-js/i18n-utils/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createCollator",
    ()=>createCollator,
    "createFilter",
    ()=>createFilter,
    "formatBytes",
    ()=>formatBytes,
    "formatDate",
    ()=>formatDate,
    "formatList",
    ()=>formatList,
    "formatNumber",
    ()=>formatNumber,
    "formatRelativeTime",
    ()=>formatRelativeTime,
    "getDefaultLocale",
    ()=>getDefaultLocale,
    "getLocaleDir",
    ()=>getLocaleDir,
    "isRTL",
    ()=>isRTL,
    "trackLocale",
    ()=>trackLocale
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
;
// src/cache.ts
function i18nCache(Ins) {
    const formatterCache = /* @__PURE__ */ new Map();
    return function create(locale, options) {
        const cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : "");
        if (formatterCache.has(cacheKey)) {
            return formatterCache.get(cacheKey);
        }
        let formatter = new Ins(locale, options);
        formatterCache.set(cacheKey, formatter);
        return formatter;
    };
}
// src/collator.ts
var getCollator = i18nCache(Intl.Collator);
function createCollator() {
    let locale = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "en-US", options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return getCollator(locale, options);
}
// src/filter.ts
var collatorCache = i18nCache(Intl.Collator);
function createFilter(options) {
    const { locale, ...rest } = options || {};
    const collator = collatorCache(locale || "en-US", {
        usage: "search",
        ...rest
    });
    function normalize(string) {
        string = string.normalize("NFC");
        if (collator.resolvedOptions().ignorePunctuation) {
            string = string.replace(RegExp("\\p{P}", "gu"), "");
        }
        return string;
    }
    function startsWith(string, substring) {
        if (substring.length === 0) return true;
        string = normalize(string);
        substring = normalize(substring);
        return collator.compare(string.slice(0, substring.length), substring) === 0;
    }
    function endsWith(string, substring) {
        if (substring.length === 0) return true;
        string = normalize(string);
        substring = normalize(substring);
        return collator.compare(string.slice(-substring.length), substring) === 0;
    }
    function contains(string, substring) {
        if (substring.length === 0) return true;
        string = normalize(string);
        substring = normalize(substring);
        let scan = 0;
        let sliceLen = substring.length;
        for(; scan + sliceLen <= string.length; scan++){
            let slice = string.slice(scan, scan + sliceLen);
            if (collator.compare(substring, slice) === 0) {
                return true;
            }
        }
        return false;
    }
    return {
        startsWith,
        endsWith,
        contains
    };
}
// src/format-number.ts
var getNumberFormatter = i18nCache(Intl.NumberFormat);
function formatNumber(v, locale) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const formatter = getNumberFormatter(locale, options);
    return formatter.format(v);
}
// src/format-bytes.ts
var bitPrefixes = [
    "",
    "kilo",
    "mega",
    "giga",
    "tera"
];
var bytePrefixes = [
    "",
    "kilo",
    "mega",
    "giga",
    "tera",
    "peta"
];
var formatBytes = function(bytes) {
    let locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US", options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (isNaN(bytes)) return "";
    if (bytes === 0) return "0 B";
    const { unit = "byte", unitDisplay = "short" } = options;
    const prefix = unit === "bit" ? bitPrefixes : bytePrefixes;
    const index = Math.max(0, Math.min(Math.floor(Math.log10(bytes) / 3), prefix.length - 1));
    const _unit = prefix[index] + unit;
    const _unitDisplay = unitDisplay || "short";
    const v = parseFloat((bytes / Math.pow(1e3, index)).toPrecision(3));
    return formatNumber(v, locale, {
        style: "unit",
        unit: _unit,
        unitDisplay: _unitDisplay
    });
};
// src/format-date.ts
var symbols = "\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";
function createRegEx(sign) {
    return new RegExp("(^|>|" + symbols + ")(" + sign + ")($|<|" + symbols + ")", "g");
}
var FORMATS = [
    "G",
    "GG",
    "GGG",
    "GGGG",
    "GGGGG",
    "y",
    "yo",
    "yy",
    "yyy",
    "yyyy",
    "Y",
    "Yo",
    "YY",
    "YYY",
    "YYYY",
    "Q",
    "Qo",
    "QQ",
    "QQQ",
    "QQQQ",
    "QQQQQ",
    "M",
    "Mo",
    "MM",
    "MMM",
    "MMMM",
    "MMMMM",
    "E",
    "EE",
    "EEE",
    "EEEE",
    "EEEEE",
    "EEEEEE",
    "a",
    "aa",
    "aaa",
    "aaaa",
    "aaaaa",
    "d",
    "do",
    "dd",
    "D",
    "Do",
    "DD",
    "DDD",
    "w",
    "wo",
    "ww",
    "s",
    "so",
    "ss",
    "m",
    "mo",
    "mm",
    "h",
    "ho",
    "hh",
    "H",
    "Ho",
    "HH",
    "z",
    "zz",
    "zzz",
    "zzzz",
    "T"
];
function ordinal(num) {
    const n = typeof num === "string" ? parseFloat(num) : num;
    let suffix = "th";
    if (n % 10 === 1 && n % 100 !== 11) {
        suffix = "st";
    } else if (n % 10 === 2 && n % 100 !== 12) {
        suffix = "nd";
    } else if (n % 10 === 3 && n % 100 !== 13) {
        suffix = "rd";
    }
    return "".concat(n).concat(suffix);
}
function pad(num, length) {
    return String(num).padStart(length, "0");
}
function zone(str) {
    return str.split(/AM|PM/)[1].trim();
}
function getFormat(date, options) {
    const { locale, format, timeZone } = options;
    switch(format){
        // era
        case "G":
        case "GG":
        case "GGG":
            return date.toLocaleString(locale, {
                era: "short"
            });
        case "GGGG":
            return date.toLocaleString(locale, {
                era: "long"
            });
        case "GGGGG":
            return date.toLocaleString(locale, {
                era: "narrow"
            });
        // year
        case "y":
        case "Y":
            return date.getFullYear();
        case "yo":
        case "Yo":
            return ordinal(date.toLocaleString(locale, {
                year: "numeric"
            }));
        case "yy":
        case "YY":
            return date.toLocaleString(locale, {
                year: "2-digit"
            });
        case "yyy":
        case "YYY":
            return date.toLocaleString(locale, {
                year: "numeric"
            }).padStart(3, "0");
        case "yyyy":
        case "YYYY":
            return date.toLocaleString(locale, {
                year: "numeric"
            }).padStart(4, "0");
        // quarter
        case "Q":
        case "QQQQQ":
            return Math.ceil((date.getMonth() + 1) / 3);
        case "Qo":
            return ordinal(Math.ceil((date.getMonth() + 1) / 3));
        case "QQ":
            return pad(Math.ceil((date.getMonth() + 1) / 3), 2);
        case "QQQ":
            return "Q".concat(Math.ceil((date.getMonth() + 1) / 3));
        case "QQQQ":
            {
                const base = ordinal(String(Math.ceil((date.getMonth() + 1) / 3)));
                return "".concat(base, " quarter");
            }
        // month
        case "M":
            return date.getMonth() + 1;
        case "Mo":
            return ordinal(date.getMonth() + 1);
        case "MM":
            return date.toLocaleString(locale, {
                month: "2-digit"
            });
        case "MMM":
            return date.toLocaleString(locale, {
                month: "short"
            });
        case "MMMM":
            return date.toLocaleString(locale, {
                month: "long"
            });
        case "MMMMM":
            return date.toLocaleString(locale, {
                month: "narrow"
            });
        // week
        case "w":
            return Math.ceil(date.getDate() / 7);
        case "wo":
            return ordinal(Math.ceil(date.getDate() / 7));
        case "ww":
            return pad(Math.ceil(date.getDate() / 7), 2);
        // day
        case "d":
        case "D":
            return date.getDate();
        case "do":
        case "Do":
            return ordinal(date.getDate());
        case "dd":
        case "DD":
            return date.toLocaleString(locale, {
                day: "2-digit"
            });
        case "DDD":
            return pad(date.getDate(), 3);
        // weekday
        case "E":
        case "EE":
        case "EEE":
            return date.toLocaleString(locale, {
                weekday: "short"
            });
        case "EEEE":
            return date.toLocaleString(locale, {
                weekday: "long"
            });
        case "EEEEE":
            return date.toLocaleString(locale, {
                weekday: "narrow"
            });
        case "EEEEEE":
            return date.toLocaleString(locale, {
                weekday: "short"
            }).slice(0, 2);
        // hour
        case "h":
            return date.toLocaleString(locale, {
                hour: "numeric",
                hour12: true
            });
        case "ho":
            return ordinal(date.toLocaleString(locale, {
                hour: "2-digit",
                hour12: true
            }));
        case "hh":
            return date.toLocaleString(locale, {
                hour: "2-digit",
                hour12: true
            });
        case "H":
            return date.toLocaleString(locale, {
                hour: "numeric",
                hour12: false
            });
        case "Ho":
            return ordinal(+date.toLocaleString(locale, {
                hour: "numeric",
                hour12: false
            }));
        case "HH":
            return date.toLocaleString(locale, {
                hour: "2-digit",
                hour12: false
            });
        // minute
        case "m":
            return date.toLocaleString(locale, {
                minute: "numeric"
            });
        case "mo":
            return ordinal(date.toLocaleString(locale, {
                minute: "numeric"
            }));
        case "mm":
            return date.toLocaleString(locale, {
                minute: "2-digit"
            });
        // second
        case "s":
            return date.toLocaleString(locale, {
                second: "numeric"
            });
        case "so":
            return ordinal(date.toLocaleString(locale, {
                second: "numeric"
            }));
        case "ss":
            return date.toLocaleString(locale, {
                second: "2-digit"
            });
        // timestamp
        case "T":
            return date.getTime();
        // day period
        case "a":
        case "aa":
        case "aaa":
            return date.toLocaleString(locale, {
                hour: "numeric",
                hour12: true
            }).toLocaleUpperCase();
        case "aaaa":
            return date.toLocaleString(locale, {
                hour: "numeric",
                hour12: true
            }).toLocaleLowerCase();
        case "aaaaa":
            return date.toLocaleString(locale, {
                hour: "numeric",
                hour12: true
            }).charAt(0);
        // TODO:Revise this
        case "z":
        case "zz":
        case "zzz":
            {
                return zone(date.toLocaleString(locale, {
                    timeZone,
                    timeZoneName: "shortOffset"
                }));
            }
        case "zzzz":
            return zone(date.toLocaleString(locale, {
                timeZone,
                timeZoneName: "longOffset"
            }));
        default:
            throw new Error("Unknown format: ".concat(format));
    }
}
function formatDate(date, format, locale, timeZone) {
    let result = format;
    for (const key of FORMATS){
        const res = getFormat(date, {
            locale,
            format: key,
            timeZone
        });
        result = result.replace(createRegEx(key), "$1" + res + "$3");
    }
    return result;
}
// src/format-list.ts
var getListFormatter = i18nCache(Intl.ListFormat);
function formatList(list, locale) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const formatter = getListFormatter(locale, options);
    return formatter.format(list);
}
// src/format-relative-time.ts
var getRelativeTimeFormatter = i18nCache(Intl.RelativeTimeFormat);
function formatRelativeTime(value, locale) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const rtf = getRelativeTimeFormatter(locale, options);
    const now = /* @__PURE__ */ new Date();
    const diff = getDistance(now, value);
    if (diff.years > 0) return rtf.format(diff.years * diff.sign, "year");
    if (diff.months > 0) return rtf.format(diff.months * diff.sign, "month");
    if (diff.weeks > 0) return rtf.format(diff.weeks * diff.sign, "week");
    if (diff.days > 0) return rtf.format(diff.days * diff.sign, "day");
    if (diff.hours > 0) return rtf.format(diff.hours * diff.sign, "hour");
    if (diff.minutes > 0) return rtf.format(diff.minutes * diff.sign, "minute");
    return rtf.format(diff.seconds * diff.sign, "second");
}
var SECOND_TO_MS = 1e3;
var MINUTE_TO_MS = 1e3 * 60;
var HOUR_TO_MS = 1e3 * 60 * 60;
var DAY_TO_MS = 1e3 * 60 * 60 * 24;
var WEEK_TO_MS = 1e3 * 60 * 60 * 24 * 7;
var MONTH_TO_MS = 1e3 * 60 * 60 * 24 * 30;
var YEAR_TO_MS = 1e3 * 60 * 60 * 24 * 365;
function getDistance(startDate, endDate) {
    const endTime = endDate.getTime();
    const startTime = startDate.getTime();
    const distance = Math.abs(endTime - startTime);
    return {
        sign: Math.sign(endTime - startTime),
        days: Math.floor(distance / DAY_TO_MS),
        hours: Math.floor(distance % DAY_TO_MS / HOUR_TO_MS),
        minutes: Math.floor(distance % HOUR_TO_MS / MINUTE_TO_MS),
        seconds: Math.floor(distance % MINUTE_TO_MS / SECOND_TO_MS),
        weeks: Math.floor(distance / WEEK_TO_MS),
        months: Math.floor(distance / MONTH_TO_MS),
        years: Math.floor(distance / YEAR_TO_MS)
    };
}
// src/is-rtl.ts
var RTL_SCRIPTS = /* @__PURE__ */ new Set([
    "Avst",
    "Arab",
    "Armi",
    "Syrc",
    "Samr",
    "Mand",
    "Thaa",
    "Mend",
    "Nkoo",
    "Adlm",
    "Rohg",
    "Hebr"
]);
var RTL_LANGS = /* @__PURE__ */ new Set([
    "ae",
    "ar",
    "arc",
    "bcc",
    "bqi",
    "ckb",
    "dv",
    "fa",
    "glk",
    "he",
    "ku",
    "mzn",
    "nqo",
    "pnb",
    "ps",
    "sd",
    "ug",
    "ur",
    "yi"
]);
function isRTL(locale) {
    if (Intl.Locale) {
        var _maximize_script;
        const script = (_maximize_script = new Intl.Locale(locale).maximize().script) !== null && _maximize_script !== void 0 ? _maximize_script : "";
        return RTL_SCRIPTS.has(script);
    }
    const lang = locale.split("-")[0];
    return RTL_LANGS.has(lang);
}
function getLocaleDir(locale) {
    return isRTL(locale) ? "rtl" : "ltr";
}
// src/locale.ts
function getDefaultLocale() {
    let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
    return {
        locale,
        dir: isRTL(locale) ? "rtl" : "ltr"
    };
}
function trackLocale() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const { getRootNode, onLocaleChange } = options;
    onLocaleChange === null || onLocaleChange === void 0 ? void 0 : onLocaleChange(getDefaultLocale());
    const handleLocaleChange = ()=>{
        onLocaleChange === null || onLocaleChange === void 0 ? void 0 : onLocaleChange(getDefaultLocale());
    };
    const win = getRootNode ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(getRootNode()) : window;
    win.addEventListener("languagechange", handleLocaleChange);
    return ()=>{
        win.removeEventListener("languagechange", handleLocaleChange);
    };
}
;
}),
"[project]/node_modules/@zag-js/file-upload/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/file-utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$i18n$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/i18n-utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
// src/file-upload.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("file-upload").parts("root", "dropzone", "item", "itemDeleteTrigger", "itemGroup", "itemName", "itemPreview", "itemPreviewImage", "itemSizeText", "label", "trigger", "clearTrigger");
var parts = anatomy.build();
// src/file-upload.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "file:".concat(ctx.id);
};
var getDropzoneId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_dropzone;
    return (_ctx_ids_dropzone = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.dropzone) !== null && _ctx_ids_dropzone !== void 0 ? _ctx_ids_dropzone : "file:".concat(ctx.id, ":dropzone");
};
var getHiddenInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_hiddenInput;
    return (_ctx_ids_hiddenInput = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.hiddenInput) !== null && _ctx_ids_hiddenInput !== void 0 ? _ctx_ids_hiddenInput : "file:".concat(ctx.id, ":input");
};
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "file:".concat(ctx.id, ":trigger");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "file:".concat(ctx.id, ":label");
};
var getItemId = (ctx, id)=>{
    var _ctx_ids_item, _ctx_ids;
    var _ctx_ids_item1;
    return (_ctx_ids_item1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_item = _ctx_ids.item) === null || _ctx_ids_item === void 0 ? void 0 : _ctx_ids_item.call(_ctx_ids, id)) !== null && _ctx_ids_item1 !== void 0 ? _ctx_ids_item1 : "file:".concat(ctx.id, ":item:").concat(id);
};
var getItemNameId = (ctx, id)=>{
    var _ctx_ids_itemName, _ctx_ids;
    var _ctx_ids_itemName1;
    return (_ctx_ids_itemName1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemName = _ctx_ids.itemName) === null || _ctx_ids_itemName === void 0 ? void 0 : _ctx_ids_itemName.call(_ctx_ids, id)) !== null && _ctx_ids_itemName1 !== void 0 ? _ctx_ids_itemName1 : "file:".concat(ctx.id, ":item-name:").concat(id);
};
var getItemSizeTextId = (ctx, id)=>{
    var _ctx_ids_itemSizeText, _ctx_ids;
    var _ctx_ids_itemSizeText1;
    return (_ctx_ids_itemSizeText1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemSizeText = _ctx_ids.itemSizeText) === null || _ctx_ids_itemSizeText === void 0 ? void 0 : _ctx_ids_itemSizeText.call(_ctx_ids, id)) !== null && _ctx_ids_itemSizeText1 !== void 0 ? _ctx_ids_itemSizeText1 : "file:".concat(ctx.id, ":item-size:").concat(id);
};
var getItemPreviewId = (ctx, id)=>{
    var _ctx_ids_itemPreview, _ctx_ids;
    var _ctx_ids_itemPreview1;
    return (_ctx_ids_itemPreview1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemPreview = _ctx_ids.itemPreview) === null || _ctx_ids_itemPreview === void 0 ? void 0 : _ctx_ids_itemPreview.call(_ctx_ids, id)) !== null && _ctx_ids_itemPreview1 !== void 0 ? _ctx_ids_itemPreview1 : "file:".concat(ctx.id, ":item-preview:").concat(id);
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getHiddenInputEl = (ctx)=>ctx.getById(getHiddenInputId(ctx));
var getDropzoneEl = (ctx)=>ctx.getById(getDropzoneId(ctx));
function isEventWithFiles(event) {
    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
    if (!event.dataTransfer) return !!target && "files" in target;
    return event.dataTransfer.types.some((type)=>{
        return type === "Files" || type === "application/x-moz-file";
    });
}
function isFilesWithinRange(ctx, incomingCount, currentAcceptedFiles) {
    const { prop, computed } = ctx;
    if (!computed("multiple") && incomingCount > 1) return false;
    if (!computed("multiple") && incomingCount + currentAcceptedFiles.length === 2) return true;
    if (incomingCount + currentAcceptedFiles.length > prop("maxFiles")) return false;
    return true;
}
function getEventFiles(ctx, files) {
    let currentAcceptedFiles = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], currentRejectedFiles = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
    const { prop, computed } = ctx;
    const acceptedFiles = [];
    const rejectedFiles = [];
    const validateParams = {
        acceptedFiles: currentAcceptedFiles,
        rejectedFiles: currentRejectedFiles
    };
    files.forEach((file)=>{
        var _prop;
        const [accepted, acceptError] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidFileType"])(file, computed("acceptAttr"));
        const [sizeMatch, sizeError] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidFileSize"])(file, prop("minFileSize"), prop("maxFileSize"));
        const validateErrors = (_prop = prop("validate")) === null || _prop === void 0 ? void 0 : _prop(file, validateParams);
        const valid = validateErrors ? validateErrors.length === 0 : true;
        if (accepted && sizeMatch && valid) {
            acceptedFiles.push(file);
        } else {
            const errors = [
                acceptError,
                sizeError
            ];
            if (!valid) errors.push(...validateErrors !== null && validateErrors !== void 0 ? validateErrors : []);
            rejectedFiles.push({
                file,
                errors: errors.filter(Boolean)
            });
        }
    });
    if (!isFilesWithinRange(ctx, acceptedFiles.length, currentAcceptedFiles)) {
        acceptedFiles.forEach((file)=>{
            rejectedFiles.push({
                file,
                errors: [
                    "TOO_MANY_FILES"
                ]
            });
        });
        acceptedFiles.splice(0);
    }
    return {
        acceptedFiles,
        rejectedFiles
    };
}
function setInputFiles(inputEl, files) {
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(inputEl);
    try {
        if ("DataTransfer" in win) {
            const dataTransfer = new win.DataTransfer();
            files.forEach((file)=>{
                dataTransfer.items.add(file);
            });
            inputEl.files = dataTransfer.files;
        }
    } catch (e) {}
}
// src/file-upload.connect.ts
function connect(service, normalize) {
    const { state, send, prop, computed, scope, context } = service;
    const disabled = prop("disabled");
    const allowDrop = prop("allowDrop");
    const translations = prop("translations");
    const dragging = state.matches("dragging");
    const focused = state.matches("focused") && !disabled;
    return {
        dragging,
        focused,
        disabled: !!disabled,
        transforming: context.get("transforming"),
        openFilePicker () {
            if (disabled) return;
            send({
                type: "OPEN"
            });
        },
        deleteFile (file) {
            send({
                type: "FILE.DELETE",
                file
            });
        },
        acceptedFiles: context.get("acceptedFiles"),
        rejectedFiles: context.get("rejectedFiles"),
        setFiles (files) {
            send({
                type: "FILES.SET",
                files,
                count: files.length
            });
        },
        clearRejectedFiles () {
            send({
                type: "REJECTED_FILES.CLEAR"
            });
        },
        clearFiles () {
            send({
                type: "FILES.CLEAR"
            });
        },
        getFileSize (file) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$i18n$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["formatBytes"])(file.size, prop("locale"));
        },
        createFileUrl (file, cb) {
            const win = scope.getWin();
            const url = win.URL.createObjectURL(file);
            cb(url);
            return ()=>win.URL.revokeObjectURL(url);
        },
        setClipboardFiles (dt) {
            if (disabled) return false;
            var _dt_items;
            const items = Array.from((_dt_items = dt === null || dt === void 0 ? void 0 : dt.items) !== null && _dt_items !== void 0 ? _dt_items : []);
            const files = items.reduce((acc, item)=>{
                if (item.kind !== "file") return acc;
                const file = item.getAsFile();
                if (!file) return acc;
                return [
                    ...acc,
                    file
                ];
            }, []);
            if (!files.length) return false;
            send({
                type: "FILES.SET",
                files
            });
            return true;
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging)
            });
        },
        getDropzoneProps () {
            let props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            return normalize.element({
                ...parts.dropzone.attrs,
                dir: prop("dir"),
                id: getDropzoneId(scope),
                tabIndex: disabled || props2.disableClick ? void 0 : 0,
                role: props2.disableClick ? "application" : "button",
                "aria-label": translations.dropzone,
                "aria-disabled": disabled,
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging),
                onKeyDown (event) {
                    if (disabled) return;
                    if (event.defaultPrevented) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    if (props2.disableClick) return;
                    if (event.key !== "Enter" && event.key !== " ") return;
                    send({
                        type: "DROPZONE.CLICK",
                        src: "keydown"
                    });
                },
                onClick (event) {
                    if (disabled) return;
                    if (event.defaultPrevented) return;
                    if (props2.disableClick) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    if (event.currentTarget.localName === "label") {
                        event.preventDefault();
                    }
                    send({
                        type: "DROPZONE.CLICK"
                    });
                },
                onDragOver (event) {
                    if (disabled) return;
                    if (!allowDrop) return;
                    event.preventDefault();
                    event.stopPropagation();
                    try {
                        event.dataTransfer.dropEffect = "copy";
                    } catch (e) {}
                    const hasFiles = isEventWithFiles(event);
                    if (!hasFiles) return;
                    const count = event.dataTransfer.items.length;
                    send({
                        type: "DROPZONE.DRAG_OVER",
                        count
                    });
                },
                onDragLeave (event) {
                    if (disabled) return;
                    if (!allowDrop) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(event.currentTarget, event.relatedTarget)) return;
                    send({
                        type: "DROPZONE.DRAG_LEAVE"
                    });
                },
                onDrop (event) {
                    if (disabled) return;
                    if (allowDrop) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    const hasFiles = isEventWithFiles(event);
                    if (disabled || !hasFiles) return;
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFileEntries"])(event.dataTransfer.items, prop("directory")).then((files)=>{
                        send({
                            type: "DROPZONE.DROP",
                            files: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["flatArray"])(files)
                        });
                    });
                },
                onFocus () {
                    if (disabled) return;
                    send({
                        type: "DROPZONE.FOCUS"
                    });
                },
                onBlur () {
                    if (disabled) return;
                    send({
                        type: "DROPZONE.BLUR"
                    });
                }
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                dir: prop("dir"),
                id: getTriggerId(scope),
                disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid")),
                type: "button",
                onClick (event) {
                    if (disabled) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(getDropzoneEl(scope), event.currentTarget)) {
                        event.stopPropagation();
                    }
                    send({
                        type: "OPEN"
                    });
                }
            });
        },
        getHiddenInputProps () {
            return normalize.input({
                id: getHiddenInputId(scope),
                tabIndex: -1,
                disabled,
                type: "file",
                required: prop("required"),
                capture: prop("capture"),
                name: prop("name"),
                accept: computed("acceptAttr"),
                webkitdirectory: prop("directory") ? "" : void 0,
                multiple: computed("multiple") || prop("maxFiles") > 1,
                onClick (event) {
                    event.stopPropagation();
                    event.currentTarget.value = "";
                },
                onInput (event) {
                    if (disabled) return;
                    const { files } = event.currentTarget;
                    send({
                        type: "FILE.SELECT",
                        files: files ? Array.from(files) : []
                    });
                },
                style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visuallyHiddenStyle"]
            });
        },
        getItemGroupProps () {
            return normalize.element({
                ...parts.itemGroup.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getItemProps (props2) {
            const { file } = props2;
            return normalize.element({
                ...parts.item.attrs,
                dir: prop("dir"),
                id: getItemId(scope, file.name),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getItemNameProps (props2) {
            const { file } = props2;
            return normalize.element({
                ...parts.itemName.attrs,
                dir: prop("dir"),
                id: getItemNameId(scope, file.name),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getItemSizeTextProps (props2) {
            const { file } = props2;
            return normalize.element({
                ...parts.itemSizeText.attrs,
                dir: prop("dir"),
                id: getItemSizeTextId(scope, file.name),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getItemPreviewProps (props2) {
            const { file } = props2;
            return normalize.element({
                ...parts.itemPreview.attrs,
                dir: prop("dir"),
                id: getItemPreviewId(scope, file.name),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getItemPreviewImageProps (props2) {
            var _translations_itemPreview;
            const { file, url } = props2;
            const isImage = file.type.startsWith("image/");
            if (!isImage) {
                throw new Error("Preview Image is only supported for image files");
            }
            return normalize.img({
                ...parts.itemPreviewImage.attrs,
                alt: (_translations_itemPreview = translations.itemPreview) === null || _translations_itemPreview === void 0 ? void 0 : _translations_itemPreview.call(translations, file),
                src: url,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getItemDeleteTriggerProps (props2) {
            var _translations_deleteFile;
            const { file } = props2;
            return normalize.button({
                ...parts.itemDeleteTrigger.attrs,
                dir: prop("dir"),
                type: "button",
                disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "aria-label": (_translations_deleteFile = translations.deleteFile) === null || _translations_deleteFile === void 0 ? void 0 : _translations_deleteFile.call(translations, file),
                onClick () {
                    if (disabled) return;
                    send({
                        type: "FILE.DELETE",
                        file
                    });
                }
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                dir: prop("dir"),
                id: getLabelId(scope),
                htmlFor: getHiddenInputId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getClearTriggerProps () {
            return normalize.button({
                ...parts.clearTrigger.attrs,
                dir: prop("dir"),
                type: "button",
                disabled,
                hidden: context.get("acceptedFiles").length === 0,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    send({
                        type: "FILES.CLEAR"
                    });
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            minFileSize: 0,
            maxFileSize: Number.POSITIVE_INFINITY,
            maxFiles: 1,
            allowDrop: true,
            preventDocumentDrop: true,
            defaultAcceptedFiles: [],
            ...props2,
            translations: {
                dropzone: "dropzone",
                itemPreview: (file)=>"preview of ".concat(file.name),
                deleteFile: (file)=>"delete file ".concat(file.name),
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable, getContext } = param;
        return {
            acceptedFiles: bindable(()=>({
                    defaultValue: prop("defaultAcceptedFiles"),
                    value: prop("acceptedFiles"),
                    isEqual: (a, b)=>a.length === (b === null || b === void 0 ? void 0 : b.length) && a.every((file, i)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFileEqual"])(file, b[i])),
                    hash (value) {
                        return value.map((file)=>"".concat(file.name, "-").concat(file.size)).join(",");
                    },
                    onChange (value) {
                        var _prop, _prop1;
                        const ctx = getContext();
                        (_prop = prop("onFileAccept")) === null || _prop === void 0 ? void 0 : _prop({
                            files: value
                        });
                        (_prop1 = prop("onFileChange")) === null || _prop1 === void 0 ? void 0 : _prop1({
                            acceptedFiles: value,
                            rejectedFiles: ctx.get("rejectedFiles")
                        });
                    }
                })),
            rejectedFiles: bindable(()=>({
                    defaultValue: [],
                    isEqual: (a, b)=>a.length === (b === null || b === void 0 ? void 0 : b.length) && a.every((file, i)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFileEqual"])(file.file, b[i].file)),
                    onChange (value) {
                        var _prop, _prop1;
                        const ctx = getContext();
                        (_prop = prop("onFileReject")) === null || _prop === void 0 ? void 0 : _prop({
                            files: value
                        });
                        (_prop1 = prop("onFileChange")) === null || _prop1 === void 0 ? void 0 : _prop1({
                            acceptedFiles: ctx.get("acceptedFiles"),
                            rejectedFiles: value
                        });
                    }
                })),
            transforming: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    computed: {
        acceptAttr: (param)=>{
            let { prop } = param;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAcceptAttrString"])(prop("accept"));
        },
        multiple: (param)=>{
            let { prop } = param;
            return prop("maxFiles") > 1;
        }
    },
    watch (param) {
        let { track, context, action } = param;
        track([
            ()=>context.hash("acceptedFiles")
        ], ()=>{
            action([
                "syncInputElement"
            ]);
        });
    },
    on: {
        "FILES.SET": {
            actions: [
                "setFiles"
            ]
        },
        "FILE.SELECT": {
            actions: [
                "setEventFiles"
            ]
        },
        "FILE.DELETE": {
            actions: [
                "removeFile"
            ]
        },
        "FILES.CLEAR": {
            actions: [
                "clearFiles"
            ]
        },
        "REJECTED_FILES.CLEAR": {
            actions: [
                "clearRejectedFiles"
            ]
        }
    },
    effects: [
        "preventDocumentDrop"
    ],
    states: {
        idle: {
            on: {
                OPEN: {
                    actions: [
                        "openFilePicker"
                    ]
                },
                "DROPZONE.CLICK": {
                    actions: [
                        "openFilePicker"
                    ]
                },
                "DROPZONE.FOCUS": {
                    target: "focused"
                },
                "DROPZONE.DRAG_OVER": {
                    target: "dragging"
                }
            }
        },
        focused: {
            on: {
                "DROPZONE.BLUR": {
                    target: "idle"
                },
                OPEN: {
                    actions: [
                        "openFilePicker"
                    ]
                },
                "DROPZONE.CLICK": {
                    actions: [
                        "openFilePicker"
                    ]
                },
                "DROPZONE.DRAG_OVER": {
                    target: "dragging"
                }
            }
        },
        dragging: {
            on: {
                "DROPZONE.DROP": {
                    target: "idle",
                    actions: [
                        "setEventFiles"
                    ]
                },
                "DROPZONE.DRAG_LEAVE": {
                    target: "idle"
                }
            }
        }
    },
    implementations: {
        effects: {
            preventDocumentDrop (param) {
                let { prop, scope } = param;
                if (!prop("preventDocumentDrop")) return;
                if (!prop("allowDrop")) return;
                if (prop("disabled")) return;
                const doc = scope.getDoc();
                const onDragOver = (event)=>{
                    event === null || event === void 0 ? void 0 : event.preventDefault();
                };
                const onDrop = (event)=>{
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(getRootEl(scope), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event))) return;
                    event.preventDefault();
                };
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callAll"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "dragover", onDragOver, false), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "drop", onDrop, false));
            }
        },
        actions: {
            syncInputElement (param) {
                let { scope, context } = param;
                queueMicrotask(()=>{
                    const inputEl = getHiddenInputEl(scope);
                    if (!inputEl) return;
                    setInputFiles(inputEl, context.get("acceptedFiles"));
                    const win = scope.getWin();
                    inputEl.dispatchEvent(new win.Event("change", {
                        bubbles: true
                    }));
                });
            },
            openFilePicker (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _getHiddenInputEl;
                    (_getHiddenInputEl = getHiddenInputEl(scope)) === null || _getHiddenInputEl === void 0 ? void 0 : _getHiddenInputEl.click();
                });
            },
            setFiles (params) {
                const { computed, context, event } = params;
                const { acceptedFiles, rejectedFiles } = getEventFiles(params, event.files);
                context.set("acceptedFiles", computed("multiple") ? acceptedFiles : acceptedFiles.length > 0 ? [
                    acceptedFiles[0]
                ] : []);
                context.set("rejectedFiles", rejectedFiles);
            },
            setEventFiles (params) {
                const { computed, context, event, prop } = params;
                const currentAcceptedFiles = context.get("acceptedFiles");
                const currentRejectedFiles = context.get("rejectedFiles");
                const { acceptedFiles, rejectedFiles } = getEventFiles(params, event.files, currentAcceptedFiles, currentRejectedFiles);
                const set = (files)=>{
                    if (computed("multiple")) {
                        context.set("acceptedFiles", (prev)=>[
                                ...prev,
                                ...files
                            ]);
                        context.set("rejectedFiles", rejectedFiles);
                        return;
                    }
                    if (files.length) {
                        context.set("acceptedFiles", [
                            files[0]
                        ]);
                        context.set("rejectedFiles", rejectedFiles);
                        return;
                    }
                    if (rejectedFiles.length) {
                        context.set("acceptedFiles", context.get("acceptedFiles"));
                        context.set("rejectedFiles", rejectedFiles);
                    }
                };
                const transform = prop("transformFiles");
                if (transform) {
                    context.set("transforming", true);
                    transform(acceptedFiles).then(set).catch((err)=>{
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warn"])("[zag-js/file-upload] error transforming files\n".concat(err));
                    }).finally(()=>{
                        context.set("transforming", false);
                    });
                } else {
                    set(acceptedFiles);
                }
            },
            removeFile (param) {
                let { context, event } = param;
                const files = context.get("acceptedFiles").filter((file)=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFileEqual"])(file, event.file));
                const rejectedFiles = context.get("rejectedFiles").filter((item)=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFileEqual"])(item.file, event.file));
                context.set("acceptedFiles", files);
                context.set("rejectedFiles", rejectedFiles);
            },
            clearRejectedFiles (param) {
                let { context } = param;
                context.set("rejectedFiles", []);
            },
            clearFiles (param) {
                let { context } = param;
                context.set("acceptedFiles", []);
                context.set("rejectedFiles", []);
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "accept",
    "acceptedFiles",
    "allowDrop",
    "capture",
    "defaultAcceptedFiles",
    "dir",
    "directory",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "locale",
    "maxFiles",
    "maxFileSize",
    "minFileSize",
    "name",
    "onFileAccept",
    "onFileChange",
    "onFileReject",
    "preventDocumentDrop",
    "required",
    "transformFiles",
    "translations",
    "validate"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "file"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
;
}),
"[project]/node_modules/@zag-js/file-upload/dist/index.mjs [app-client] (ecmascript) <export anatomy as fileUploadAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "fileUploadAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$upload$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$upload$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/file-upload/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/focus-visible/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "getInteractionModality",
    ()=>getInteractionModality,
    "isFocusVisible",
    ()=>isFocusVisible,
    "listenerMap",
    ()=>listenerMap,
    "setInteractionModality",
    ()=>setInteractionModality,
    "trackFocusVisible",
    ()=>trackFocusVisible,
    "trackInteractionModality",
    ()=>trackInteractionModality
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
;
// src/index.ts
function isValidKey(e) {
    return !(e.metaKey || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMac"])() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
var nonTextInputTypes = /* @__PURE__ */ new Set([
    "checkbox",
    "radio",
    "range",
    "color",
    "file",
    "image",
    "button",
    "submit",
    "reset"
]);
function isKeyboardFocusEvent(isTextInput, modality, e) {
    const target = e ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(e) : null;
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(target);
    isTextInput = isTextInput || target instanceof win.HTMLInputElement && !nonTextInputTypes.has(target === null || target === void 0 ? void 0 : target.type) || target instanceof win.HTMLTextAreaElement || target instanceof win.HTMLElement && target.isContentEditable;
    return !(isTextInput && modality === "keyboard" && e instanceof win.KeyboardEvent && !Reflect.has(FOCUS_VISIBLE_INPUT_KEYS, e.key));
}
var currentModality = null;
var changeHandlers = /* @__PURE__ */ new Set();
var listenerMap = /* @__PURE__ */ new Map();
var hasEventBeforeFocus = false;
var hasBlurredWindowRecently = false;
var FOCUS_VISIBLE_INPUT_KEYS = {
    Tab: true,
    Escape: true
};
function triggerChangeHandlers(modality, e) {
    for (let handler of changeHandlers){
        handler(modality, e);
    }
}
function handleKeyboardEvent(e) {
    hasEventBeforeFocus = true;
    if (isValidKey(e)) {
        currentModality = "keyboard";
        triggerChangeHandlers("keyboard", e);
    }
}
function handlePointerEvent(e) {
    currentModality = "pointer";
    if (e.type === "mousedown" || e.type === "pointerdown") {
        hasEventBeforeFocus = true;
        triggerChangeHandlers("pointer", e);
    }
}
function handleClickEvent(e) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isVirtualClick"])(e)) {
        hasEventBeforeFocus = true;
        currentModality = "virtual";
    }
}
function handleFocusEvent(e) {
    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(e);
    if (target === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(target) || target === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(target)) {
        return;
    }
    if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {
        currentModality = "virtual";
        triggerChangeHandlers("virtual", e);
    }
    hasEventBeforeFocus = false;
    hasBlurredWindowRecently = false;
}
function handleWindowBlur() {
    hasEventBeforeFocus = false;
    hasBlurredWindowRecently = true;
}
function setupGlobalFocusEvents(root) {
    if (typeof window === "undefined" || listenerMap.get((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(root))) {
        return;
    }
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(root);
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(root);
    let focus = win.HTMLElement.prototype.focus;
    function patchedFocus() {
        currentModality = "virtual";
        triggerChangeHandlers("virtual", null);
        hasEventBeforeFocus = true;
        focus.apply(this, arguments);
    }
    Object.defineProperty(win.HTMLElement.prototype, "focus", {
        configurable: true,
        value: patchedFocus
    });
    doc.addEventListener("keydown", handleKeyboardEvent, true);
    doc.addEventListener("keyup", handleKeyboardEvent, true);
    doc.addEventListener("click", handleClickEvent, true);
    win.addEventListener("focus", handleFocusEvent, true);
    win.addEventListener("blur", handleWindowBlur, false);
    if (typeof win.PointerEvent !== "undefined") {
        doc.addEventListener("pointerdown", handlePointerEvent, true);
        doc.addEventListener("pointermove", handlePointerEvent, true);
        doc.addEventListener("pointerup", handlePointerEvent, true);
    } else {
        doc.addEventListener("mousedown", handlePointerEvent, true);
        doc.addEventListener("mousemove", handlePointerEvent, true);
        doc.addEventListener("mouseup", handlePointerEvent, true);
    }
    win.addEventListener("beforeunload", ()=>{
        tearDownWindowFocusTracking(root);
    }, {
        once: true
    });
    listenerMap.set(win, {
        focus
    });
}
var tearDownWindowFocusTracking = (root, loadListener)=>{
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(root);
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(root);
    if (!listenerMap.has(win)) {
        return;
    }
    win.HTMLElement.prototype.focus = listenerMap.get(win).focus;
    doc.removeEventListener("keydown", handleKeyboardEvent, true);
    doc.removeEventListener("keyup", handleKeyboardEvent, true);
    doc.removeEventListener("click", handleClickEvent, true);
    win.removeEventListener("focus", handleFocusEvent, true);
    win.removeEventListener("blur", handleWindowBlur, false);
    if (typeof win.PointerEvent !== "undefined") {
        doc.removeEventListener("pointerdown", handlePointerEvent, true);
        doc.removeEventListener("pointermove", handlePointerEvent, true);
        doc.removeEventListener("pointerup", handlePointerEvent, true);
    } else {
        doc.removeEventListener("mousedown", handlePointerEvent, true);
        doc.removeEventListener("mousemove", handlePointerEvent, true);
        doc.removeEventListener("mouseup", handlePointerEvent, true);
    }
    listenerMap.delete(win);
};
function getInteractionModality() {
    return currentModality;
}
function setInteractionModality(modality) {
    currentModality = modality;
    triggerChangeHandlers(modality, null);
}
function trackInteractionModality(props) {
    const { onChange, root } = props;
    setupGlobalFocusEvents(root);
    onChange({
        modality: currentModality
    });
    const handler = ()=>onChange({
            modality: currentModality
        });
    changeHandlers.add(handler);
    return ()=>{
        changeHandlers.delete(handler);
    };
}
function isFocusVisible() {
    return currentModality === "keyboard";
}
function trackFocusVisible() {
    let props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const { isTextInput, autoFocus, onChange, root } = props;
    setupGlobalFocusEvents(root);
    onChange === null || onChange === void 0 ? void 0 : onChange({
        isFocusVisible: autoFocus || isFocusVisible(),
        modality: currentModality
    });
    const handler = (modality, e)=>{
        if (!isKeyboardFocusEvent(!!isTextInput, modality, e)) return;
        onChange === null || onChange === void 0 ? void 0 : onChange({
            isFocusVisible: isFocusVisible(),
            modality
        });
    };
    changeHandlers.add(handler);
    return ()=>{
        changeHandlers.delete(handler);
    };
}
;
}),
"[project]/node_modules/@zag-js/listbox/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "collection",
    ()=>collection,
    "connect",
    ()=>connect,
    "gridCollection",
    ()=>gridCollection,
    "itemGroupLabelProps",
    ()=>itemGroupLabelProps,
    "itemGroupProps",
    ()=>itemGroupProps,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitItemGroupLabelProps",
    ()=>splitItemGroupLabelProps,
    "splitItemGroupProps",
    ()=>splitItemGroupProps,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/collection/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/focus-visible/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
// src/listbox.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("listbox").parts("label", "input", "item", "itemText", "itemIndicator", "itemGroup", "itemGroupLabel", "content", "root", "valueText");
var parts = anatomy.build();
var collection = (options)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListCollection"](options);
};
collection.empty = ()=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListCollection"]({
        items: []
    });
};
var gridCollection = (options)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCollection"](options);
};
gridCollection.empty = ()=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCollection"]({
        items: [],
        columnCount: 0
    });
};
// src/listbox.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "select:".concat(ctx.id);
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "select:".concat(ctx.id, ":content");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "select:".concat(ctx.id, ":label");
};
var getItemId = (ctx, id)=>{
    var _ctx_ids_item, _ctx_ids;
    var _ctx_ids_item1;
    return (_ctx_ids_item1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_item = _ctx_ids.item) === null || _ctx_ids_item === void 0 ? void 0 : _ctx_ids_item.call(_ctx_ids, id)) !== null && _ctx_ids_item1 !== void 0 ? _ctx_ids_item1 : "select:".concat(ctx.id, ":option:").concat(id);
};
var getItemGroupId = (ctx, id)=>{
    var _ctx_ids_itemGroup, _ctx_ids;
    var _ctx_ids_itemGroup1;
    return (_ctx_ids_itemGroup1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemGroup = _ctx_ids.itemGroup) === null || _ctx_ids_itemGroup === void 0 ? void 0 : _ctx_ids_itemGroup.call(_ctx_ids, id)) !== null && _ctx_ids_itemGroup1 !== void 0 ? _ctx_ids_itemGroup1 : "select:".concat(ctx.id, ":optgroup:").concat(id);
};
var getItemGroupLabelId = (ctx, id)=>{
    var _ctx_ids_itemGroupLabel, _ctx_ids;
    var _ctx_ids_itemGroupLabel1;
    return (_ctx_ids_itemGroupLabel1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemGroupLabel = _ctx_ids.itemGroupLabel) === null || _ctx_ids_itemGroupLabel === void 0 ? void 0 : _ctx_ids_itemGroupLabel.call(_ctx_ids, id)) !== null && _ctx_ids_itemGroupLabel1 !== void 0 ? _ctx_ids_itemGroupLabel1 : "select:".concat(ctx.id, ":optgroup-label:").concat(id);
};
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
var getItemEl = (ctx, id)=>ctx.getById(getItemId(ctx, id));
// src/listbox.connect.ts
function connect(service, normalize) {
    const { context, prop, scope, computed, send, refs } = service;
    const disabled = prop("disabled");
    const collection2 = prop("collection");
    const layout = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGridCollection"])(collection2) ? "grid" : "list";
    const focused = context.get("focused");
    const focusVisible = refs.get("focusVisible") && focused;
    const value = context.get("value");
    const selectedItems = context.get("selectedItems");
    const highlightedValue = context.get("highlightedValue");
    const highlightedItem = context.get("highlightedItem");
    const isTypingAhead = computed("isTypingAhead");
    const interactive = computed("isInteractive");
    const ariaActiveDescendant = highlightedValue ? getItemId(scope, highlightedValue) : void 0;
    function getItemState(props2) {
        const itemDisabled = collection2.getItemDisabled(props2.item);
        const value2 = collection2.getItemValue(props2.item);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ensure"])(value2, ()=>"[zag-js] No value found for item ".concat(JSON.stringify(props2.item)));
        const highlighted = highlightedValue === value2;
        return {
            value: value2,
            disabled: Boolean(disabled || itemDisabled),
            focused: highlighted && focused,
            focusVisible: highlighted && focusVisible,
            // deprecated
            highlighted: highlighted && focusVisible,
            selected: context.get("value").includes(value2)
        };
    }
    return {
        empty: value.length === 0,
        highlightedItem,
        highlightedValue,
        clearHighlightedValue () {
            send({
                type: "HIGHLIGHTED_VALUE.SET",
                value: null
            });
        },
        selectedItems,
        hasSelectedItems: computed("hasSelectedItems"),
        value,
        valueAsString: computed("valueAsString"),
        collection: collection2,
        disabled: !!disabled,
        selectValue (value2) {
            send({
                type: "ITEM.SELECT",
                value: value2
            });
        },
        setValue (value2) {
            send({
                type: "VALUE.SET",
                value: value2
            });
        },
        selectAll () {
            if (!computed("multiple")) {
                throw new Error("[zag-js] Cannot select all items in a single-select listbox");
            }
            send({
                type: "VALUE.SET",
                value: collection2.getValues()
            });
        },
        highlightValue (value2) {
            send({
                type: "HIGHLIGHTED_VALUE.SET",
                value: value2
            });
        },
        clearValue (value2) {
            if (value2) {
                send({
                    type: "ITEM.CLEAR",
                    value: value2
                });
            } else {
                send({
                    type: "VALUE.CLEAR"
                });
            }
        },
        getItemState,
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope),
                "data-orientation": prop("orientation"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getInputProps () {
            let props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            return normalize.input({
                ...parts.input.attrs,
                dir: prop("dir"),
                disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                autoComplete: "off",
                autoCorrect: "off",
                "aria-haspopup": "listbox",
                "aria-controls": getContentId(scope),
                "aria-autocomplete": "list",
                "aria-activedescendant": ariaActiveDescendant,
                spellCheck: false,
                enterKeyHint: "go",
                onFocus () {
                    queueMicrotask(()=>{
                        send({
                            type: "INPUT.FOCUS"
                        });
                    });
                },
                onBlur () {
                    send({
                        type: "CONTENT.BLUR",
                        src: "input"
                    });
                },
                onInput (event) {
                    if (!props2.autoHighlight) return;
                    const node = event.currentTarget;
                    queueMicrotask(()=>{
                        if (!node.isConnected) return;
                        send({
                            type: "HIGHLIGHTED_VALUE.SET",
                            value: node.value ? prop("collection").firstValue : null
                        });
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    const nativeEvent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeEvent"])(event);
                    const forwardEvent = ()=>{
                        var _getContentEl;
                        event.preventDefault();
                        const win = scope.getWin();
                        const keyboardEvent = new win.KeyboardEvent(nativeEvent.type, nativeEvent);
                        (_getContentEl = getContentEl(scope)) === null || _getContentEl === void 0 ? void 0 : _getContentEl.dispatchEvent(keyboardEvent);
                    };
                    switch(nativeEvent.key){
                        case "ArrowLeft":
                        case "ArrowRight":
                            {
                                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGridCollection"])(collection2)) return;
                                if (event.ctrlKey) return;
                                forwardEvent();
                            }
                        case "Home":
                        case "End":
                            {
                                if (highlightedValue == null && event.shiftKey) return;
                                forwardEvent();
                            }
                        case "ArrowDown":
                        case "ArrowUp":
                            {
                                forwardEvent();
                                break;
                            }
                        case "Enter":
                            event.preventDefault();
                            send({
                                type: "ITEM.CLICK",
                                value: highlightedValue
                            });
                            break;
                    }
                }
            });
        },
        getLabelProps () {
            return normalize.element({
                dir: prop("dir"),
                id: getLabelId(scope),
                ...parts.label.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getValueTextProps () {
            return normalize.element({
                ...parts.valueText.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        },
        getItemProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                id: getItemId(scope, itemState.value),
                role: "option",
                ...parts.item.attrs,
                dir: prop("dir"),
                "data-value": itemState.value,
                "aria-selected": itemState.selected,
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.selected),
                "data-layout": layout,
                "data-state": itemState.selected ? "checked" : "unchecked",
                "data-orientation": prop("orientation"),
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "aria-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(itemState.disabled),
                onPointerMove (event) {
                    if (!props2.highlightOnHover) return;
                    if (itemState.disabled || event.pointerType !== "mouse") return;
                    if (itemState.highlighted) return;
                    send({
                        type: "ITEM.POINTER_MOVE",
                        value: itemState.value
                    });
                },
                onMouseDown (event) {
                    var _getContentEl;
                    event.preventDefault();
                    (_getContentEl = getContentEl(scope)) === null || _getContentEl === void 0 ? void 0 : _getContentEl.focus();
                },
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (itemState.disabled) return;
                    send({
                        type: "ITEM.CLICK",
                        value: itemState.value,
                        shiftKey: event.shiftKey,
                        anchorValue: highlightedValue,
                        metaKey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCtrlOrMetaKey"])(event)
                    });
                }
            });
        },
        getItemTextProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.itemText.attrs,
                "data-state": itemState.selected ? "checked" : "unchecked",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted)
            });
        },
        getItemIndicatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.itemIndicator.attrs,
                "aria-hidden": true,
                "data-state": itemState.selected ? "checked" : "unchecked",
                hidden: !itemState.selected
            });
        },
        getItemGroupLabelProps (props2) {
            const { htmlFor } = props2;
            return normalize.element({
                ...parts.itemGroupLabel.attrs,
                id: getItemGroupLabelId(scope, htmlFor),
                dir: prop("dir"),
                role: "presentation"
            });
        },
        getItemGroupProps (props2) {
            const { id } = props2;
            return normalize.element({
                ...parts.itemGroup.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": prop("orientation"),
                "data-empty": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(collection2.size === 0),
                id: getItemGroupId(scope, id),
                "aria-labelledby": getItemGroupLabelId(scope, id),
                role: "group",
                dir: prop("dir")
            });
        },
        getContentProps () {
            return normalize.element({
                dir: prop("dir"),
                id: getContentId(scope),
                role: "listbox",
                ...parts.content.attrs,
                "data-activedescendant": ariaActiveDescendant,
                "aria-activedescendant": ariaActiveDescendant,
                "data-orientation": prop("orientation"),
                "aria-multiselectable": computed("multiple") ? true : void 0,
                "aria-labelledby": getLabelId(scope),
                tabIndex: 0,
                "data-layout": layout,
                "data-empty": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(collection2.size === 0),
                style: {
                    "--column-count": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGridCollection"])(collection2) ? collection2.columnCount : 1
                },
                onFocus () {
                    send({
                        type: "CONTENT.FOCUS"
                    });
                },
                onBlur () {
                    send({
                        type: "CONTENT.BLUR"
                    });
                },
                onKeyDown (event) {
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    const shiftKey = event.shiftKey;
                    const keyMap = {
                        ArrowUp (event2) {
                            let nextValue = null;
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGridCollection"])(collection2) && highlightedValue) {
                                nextValue = collection2.getPreviousRowValue(highlightedValue);
                            } else if (highlightedValue) {
                                nextValue = collection2.getPreviousValue(highlightedValue);
                            }
                            if (!nextValue && (prop("loopFocus") || !highlightedValue)) {
                                nextValue = collection2.lastValue;
                            }
                            if (!nextValue) return;
                            event2.preventDefault();
                            send({
                                type: "NAVIGATE",
                                value: nextValue,
                                shiftKey,
                                anchorValue: highlightedValue
                            });
                        },
                        ArrowDown (event2) {
                            let nextValue = null;
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGridCollection"])(collection2) && highlightedValue) {
                                nextValue = collection2.getNextRowValue(highlightedValue);
                            } else if (highlightedValue) {
                                nextValue = collection2.getNextValue(highlightedValue);
                            }
                            if (!nextValue && (prop("loopFocus") || !highlightedValue)) {
                                nextValue = collection2.firstValue;
                            }
                            if (!nextValue) return;
                            event2.preventDefault();
                            send({
                                type: "NAVIGATE",
                                value: nextValue,
                                shiftKey,
                                anchorValue: highlightedValue
                            });
                        },
                        ArrowLeft () {
                            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGridCollection"])(collection2) && prop("orientation") === "vertical") return;
                            let nextValue = highlightedValue ? collection2.getPreviousValue(highlightedValue) : null;
                            if (!nextValue && prop("loopFocus")) {
                                nextValue = collection2.lastValue;
                            }
                            if (!nextValue) return;
                            event.preventDefault();
                            send({
                                type: "NAVIGATE",
                                value: nextValue,
                                shiftKey,
                                anchorValue: highlightedValue
                            });
                        },
                        ArrowRight () {
                            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGridCollection"])(collection2) && prop("orientation") === "vertical") return;
                            let nextValue = highlightedValue ? collection2.getNextValue(highlightedValue) : null;
                            if (!nextValue && prop("loopFocus")) {
                                nextValue = collection2.firstValue;
                            }
                            if (!nextValue) return;
                            event.preventDefault();
                            send({
                                type: "NAVIGATE",
                                value: nextValue,
                                shiftKey,
                                anchorValue: highlightedValue
                            });
                        },
                        Home (event2) {
                            event2.preventDefault();
                            let nextValue = collection2.firstValue;
                            send({
                                type: "NAVIGATE",
                                value: nextValue,
                                shiftKey,
                                anchorValue: highlightedValue
                            });
                        },
                        End (event2) {
                            event2.preventDefault();
                            let nextValue = collection2.lastValue;
                            send({
                                type: "NAVIGATE",
                                value: nextValue,
                                shiftKey,
                                anchorValue: highlightedValue
                            });
                        },
                        Enter () {
                            send({
                                type: "ITEM.CLICK",
                                value: highlightedValue
                            });
                        },
                        a (event2) {
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCtrlOrMetaKey"])(event2) && computed("multiple") && !prop("disallowSelectAll")) {
                                event2.preventDefault();
                                send({
                                    type: "VALUE.SET",
                                    value: collection2.getValues()
                                });
                            }
                        },
                        Space (event2) {
                            if (isTypingAhead && prop("typeahead")) {
                                send({
                                    type: "CONTENT.TYPEAHEAD",
                                    key: event2.key
                                });
                            } else {
                                var _keyMap_Enter;
                                (_keyMap_Enter = keyMap.Enter) === null || _keyMap_Enter === void 0 ? void 0 : _keyMap_Enter.call(keyMap, event2);
                            }
                        },
                        Escape (event2) {
                            if (prop("deselectable") && value.length > 0) {
                                event2.preventDefault();
                                event2.stopPropagation();
                                send({
                                    type: "VALUE.CLEAR"
                                });
                            }
                        }
                    };
                    const exec = keyMap[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event)];
                    if (exec) {
                        exec(event);
                        return;
                    }
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEditableElement"])(target)) {
                        return;
                    }
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getByTypeahead"].isValidEvent(event) && prop("typeahead")) {
                        send({
                            type: "CONTENT.TYPEAHEAD",
                            key: event.key
                        });
                        event.preventDefault();
                    }
                }
            });
        }
    };
}
var { guards, createMachine } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setup"])();
var { or } = guards;
var machine = createMachine({
    props (param) {
        let { props: props2 } = param;
        return {
            loopFocus: false,
            composite: true,
            defaultValue: [],
            multiple: false,
            typeahead: true,
            collection: collection.empty(),
            orientation: "vertical",
            selectionMode: "single",
            ...props2
        };
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    isEqual: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"],
                    onChange (value) {
                        var _prop;
                        const items = prop("collection").findMany(value);
                        return (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value,
                            items
                        });
                    }
                })),
            highlightedValue: bindable(()=>({
                    defaultValue: prop("defaultHighlightedValue") || null,
                    value: prop("highlightedValue"),
                    sync: true,
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onHighlightChange")) === null || _prop === void 0 ? void 0 : _prop({
                            highlightedValue: value,
                            highlightedItem: prop("collection").find(value),
                            highlightedIndex: prop("collection").indexOf(value)
                        });
                    }
                })),
            highlightedItem: bindable(()=>({
                    defaultValue: null
                })),
            selectedItems: bindable(()=>{
                var _prop, _ref;
                const value = (_ref = (_prop = prop("value")) !== null && _prop !== void 0 ? _prop : prop("defaultValue")) !== null && _ref !== void 0 ? _ref : [];
                const items = prop("collection").findMany(value);
                return {
                    defaultValue: items
                };
            }),
            focused: bindable(()=>({
                    sync: true,
                    defaultValue: false
                }))
        };
    },
    refs () {
        return {
            typeahead: {
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getByTypeahead"].defaultOptions
            },
            focusVisible: false
        };
    },
    computed: {
        hasSelectedItems: (param)=>{
            let { context } = param;
            return context.get("value").length > 0;
        },
        isTypingAhead: (param)=>{
            let { refs } = param;
            return refs.get("typeahead").keysSoFar !== "";
        },
        isInteractive: (param)=>{
            let { prop } = param;
            return !prop("disabled");
        },
        selection: (param)=>{
            let { context, prop } = param;
            const selection = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Selection"](context.get("value"));
            selection.selectionMode = prop("selectionMode");
            selection.deselectable = !!prop("deselectable");
            return selection;
        },
        multiple: (param)=>{
            let { prop } = param;
            return prop("selectionMode") === "multiple" || prop("selectionMode") === "extended";
        },
        valueAsString: (param)=>{
            let { context, prop } = param;
            return prop("collection").stringifyItems(context.get("selectedItems"));
        }
    },
    initialState () {
        return "idle";
    },
    watch (param) {
        let { context, prop, track, action } = param;
        track([
            ()=>context.get("value").toString()
        ], ()=>{
            action([
                "syncSelectedItems"
            ]);
        });
        track([
            ()=>context.get("highlightedValue")
        ], ()=>{
            action([
                "syncHighlightedItem"
            ]);
        });
        track([
            ()=>prop("collection").toString()
        ], ()=>{
            action([
                "syncHighlightedValue"
            ]);
        });
    },
    effects: [
        "trackFocusVisible"
    ],
    on: {
        "HIGHLIGHTED_VALUE.SET": {
            actions: [
                "setHighlightedItem"
            ]
        },
        "ITEM.SELECT": {
            actions: [
                "selectItem"
            ]
        },
        "ITEM.CLEAR": {
            actions: [
                "clearItem"
            ]
        },
        "VALUE.SET": {
            actions: [
                "setSelectedItems"
            ]
        },
        "VALUE.CLEAR": {
            actions: [
                "clearSelectedItems"
            ]
        }
    },
    states: {
        idle: {
            effects: [
                "scrollToHighlightedItem"
            ],
            on: {
                "INPUT.FOCUS": {
                    actions: [
                        "setFocused"
                    ]
                },
                "CONTENT.FOCUS": [
                    {
                        guard: or("hasSelectedValue", "hasHighlightedValue"),
                        actions: [
                            "setFocused"
                        ]
                    },
                    {
                        actions: [
                            "setFocused",
                            "setDefaultHighlightedValue"
                        ]
                    }
                ],
                "CONTENT.BLUR": {
                    actions: [
                        "clearFocused"
                    ]
                },
                "ITEM.CLICK": {
                    actions: [
                        "setHighlightedItem",
                        "selectHighlightedItem"
                    ]
                },
                "CONTENT.TYPEAHEAD": {
                    actions: [
                        "setFocused",
                        "highlightMatchingItem"
                    ]
                },
                "ITEM.POINTER_MOVE": {
                    actions: [
                        "highlightItem"
                    ]
                },
                "ITEM.POINTER_LEAVE": {
                    actions: [
                        "clearHighlightedItem"
                    ]
                },
                NAVIGATE: {
                    actions: [
                        "setFocused",
                        "setHighlightedItem",
                        "selectWithKeyboard"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            hasSelectedValue: (param)=>{
                let { context } = param;
                return context.get("value").length > 0;
            },
            hasHighlightedValue: (param)=>{
                let { context } = param;
                return context.get("highlightedValue") != null;
            }
        },
        effects: {
            trackFocusVisible: (param)=>{
                let { scope, refs } = param;
                var _scope_getRootNode;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFocusVisible"])({
                    root: (_scope_getRootNode = scope.getRootNode) === null || _scope_getRootNode === void 0 ? void 0 : _scope_getRootNode.call(scope),
                    onChange (details) {
                        refs.set("focusVisible", details.isFocusVisible);
                    }
                });
            },
            scrollToHighlightedItem (param) {
                let { context, prop, scope } = param;
                const exec = (immediate)=>{
                    const highlightedValue = context.get("highlightedValue");
                    if (highlightedValue == null) return;
                    const modality = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getInteractionModality"])();
                    if (modality !== "keyboard") return;
                    const contentEl2 = getContentEl(scope);
                    const scrollToIndexFn = prop("scrollToIndexFn");
                    if (scrollToIndexFn) {
                        const highlightedIndex = prop("collection").indexOf(highlightedValue);
                        scrollToIndexFn === null || scrollToIndexFn === void 0 ? void 0 : scrollToIndexFn({
                            index: highlightedIndex,
                            immediate,
                            getElement () {
                                return getItemEl(scope, highlightedValue);
                            }
                        });
                        return;
                    }
                    const itemEl = getItemEl(scope, highlightedValue);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["scrollIntoView"])(itemEl, {
                        rootEl: contentEl2,
                        block: "nearest"
                    });
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>exec(true));
                const contentEl = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observeAttributes"])(contentEl, {
                    defer: true,
                    attributes: [
                        "data-activedescendant"
                    ],
                    callback () {
                        exec(false);
                    }
                });
            }
        },
        actions: {
            selectHighlightedItem (param) {
                let { context, prop, event, computed } = param;
                var _event_value;
                const value = (_event_value = event.value) !== null && _event_value !== void 0 ? _event_value : context.get("highlightedValue");
                const collection2 = prop("collection");
                if (value == null || !collection2.has(value)) return;
                const selection = computed("selection");
                if (event.shiftKey && computed("multiple") && event.anchorValue) {
                    const next = selection.extendSelection(collection2, event.anchorValue, value);
                    invokeOnSelect(selection, next, prop("onSelect"));
                    context.set("value", Array.from(next));
                } else {
                    const next = selection.select(collection2, value, event.metaKey);
                    invokeOnSelect(selection, next, prop("onSelect"));
                    context.set("value", Array.from(next));
                }
            },
            selectWithKeyboard (param) {
                let { context, prop, event, computed } = param;
                const selection = computed("selection");
                const collection2 = prop("collection");
                if (event.shiftKey && computed("multiple") && event.anchorValue) {
                    const next = selection.extendSelection(collection2, event.anchorValue, event.value);
                    invokeOnSelect(selection, next, prop("onSelect"));
                    context.set("value", Array.from(next));
                    return;
                }
                if (prop("selectOnHighlight")) {
                    const next = selection.replaceSelection(collection2, event.value);
                    invokeOnSelect(selection, next, prop("onSelect"));
                    context.set("value", Array.from(next));
                }
            },
            highlightItem (param) {
                let { context, event } = param;
                context.set("highlightedValue", event.value);
            },
            highlightMatchingItem (param) {
                let { context, prop, event, refs } = param;
                const value = prop("collection").search(event.key, {
                    state: refs.get("typeahead"),
                    currentValue: context.get("highlightedValue")
                });
                if (value == null) return;
                context.set("highlightedValue", value);
            },
            setHighlightedItem (param) {
                let { context, event } = param;
                context.set("highlightedValue", event.value);
            },
            clearHighlightedItem (param) {
                let { context } = param;
                context.set("highlightedValue", null);
            },
            selectItem (param) {
                let { context, prop, event, computed } = param;
                const collection2 = prop("collection");
                const selection = computed("selection");
                const next = selection.select(collection2, event.value);
                invokeOnSelect(selection, next, prop("onSelect"));
                context.set("value", Array.from(next));
            },
            clearItem (param) {
                let { context, event, computed } = param;
                const selection = computed("selection");
                const value = selection.deselect(event.value);
                context.set("value", Array.from(value));
            },
            setSelectedItems (param) {
                let { context, event } = param;
                context.set("value", event.value);
            },
            clearSelectedItems (param) {
                let { context } = param;
                context.set("value", []);
            },
            syncSelectedItems (param) {
                let { context, prop } = param;
                const collection2 = prop("collection");
                const prevSelectedItems = context.get("selectedItems");
                const value = context.get("value");
                const selectedItems = value.map((value2)=>{
                    const item = prevSelectedItems.find((item2)=>collection2.getItemValue(item2) === value2);
                    return item || collection2.find(value2);
                });
                context.set("selectedItems", selectedItems);
            },
            syncHighlightedItem (param) {
                let { context, prop } = param;
                const collection2 = prop("collection");
                const highlightedValue = context.get("highlightedValue");
                const highlightedItem = highlightedValue ? collection2.find(highlightedValue) : null;
                context.set("highlightedItem", highlightedItem);
            },
            syncHighlightedValue (param) {
                let { context, prop } = param;
                const collection2 = prop("collection");
                const highlightedValue = context.get("highlightedValue");
                if (highlightedValue != null && !collection2.has(highlightedValue)) {
                    context.set("highlightedValue", null);
                }
            },
            setFocused (param) {
                let { context } = param;
                context.set("focused", true);
            },
            setDefaultHighlightedValue (param) {
                let { context, prop } = param;
                const collection2 = prop("collection");
                const firstValue = collection2.firstValue;
                if (firstValue != null) {
                    context.set("highlightedValue", firstValue);
                }
            },
            clearFocused (param) {
                let { context } = param;
                context.set("focused", false);
            }
        }
    }
});
var diff = (a, b)=>{
    const result = new Set(a);
    for (const item of b)result.delete(item);
    return result;
};
function invokeOnSelect(current, next, onSelect) {
    const added = diff(next, current);
    for (const item of added){
        onSelect === null || onSelect === void 0 ? void 0 : onSelect({
            value: item
        });
    }
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "collection",
    "defaultHighlightedValue",
    "defaultValue",
    "dir",
    "disabled",
    "deselectable",
    "disallowSelectAll",
    "getRootNode",
    "highlightedValue",
    "id",
    "ids",
    "loopFocus",
    "onHighlightChange",
    "onSelect",
    "onValueChange",
    "orientation",
    "scrollToIndexFn",
    "selectionMode",
    "selectOnHighlight",
    "typeahead",
    "value"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "item",
    "highlightOnHover"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
var itemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "id"
]);
var splitItemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupProps);
var itemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "htmlFor"
]);
var splitItemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupLabelProps);
;
}),
"[project]/node_modules/@zag-js/rect-utils/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "AffineTransform",
    ()=>AffineTransform,
    "addPoints",
    ()=>addPoints,
    "alignRect",
    ()=>alignRect,
    "clampPoint",
    ()=>clampPoint,
    "clampSize",
    ()=>clampSize,
    "closest",
    ()=>closest,
    "closestSideToPoint",
    ()=>closestSideToPoint,
    "closestSideToRect",
    ()=>closestSideToRect,
    "collisions",
    ()=>collisions,
    "constrainRect",
    ()=>constrainRect,
    "contains",
    ()=>contains,
    "containsPoint",
    ()=>containsPoint,
    "containsRect",
    ()=>containsRect,
    "createPoint",
    ()=>createPoint,
    "createRect",
    ()=>createRect,
    "debugPolygon",
    ()=>debugPolygon,
    "distance",
    ()=>distance,
    "distanceBtwEdges",
    ()=>distanceBtwEdges,
    "distanceFromPoint",
    ()=>distanceFromPoint,
    "distanceFromRect",
    ()=>distanceFromRect,
    "expand",
    ()=>expand,
    "fromRange",
    ()=>fromRange,
    "getElementPolygon",
    ()=>getElementPolygon,
    "getElementRect",
    ()=>getElementRect,
    "getPointAngle",
    ()=>getPointAngle,
    "getRectCenters",
    ()=>getRectCenters,
    "getRectCorners",
    ()=>getRectCorners,
    "getRectEdges",
    ()=>getRectEdges,
    "getRectFromPoints",
    ()=>getRectFromPoints,
    "getRotationRect",
    ()=>getRotationRect,
    "getViewportRect",
    ()=>getViewportRect,
    "getWindowRect",
    ()=>getWindowRect,
    "inset",
    ()=>inset,
    "intersection",
    ()=>intersection,
    "intersects",
    ()=>intersects,
    "isPoint",
    ()=>isPoint,
    "isPointEqual",
    ()=>isPointEqual,
    "isPointInPolygon",
    ()=>isPointInPolygon,
    "isRect",
    ()=>isRect,
    "isRectEqual",
    ()=>isRectEqual,
    "isSizeEqual",
    ()=>isSizeEqual,
    "isSymmetric",
    ()=>isSymmetric,
    "resizeRect",
    ()=>resizeRect,
    "rotate",
    ()=>rotate,
    "shift",
    ()=>shift,
    "shrink",
    ()=>shrink,
    "subtractPoints",
    ()=>subtractPoints,
    "toRad",
    ()=>toRad,
    "union",
    ()=>union
]);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
// src/affine-transform.ts
var AffineTransform = class _AffineTransform {
    applyTo(point) {
        const { x, y } = point;
        const { m00, m01, m02, m10, m11, m12 } = this;
        return {
            x: m00 * x + m01 * y + m02,
            y: m10 * x + m11 * y + m12
        };
    }
    prepend(other) {
        return new _AffineTransform([
            this.m00 * other.m00 + this.m01 * other.m10,
            // m00
            this.m00 * other.m01 + this.m01 * other.m11,
            // m01
            this.m00 * other.m02 + this.m01 * other.m12 + this.m02,
            // m02
            this.m10 * other.m00 + this.m11 * other.m10,
            // m10
            this.m10 * other.m01 + this.m11 * other.m11,
            // m11
            this.m10 * other.m02 + this.m11 * other.m12 + this.m12
        ]);
    }
    append(other) {
        return new _AffineTransform([
            other.m00 * this.m00 + other.m01 * this.m10,
            // m00
            other.m00 * this.m01 + other.m01 * this.m11,
            // m01
            other.m00 * this.m02 + other.m01 * this.m12 + other.m02,
            // m02
            other.m10 * this.m00 + other.m11 * this.m10,
            // m10
            other.m10 * this.m01 + other.m11 * this.m11,
            // m11
            other.m10 * this.m02 + other.m11 * this.m12 + other.m12
        ]);
    }
    get determinant() {
        return this.m00 * this.m11 - this.m01 * this.m10;
    }
    get isInvertible() {
        const det = this.determinant;
        return isFinite(det) && isFinite(this.m02) && isFinite(this.m12) && det !== 0;
    }
    invert() {
        const det = this.determinant;
        return new _AffineTransform([
            this.m11 / det,
            // m00
            -this.m01 / det,
            // m01
            (this.m01 * this.m12 - this.m11 * this.m02) / det,
            // m02
            -this.m10 / det,
            // m10
            this.m00 / det,
            // m11
            (this.m10 * this.m02 - this.m00 * this.m12) / det
        ]);
    }
    get array() {
        return [
            this.m00,
            this.m01,
            this.m02,
            this.m10,
            this.m11,
            this.m12,
            0,
            0,
            1
        ];
    }
    get float32Array() {
        return new Float32Array(this.array);
    }
    // Static
    static get identity() {
        return new _AffineTransform([
            1,
            0,
            0,
            0,
            1,
            0
        ]);
    }
    static rotate(theta, origin) {
        const rotation = new _AffineTransform([
            Math.cos(theta),
            -Math.sin(theta),
            0,
            Math.sin(theta),
            Math.cos(theta),
            0
        ]);
        if (origin && (origin.x !== 0 || origin.y !== 0)) {
            return _AffineTransform.multiply(_AffineTransform.translate(origin.x, origin.y), rotation, _AffineTransform.translate(-origin.x, -origin.y));
        }
        return rotation;
    }
    static scale(sx) {
        let sy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : sx, origin = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
            x: 0,
            y: 0
        };
        const scale = new _AffineTransform([
            sx,
            0,
            0,
            0,
            sy,
            0
        ]);
        if (origin.x !== 0 || origin.y !== 0) {
            return _AffineTransform.multiply(_AffineTransform.translate(origin.x, origin.y), scale, _AffineTransform.translate(-origin.x, -origin.y));
        }
        return scale;
    }
    static translate(tx, ty) {
        return new _AffineTransform([
            1,
            0,
            tx,
            0,
            1,
            ty
        ]);
    }
    static multiply() {
        for(var _len = arguments.length, _tmp = new Array(_len), _key = 0; _key < _len; _key++){
            _tmp[_key] = arguments[_key];
        }
        let [first, ...rest] = _tmp;
        if (!first) return _AffineTransform.identity;
        return rest.reduce((result, item)=>result.prepend(item), first);
    }
    get a() {
        return this.m00;
    }
    get b() {
        return this.m10;
    }
    get c() {
        return this.m01;
    }
    get d() {
        return this.m11;
    }
    get tx() {
        return this.m02;
    }
    get ty() {
        return this.m12;
    }
    get scaleComponents() {
        return {
            x: this.a,
            y: this.d
        };
    }
    get translationComponents() {
        return {
            x: this.tx,
            y: this.ty
        };
    }
    get skewComponents() {
        return {
            x: this.c,
            y: this.b
        };
    }
    toString() {
        return "matrix(".concat(this.a, ", ").concat(this.b, ", ").concat(this.c, ", ").concat(this.d, ", ").concat(this.tx, ", ").concat(this.ty, ")");
    }
    constructor([m00, m01, m02, m10, m11, m12] = [
        0,
        0,
        0,
        0,
        0,
        0
    ]){
        var _this = this;
        __publicField(this, "m00");
        __publicField(this, "m01");
        __publicField(this, "m02");
        __publicField(this, "m10");
        __publicField(this, "m11");
        __publicField(this, "m12");
        __publicField(this, "rotate", function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            return _this.prepend(_AffineTransform.rotate(...args));
        });
        __publicField(this, "scale", function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            return _this.prepend(_AffineTransform.scale(...args));
        });
        __publicField(this, "translate", function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            return _this.prepend(_AffineTransform.translate(...args));
        });
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
    }
};
// src/align.ts
function hAlign(a, ref, h) {
    let x = ref.minX;
    if (h === "left-inside") x = ref.minX;
    if (h === "left-outside") x = ref.minX - ref.width;
    if (h === "right-inside") x = ref.maxX - ref.width;
    if (h === "right-outside") x = ref.maxX;
    if (h === "center") x = ref.midX - ref.width / 2;
    return {
        ...a,
        x
    };
}
function vAlign(a, ref, v) {
    let y = ref.minY;
    if (v === "top-inside") y = ref.minY;
    if (v === "top-outside") y = ref.minY - a.height;
    if (v === "bottom-inside") y = ref.maxY - a.height;
    if (v === "bottom-outside") y = ref.maxY;
    if (v === "center") y = ref.midY - a.height / 2;
    return {
        ...a,
        y
    };
}
function alignRect(a, ref, options) {
    const { h, v } = options;
    return vAlign(hAlign(a, ref, h), ref, v);
}
// src/angle.ts
function getPointAngle(rect, point) {
    let reference = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : rect.center;
    const x = point.x - reference.x;
    const y = point.y - reference.y;
    const deg = Math.atan2(x, y) * (180 / Math.PI) + 180;
    return 360 - deg;
}
// src/clamp.ts
var clamp = (value, min3, max2)=>Math.min(Math.max(value, min3), max2);
var clampPoint = (position, size, boundaryRect)=>{
    const x = clamp(position.x, boundaryRect.x, boundaryRect.x + boundaryRect.width - size.width);
    const y = clamp(position.y, boundaryRect.y, boundaryRect.y + boundaryRect.height - size.height);
    return {
        x,
        y
    };
};
var defaultMinSize = {
    width: 0,
    height: 0
};
var defaultMaxSize = {
    width: Infinity,
    height: Infinity
};
var clampSize = function(size) {
    let minSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultMinSize, maxSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultMaxSize;
    return {
        width: Math.min(Math.max(size.width, minSize.width), maxSize.width),
        height: Math.min(Math.max(size.height, minSize.height), maxSize.height)
    };
};
// src/rect.ts
var createPoint = (x, y)=>({
        x,
        y
    });
var subtractPoints = (a, b)=>{
    if (!b) return a;
    return createPoint(a.x - b.x, a.y - b.y);
};
var addPoints = (a, b)=>createPoint(a.x + b.x, a.y + b.y);
function isPoint(v) {
    return Reflect.has(v, "x") && Reflect.has(v, "y");
}
function createRect(r) {
    const { x, y, width, height } = r;
    const midX = x + width / 2;
    const midY = y + height / 2;
    return {
        x,
        y,
        width,
        height,
        minX: x,
        minY: y,
        maxX: x + width,
        maxY: y + height,
        midX,
        midY,
        center: createPoint(midX, midY)
    };
}
function isRect(v) {
    return Reflect.has(v, "x") && Reflect.has(v, "y") && Reflect.has(v, "width") && Reflect.has(v, "height");
}
function getRectCenters(v) {
    const top = createPoint(v.midX, v.minY);
    const right = createPoint(v.maxX, v.midY);
    const bottom = createPoint(v.midX, v.maxY);
    const left = createPoint(v.minX, v.midY);
    return {
        top,
        right,
        bottom,
        left
    };
}
function getRectCorners(v) {
    const top = createPoint(v.minX, v.minY);
    const right = createPoint(v.maxX, v.minY);
    const bottom = createPoint(v.maxX, v.maxY);
    const left = createPoint(v.minX, v.maxY);
    return {
        top,
        right,
        bottom,
        left
    };
}
function getRectEdges(v) {
    const c = getRectCorners(v);
    const top = [
        c.top,
        c.right
    ];
    const right = [
        c.right,
        c.bottom
    ];
    const bottom = [
        c.left,
        c.bottom
    ];
    const left = [
        c.top,
        c.left
    ];
    return {
        top,
        right,
        bottom,
        left
    };
}
// src/intersection.ts
function intersects(a, b) {
    return a.x < b.maxX && a.y < b.maxY && a.maxX > b.x && a.maxY > b.y;
}
function intersection(a, b) {
    const x = Math.max(a.x, b.x);
    const y = Math.max(a.y, b.y);
    const x2 = Math.min(a.x + a.width, b.x + b.width);
    const y2 = Math.min(a.y + a.height, b.y + b.height);
    return createRect({
        x,
        y,
        width: x2 - x,
        height: y2 - y
    });
}
function collisions(a, b) {
    return {
        top: a.minY <= b.minY,
        right: a.maxX >= b.maxX,
        bottom: a.maxY >= b.maxY,
        left: a.minX <= b.minX
    };
}
// src/distance.ts
function distance(a) {
    let b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        x: 0,
        y: 0
    };
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
function distanceFromPoint(r, p) {
    let x = 0;
    let y = 0;
    if (p.x < r.x) x = r.x - p.x;
    else if (p.x > r.maxX) x = p.x - r.maxX;
    if (p.y < r.y) y = r.y - p.y;
    else if (p.y > r.maxY) y = p.y - r.maxY;
    return {
        x,
        y,
        value: distance({
            x,
            y
        })
    };
}
function distanceFromRect(a, b) {
    if (intersects(a, b)) return {
        x: 0,
        y: 0,
        value: 0
    };
    const left = a.x < b.x ? a : b;
    const right = b.x < a.x ? a : b;
    const upper = a.y < b.y ? a : b;
    const lower = b.y < a.y ? a : b;
    let x = left.x === right.x ? 0 : right.x - left.maxX;
    x = Math.max(0, x);
    let y = upper.y === lower.y ? 0 : lower.y - upper.maxY;
    y = Math.max(0, y);
    return {
        x,
        y,
        value: distance({
            x,
            y
        })
    };
}
function distanceBtwEdges(a, b) {
    return {
        left: b.x - a.x,
        top: b.y - a.y,
        right: a.maxX - b.maxX,
        bottom: a.maxY - b.maxY
    };
}
// src/closest.ts
function closest() {
    for(var _len = arguments.length, pts = new Array(_len), _key = 0; _key < _len; _key++){
        pts[_key] = arguments[_key];
    }
    return (a)=>{
        const ds = pts.map((b)=>distance(b, a));
        const c = Math.min.apply(Math, ds);
        return pts[ds.indexOf(c)];
    };
}
function closestSideToRect(ref, r) {
    if (r.maxX <= ref.minX) return "left";
    if (r.minX >= ref.maxX) return "right";
    if (r.maxY <= ref.minY) return "top";
    if (r.minY >= ref.maxY) return "bottom";
    return "left";
}
function closestSideToPoint(ref, p) {
    const { x, y } = p;
    const dl = x - ref.minX;
    const dr = ref.maxX - x;
    const dt = y - ref.minY;
    const db = ref.maxY - y;
    let closest2 = dl;
    let side = "left";
    if (dr < closest2) {
        closest2 = dr;
        side = "right";
    }
    if (dt < closest2) {
        closest2 = dt;
        side = "top";
    }
    if (db < closest2) {
        side = "bottom";
    }
    return side;
}
// src/constrain.ts
var constrainRect = (rect, boundary)=>{
    const left = Math.max(boundary.x, Math.min(rect.x, boundary.x + boundary.width - rect.width));
    const top = Math.max(boundary.y, Math.min(rect.y, boundary.y + boundary.height - rect.height));
    return {
        x: left,
        y: top,
        width: Math.min(rect.width, boundary.width),
        height: Math.min(rect.height, boundary.height)
    };
};
// src/contains.ts
function containsPoint(r, p) {
    return r.minX <= p.x && p.x <= r.maxX && r.minY <= p.y && p.y <= r.maxY;
}
function containsRect(a, b) {
    return Object.values(getRectCorners(b)).every((c)=>containsPoint(a, c));
}
function contains(r, v) {
    return isRect(v) ? containsRect(r, v) : containsPoint(r, v);
}
// src/equality.ts
var isSizeEqual = (a, b)=>{
    return a.width === (b === null || b === void 0 ? void 0 : b.width) && a.height === (b === null || b === void 0 ? void 0 : b.height);
};
var isPointEqual = (a, b)=>{
    return a.x === (b === null || b === void 0 ? void 0 : b.x) && a.y === (b === null || b === void 0 ? void 0 : b.y);
};
var isRectEqual = (a, b)=>{
    return isPointEqual(a, b) && isSizeEqual(a, b);
};
// src/from-element.ts
var styleCache = /* @__PURE__ */ new WeakMap();
function getCacheComputedStyle(el) {
    if (!styleCache.has(el)) {
        const win = el.ownerDocument.defaultView || window;
        styleCache.set(el, win.getComputedStyle(el));
    }
    return styleCache.get(el);
}
function getElementRect(el) {
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return createRect(getClientRect(el, opts));
}
function getClientRect(el) {
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { excludeScrollbar = false, excludeBorders = false } = opts;
    const { x, y, width, height } = el.getBoundingClientRect();
    const r = {
        x,
        y,
        width,
        height
    };
    const style = getCacheComputedStyle(el);
    const { borderLeftWidth, borderTopWidth, borderRightWidth, borderBottomWidth } = style;
    const borderXWidth = sum(borderLeftWidth, borderRightWidth);
    const borderYWidth = sum(borderTopWidth, borderBottomWidth);
    if (excludeBorders) {
        r.width -= borderXWidth;
        r.height -= borderYWidth;
        r.x += px(borderLeftWidth);
        r.y += px(borderTopWidth);
    }
    if (excludeScrollbar) {
        const scrollbarWidth = el.offsetWidth - el.clientWidth - borderXWidth;
        const scrollbarHeight = el.offsetHeight - el.clientHeight - borderYWidth;
        r.width -= scrollbarWidth;
        r.height -= scrollbarHeight;
    }
    return r;
}
var px = (v)=>parseFloat(v.replace("px", ""));
var sum = function() {
    for(var _len = arguments.length, vals = new Array(_len), _key = 0; _key < _len; _key++){
        vals[_key] = arguments[_key];
    }
    return vals.reduce((sum2, v)=>sum2 + (v ? px(v) : 0), 0);
};
// src/from-points.ts
function getRectFromPoints() {
    for(var _len = arguments.length, pts = new Array(_len), _key = 0; _key < _len; _key++){
        pts[_key] = arguments[_key];
    }
    const xs = pts.map((p)=>p.x);
    const ys = pts.map((p)=>p.y);
    const x = Math.min(...xs);
    const y = Math.min(...ys);
    const width = Math.max(...xs) - x;
    const height = Math.max(...ys) - y;
    return createRect({
        x,
        y,
        width,
        height
    });
}
// src/union.ts
var { min, max } = Math;
function union() {
    for(var _len = arguments.length, rs = new Array(_len), _key = 0; _key < _len; _key++){
        rs[_key] = arguments[_key];
    }
    const pMin = {
        x: min(...rs.map((r)=>r.minX)),
        y: min(...rs.map((r)=>r.minY))
    };
    const pMax = {
        x: max(...rs.map((r)=>r.maxX)),
        y: max(...rs.map((r)=>r.maxY))
    };
    return getRectFromPoints(pMin, pMax);
}
// src/from-range.ts
function fromRange(range) {
    let rs = [];
    const rects = Array.from(range.getClientRects());
    if (rects.length) {
        rs = rs.concat(rects.map(createRect));
        return union.apply(void 0, rs);
    }
    let start = range.startContainer;
    if (start.nodeType === Node.TEXT_NODE) {
        start = start.parentNode;
    }
    if (start instanceof HTMLElement) {
        const r = getElementRect(start);
        rs.push({
            ...r,
            x: r.maxX,
            width: 0
        });
    }
    return union.apply(void 0, rs);
}
// src/from-rotation.ts
function toRad(d) {
    return d % 360 * Math.PI / 180;
}
function rotate(a, d, c) {
    const r = toRad(d);
    const sin = Math.sin(r);
    const cos = Math.cos(r);
    const x = a.x - c.x;
    const y = a.y - c.y;
    return {
        x: c.x + x * cos - y * sin,
        y: c.y + x * sin + y * cos
    };
}
function getRotationRect(r, deg) {
    const rr = Object.values(getRectCorners(r)).map((p)=>rotate(p, deg, r.center));
    const xs = rr.map((p)=>p.x);
    const ys = rr.map((p)=>p.y);
    const minX = Math.min(...xs);
    const minY = Math.min(...ys);
    const maxX = Math.max(...xs);
    const maxY = Math.max(...ys);
    return createRect({
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
    });
}
// src/from-window.ts
function getWindowRect(win) {
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return createRect(getViewportRect(win, opts));
}
function getViewportRect(win, opts) {
    const { excludeScrollbar = false } = opts;
    const { innerWidth, innerHeight, document: doc, visualViewport } = win;
    const width = (visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.width) || innerWidth;
    const height = (visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.height) || innerHeight;
    const rect = {
        x: 0,
        y: 0,
        width,
        height
    };
    if (excludeScrollbar) {
        const scrollbarWidth = innerWidth - doc.documentElement.clientWidth;
        const scrollbarHeight = innerHeight - doc.documentElement.clientHeight;
        rect.width -= scrollbarWidth;
        rect.height -= scrollbarHeight;
    }
    return rect;
}
// src/operations.ts
var isSymmetric = (v)=>"dx" in v || "dy" in v;
function inset(r, i) {
    const v = isSymmetric(i) ? {
        left: i.dx,
        right: i.dx,
        top: i.dy,
        bottom: i.dy
    } : i;
    const { top = 0, right = 0, bottom = 0, left = 0 } = v;
    return createRect({
        x: r.x + left,
        y: r.y + top,
        width: r.width - left - right,
        height: r.height - top - bottom
    });
}
function expand(r, v) {
    const value = typeof v === "number" ? {
        dx: -v,
        dy: -v
    } : v;
    return inset(r, value);
}
function shrink(r, v) {
    const value = typeof v === "number" ? {
        dx: -v,
        dy: -v
    } : v;
    return inset(r, value);
}
function shift(r, o) {
    const { x = 0, y = 0 } = o;
    return createRect({
        x: r.x + x,
        y: r.y + y,
        width: r.width,
        height: r.height
    });
}
// src/polygon.ts
function getElementPolygon(rectValue, placement) {
    const rect = createRect(rectValue);
    const { top, right, left, bottom } = getRectCorners(rect);
    const [base] = placement.split("-");
    return ({
        top: [
            left,
            top,
            right,
            bottom
        ],
        right: [
            top,
            right,
            bottom,
            left
        ],
        bottom: [
            top,
            left,
            bottom,
            right
        ],
        left: [
            right,
            top,
            left,
            bottom
        ]
    })[base];
}
function isPointInPolygon(polygon, point) {
    const { x, y } = point;
    let c = false;
    for(let i = 0, j = polygon.length - 1; i < polygon.length; j = i++){
        const xi = polygon[i].x;
        const yi = polygon[i].y;
        const xj = polygon[j].x;
        const yj = polygon[j].y;
        if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) {
            c = !c;
        }
    }
    return c;
}
function createPolygonElement() {
    const id = "debug-polygon";
    const existingPolygon = document.getElementById(id);
    if (existingPolygon) {
        return existingPolygon;
    }
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    Object.assign(svg.style, {
        top: "0",
        left: "0",
        width: "100%",
        height: "100%",
        opacity: "0.15",
        position: "fixed",
        pointerEvents: "none",
        fill: "red"
    });
    const polygon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
    polygon.setAttribute("id", id);
    polygon.setAttribute("points", "0,0 0,0");
    svg.appendChild(polygon);
    document.body.appendChild(svg);
    return polygon;
}
function debugPolygon(polygon) {
    const el = createPolygonElement();
    const points = polygon.map((point)=>"".concat(point.x, ",").concat(point.y)).join(" ");
    el.setAttribute("points", points);
    return ()=>{
        el.remove();
    };
}
// src/compass.ts
var compassDirectionMap = {
    n: {
        x: 0.5,
        y: 0
    },
    ne: {
        x: 1,
        y: 0
    },
    e: {
        x: 1,
        y: 0.5
    },
    se: {
        x: 1,
        y: 1
    },
    s: {
        x: 0.5,
        y: 1
    },
    sw: {
        x: 0,
        y: 1
    },
    w: {
        x: 0,
        y: 0.5
    },
    nw: {
        x: 0,
        y: 0
    }
};
var oppositeDirectionMap = {
    n: "s",
    ne: "sw",
    e: "w",
    se: "nw",
    s: "n",
    sw: "ne",
    w: "e",
    nw: "se"
};
// src/resize.ts
var { sign, abs, min: min2 } = Math;
function getRectExtentPoint(rect, direction) {
    const { minX, minY, maxX, maxY, midX, midY } = rect;
    const x = direction.includes("w") ? minX : direction.includes("e") ? maxX : midX;
    const y = direction.includes("n") ? minY : direction.includes("s") ? maxY : midY;
    return {
        x,
        y
    };
}
function getOppositeDirection(direction) {
    return oppositeDirectionMap[direction];
}
function resizeRect(rect, offset, direction, opts) {
    const { scalingOriginMode, lockAspectRatio } = opts;
    const extent = getRectExtentPoint(rect, direction);
    const oppositeDirection = getOppositeDirection(direction);
    const oppositeExtent = getRectExtentPoint(rect, oppositeDirection);
    if (scalingOriginMode === "center") {
        offset = {
            x: offset.x * 2,
            y: offset.y * 2
        };
    }
    const newExtent = {
        x: extent.x + offset.x,
        y: extent.y + offset.y
    };
    const multiplier = {
        x: compassDirectionMap[direction].x * 2 - 1,
        y: compassDirectionMap[direction].y * 2 - 1
    };
    const newSize = {
        width: newExtent.x - oppositeExtent.x,
        height: newExtent.y - oppositeExtent.y
    };
    const scaleX = multiplier.x * newSize.width / rect.width;
    const scaleY = multiplier.y * newSize.height / rect.height;
    const largestMagnitude = abs(scaleX) > abs(scaleY) ? scaleX : scaleY;
    const scale = lockAspectRatio ? {
        x: largestMagnitude,
        y: largestMagnitude
    } : {
        x: extent.x === oppositeExtent.x ? 1 : scaleX,
        y: extent.y === oppositeExtent.y ? 1 : scaleY
    };
    if (extent.y === oppositeExtent.y) {
        scale.y = abs(scale.y);
    } else if (sign(scale.y) !== sign(scaleY)) {
        scale.y *= -1;
    }
    if (extent.x === oppositeExtent.x) {
        scale.x = abs(scale.x);
    } else if (sign(scale.x) !== sign(scaleX)) {
        scale.x *= -1;
    }
    switch(scalingOriginMode){
        case "extent":
            return transformRect(rect, AffineTransform.scale(scale.x, scale.y, oppositeExtent), false);
        case "center":
            return transformRect(rect, AffineTransform.scale(scale.x, scale.y, {
                x: rect.midX,
                y: rect.midY
            }), false);
    }
}
function createRectFromPoints(initialPoint, finalPoint) {
    let normalized = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (normalized) {
        return {
            x: min2(finalPoint.x, initialPoint.x),
            y: min2(finalPoint.y, initialPoint.y),
            width: abs(finalPoint.x - initialPoint.x),
            height: abs(finalPoint.y - initialPoint.y)
        };
    }
    return {
        x: initialPoint.x,
        y: initialPoint.y,
        width: finalPoint.x - initialPoint.x,
        height: finalPoint.y - initialPoint.y
    };
}
function transformRect(rect, transform) {
    let normalized = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    const p1 = transform.applyTo({
        x: rect.minX,
        y: rect.minY
    });
    const p2 = transform.applyTo({
        x: rect.maxX,
        y: rect.maxY
    });
    return createRectFromPoints(p1, p2, normalized);
}
;
}),
"[project]/node_modules/@zag-js/menu/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "itemGroupLabelProps",
    ()=>itemGroupLabelProps,
    "itemGroupProps",
    ()=>itemGroupProps,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "optionItemProps",
    ()=>optionItemProps,
    "props",
    ()=>props,
    "splitItemGroupLabelProps",
    ()=>splitItemGroupLabelProps,
    "splitItemGroupProps",
    ()=>splitItemGroupProps,
    "splitItemProps",
    ()=>splitItemProps,
    "splitOptionItemProps",
    ()=>splitOptionItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$rect$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/rect-utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
// src/menu.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("menu").parts("arrow", "arrowTip", "content", "contextTrigger", "indicator", "item", "itemGroup", "itemGroupLabel", "itemIndicator", "itemText", "positioner", "separator", "trigger", "triggerItem");
var parts = anatomy.build();
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "menu:".concat(ctx.id, ":trigger");
};
var getContextTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_contextTrigger;
    return (_ctx_ids_contextTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.contextTrigger) !== null && _ctx_ids_contextTrigger !== void 0 ? _ctx_ids_contextTrigger : "menu:".concat(ctx.id, ":ctx-trigger");
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "menu:".concat(ctx.id, ":content");
};
var getArrowId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_arrow;
    return (_ctx_ids_arrow = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.arrow) !== null && _ctx_ids_arrow !== void 0 ? _ctx_ids_arrow : "menu:".concat(ctx.id, ":arrow");
};
var getPositionerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_positioner;
    return (_ctx_ids_positioner = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.positioner) !== null && _ctx_ids_positioner !== void 0 ? _ctx_ids_positioner : "menu:".concat(ctx.id, ":popper");
};
var getGroupId = (ctx, id)=>{
    var _ctx_ids_group, _ctx_ids;
    var _ctx_ids_group1;
    return (_ctx_ids_group1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_group = _ctx_ids.group) === null || _ctx_ids_group === void 0 ? void 0 : _ctx_ids_group.call(_ctx_ids, id)) !== null && _ctx_ids_group1 !== void 0 ? _ctx_ids_group1 : "menu:".concat(ctx.id, ":group:").concat(id);
};
var getItemId = (ctx, id)=>"".concat(ctx.id, "/").concat(id);
var getItemValue = (el)=>{
    var _el_dataset_value;
    return (_el_dataset_value = el === null || el === void 0 ? void 0 : el.dataset.value) !== null && _el_dataset_value !== void 0 ? _el_dataset_value : null;
};
var getGroupLabelId = (ctx, id)=>{
    var _ctx_ids_groupLabel, _ctx_ids;
    var _ctx_ids_groupLabel1;
    return (_ctx_ids_groupLabel1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_groupLabel = _ctx_ids.groupLabel) === null || _ctx_ids_groupLabel === void 0 ? void 0 : _ctx_ids_groupLabel.call(_ctx_ids, id)) !== null && _ctx_ids_groupLabel1 !== void 0 ? _ctx_ids_groupLabel1 : "menu:".concat(ctx.id, ":group-label:").concat(id);
};
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
var getPositionerEl = (ctx)=>ctx.getById(getPositionerId(ctx));
var getTriggerEl = (ctx)=>ctx.getById(getTriggerId(ctx));
var getItemEl = (ctx, value)=>value ? ctx.getById(getItemId(ctx, value)) : null;
var getContextTriggerEl = (ctx)=>ctx.getById(getContextTriggerId(ctx));
var getElements = (ctx)=>{
    const ownerId = CSS.escape(getContentId(ctx));
    const selector = '[role^="menuitem"][data-ownedby='.concat(ownerId, "]:not([data-disabled])");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getContentEl(ctx), selector);
};
var getFirstEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["first"])(getElements(ctx));
var getLastEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["last"])(getElements(ctx));
var isMatch = (el, value)=>{
    if (!value) return false;
    return el.id === value || el.dataset.value === value;
};
var getNextEl = (ctx, opts)=>{
    const items = getElements(ctx);
    const index = items.findIndex((el)=>isMatch(el, opts.value));
    var _opts_loop;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["next"])(items, index, {
        loop: (_opts_loop = opts.loop) !== null && _opts_loop !== void 0 ? _opts_loop : opts.loopFocus
    });
};
var getPrevEl = (ctx, opts)=>{
    const items = getElements(ctx);
    const index = items.findIndex((el)=>isMatch(el, opts.value));
    var _opts_loop;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prev"])(items, index, {
        loop: (_opts_loop = opts.loop) !== null && _opts_loop !== void 0 ? _opts_loop : opts.loopFocus
    });
};
var getElemByKey = (ctx, opts)=>{
    const items = getElements(ctx);
    const item = items.find((el)=>isMatch(el, opts.value));
    var _item_id;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getByTypeahead"])(items, {
        state: opts.typeaheadState,
        key: opts.key,
        activeId: (_item_id = item === null || item === void 0 ? void 0 : item.id) !== null && _item_id !== void 0 ? _item_id : null
    });
};
var isTargetDisabled = (v)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHTMLElement"])(v) && (v.dataset.disabled === "" || v.hasAttribute("disabled"));
};
var isTriggerItem = (el)=>{
    var _el_getAttribute;
    return !!(el === null || el === void 0 ? void 0 : (_el_getAttribute = el.getAttribute("role")) === null || _el_getAttribute === void 0 ? void 0 : _el_getAttribute.startsWith("menuitem")) && !!(el === null || el === void 0 ? void 0 : el.hasAttribute("aria-controls"));
};
var itemSelectEvent = "menu:select";
function dispatchSelectionEvent(el, value) {
    if (!el) return;
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(el);
    const event = new win.CustomEvent(itemSelectEvent, {
        detail: {
            value
        }
    });
    el.dispatchEvent(event);
}
// src/menu.connect.ts
function connect(service, normalize) {
    const { context, send, state, computed, prop, scope } = service;
    const open = state.hasTag("open");
    const isSubmenu = context.get("isSubmenu");
    const isTypingAhead = computed("isTypingAhead");
    const composite = prop("composite");
    const currentPlacement = context.get("currentPlacement");
    const anchorPoint = context.get("anchorPoint");
    const highlightedValue = context.get("highlightedValue");
    const popperStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementStyles"])({
        ...prop("positioning"),
        placement: anchorPoint ? "bottom" : currentPlacement
    });
    function getItemState(props2) {
        return {
            id: getItemId(scope, props2.value),
            disabled: !!props2.disabled,
            highlighted: highlightedValue === props2.value
        };
    }
    function getOptionItemProps(props2) {
        var _props2_valueText;
        const valueText = (_props2_valueText = props2.valueText) !== null && _props2_valueText !== void 0 ? _props2_valueText : props2.value;
        return {
            ...props2,
            id: props2.value,
            valueText
        };
    }
    function getOptionItemState(props2) {
        const itemState = getItemState(getOptionItemProps(props2));
        return {
            ...itemState,
            checked: !!props2.checked
        };
    }
    function getItemProps(props2) {
        const { closeOnSelect, valueText, value } = props2;
        const itemState = getItemState(props2);
        const id = getItemId(scope, value);
        return normalize.element({
            ...parts.item.attrs,
            id,
            role: "menuitem",
            "aria-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(itemState.disabled),
            "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
            "data-ownedby": getContentId(scope),
            "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted),
            "data-value": value,
            "data-valuetext": valueText,
            onDragStart (event) {
                const isLink = event.currentTarget.matches("a[href]");
                if (isLink) event.preventDefault();
            },
            onPointerMove (event) {
                if (itemState.disabled) return;
                if (event.pointerType !== "mouse") return;
                const target = event.currentTarget;
                if (itemState.highlighted) return;
                send({
                    type: "ITEM_POINTERMOVE",
                    id,
                    target,
                    closeOnSelect
                });
            },
            onPointerLeave (event) {
                var _service_event_previous;
                if (itemState.disabled) return;
                if (event.pointerType !== "mouse") return;
                const pointerMoved = (_service_event_previous = service.event.previous()) === null || _service_event_previous === void 0 ? void 0 : _service_event_previous.type.includes("POINTER");
                if (!pointerMoved) return;
                const target = event.currentTarget;
                send({
                    type: "ITEM_POINTERLEAVE",
                    id,
                    target,
                    closeOnSelect
                });
            },
            onPointerDown (event) {
                if (itemState.disabled) return;
                const target = event.currentTarget;
                send({
                    type: "ITEM_POINTERDOWN",
                    target,
                    id,
                    closeOnSelect
                });
            },
            onClick (event) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDownloadingEvent"])(event)) return;
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOpeningInNewTab"])(event)) return;
                if (itemState.disabled) return;
                const target = event.currentTarget;
                send({
                    type: "ITEM_CLICK",
                    target,
                    id,
                    closeOnSelect
                });
            }
        });
    }
    return {
        highlightedValue,
        open,
        setOpen (nextOpen) {
            const open2 = state.hasTag("open");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "OPEN" : "CLOSE"
            });
        },
        setHighlightedValue (value) {
            send({
                type: "HIGHLIGHTED.SET",
                value
            });
        },
        setParent (parent) {
            send({
                type: "PARENT.SET",
                value: parent,
                id: parent.prop("id")
            });
        },
        setChild (child) {
            send({
                type: "CHILD.SET",
                value: child,
                id: child.prop("id")
            });
        },
        reposition () {
            let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            send({
                type: "POSITIONING.SET",
                options
            });
        },
        addItemListener (props2) {
            const node = scope.getById(props2.id);
            if (!node) return;
            const listener = ()=>{
                var _props2_onSelect;
                return (_props2_onSelect = props2.onSelect) === null || _props2_onSelect === void 0 ? void 0 : _props2_onSelect.call(props2);
            };
            node.addEventListener(itemSelectEvent, listener);
            return ()=>node.removeEventListener(itemSelectEvent, listener);
        },
        getContextTriggerProps () {
            return normalize.element({
                ...parts.contextTrigger.attrs,
                dir: prop("dir"),
                id: getContextTriggerId(scope),
                "data-state": open ? "open" : "closed",
                onPointerDown (event) {
                    if (event.pointerType === "mouse") return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    send({
                        type: "CONTEXT_MENU_START",
                        point
                    });
                },
                onPointerCancel (event) {
                    if (event.pointerType === "mouse") return;
                    send({
                        type: "CONTEXT_MENU_CANCEL"
                    });
                },
                onPointerMove (event) {
                    if (event.pointerType === "mouse") return;
                    send({
                        type: "CONTEXT_MENU_CANCEL"
                    });
                },
                onPointerUp (event) {
                    if (event.pointerType === "mouse") return;
                    send({
                        type: "CONTEXT_MENU_CANCEL"
                    });
                },
                onContextMenu (event) {
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    send({
                        type: "CONTEXT_MENU",
                        point
                    });
                    event.preventDefault();
                },
                style: {
                    WebkitTouchCallout: "none",
                    WebkitUserSelect: "none",
                    userSelect: "none"
                }
            });
        },
        getTriggerItemProps (childApi) {
            const triggerProps = childApi.getTriggerProps();
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeProps"])(getItemProps({
                value: triggerProps.id
            }), triggerProps);
        },
        getTriggerProps () {
            return normalize.button({
                ...isSubmenu ? parts.triggerItem.attrs : parts.trigger.attrs,
                "data-placement": context.get("currentPlacement"),
                type: "button",
                dir: prop("dir"),
                id: getTriggerId(scope),
                "data-uid": prop("id"),
                "aria-haspopup": composite ? "menu" : "dialog",
                "aria-controls": getContentId(scope),
                "aria-expanded": open || void 0,
                "data-state": open ? "open" : "closed",
                onPointerMove (event) {
                    if (event.pointerType !== "mouse") return;
                    const disabled = isTargetDisabled(event.currentTarget);
                    if (disabled || !isSubmenu) return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    send({
                        type: "TRIGGER_POINTERMOVE",
                        target: event.currentTarget,
                        point
                    });
                },
                onPointerLeave (event) {
                    if (isTargetDisabled(event.currentTarget)) return;
                    if (event.pointerType !== "mouse") return;
                    if (!isSubmenu) return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    send({
                        type: "TRIGGER_POINTERLEAVE",
                        target: event.currentTarget,
                        point
                    });
                },
                onPointerDown (event) {
                    if (isTargetDisabled(event.currentTarget)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isContextMenuEvent"])(event)) return;
                    event.preventDefault();
                },
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (isTargetDisabled(event.currentTarget)) return;
                    send({
                        type: "TRIGGER_CLICK",
                        target: event.currentTarget
                    });
                },
                onBlur () {
                    send({
                        type: "TRIGGER_BLUR"
                    });
                },
                onFocus () {
                    send({
                        type: "TRIGGER_FOCUS"
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    const keyMap = {
                        ArrowDown () {
                            send({
                                type: "ARROW_DOWN"
                            });
                        },
                        ArrowUp () {
                            send({
                                type: "ARROW_UP"
                            });
                        },
                        Enter () {
                            send({
                                type: "ARROW_DOWN",
                                src: "enter"
                            });
                        },
                        Space () {
                            send({
                                type: "ARROW_DOWN",
                                src: "space"
                            });
                        }
                    };
                    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        orientation: "vertical",
                        dir: prop("dir")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        event.preventDefault();
                        exec(event);
                    }
                }
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "data-state": open ? "open" : "closed"
            });
        },
        getPositionerProps () {
            return normalize.element({
                ...parts.positioner.attrs,
                dir: prop("dir"),
                id: getPositionerId(scope),
                style: popperStyles.floating
            });
        },
        getArrowProps () {
            return normalize.element({
                id: getArrowId(scope),
                ...parts.arrow.attrs,
                dir: prop("dir"),
                style: popperStyles.arrow
            });
        },
        getArrowTipProps () {
            return normalize.element({
                ...parts.arrowTip.attrs,
                dir: prop("dir"),
                style: popperStyles.arrowTip
            });
        },
        getContentProps () {
            return normalize.element({
                ...parts.content.attrs,
                id: getContentId(scope),
                "aria-label": prop("aria-label"),
                hidden: !open,
                "data-state": open ? "open" : "closed",
                role: composite ? "menu" : "dialog",
                tabIndex: 0,
                dir: prop("dir"),
                "aria-activedescendant": computed("highlightedId") || void 0,
                "aria-labelledby": getTriggerId(scope),
                "data-placement": currentPlacement,
                onPointerEnter (event) {
                    if (event.pointerType !== "mouse") return;
                    send({
                        type: "MENU_POINTERENTER"
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    const sameMenu = (target === null || target === void 0 ? void 0 : target.closest("[role=menu]")) === event.currentTarget || target === event.currentTarget;
                    if (!sameMenu) return;
                    if (event.key === "Tab") {
                        const valid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidTabEvent"])(event);
                        if (!valid) {
                            event.preventDefault();
                            return;
                        }
                    }
                    const item = getItemEl(scope, highlightedValue);
                    const keyMap = {
                        ArrowDown () {
                            send({
                                type: "ARROW_DOWN"
                            });
                        },
                        ArrowUp () {
                            send({
                                type: "ARROW_UP"
                            });
                        },
                        ArrowLeft () {
                            send({
                                type: "ARROW_LEFT"
                            });
                        },
                        ArrowRight () {
                            send({
                                type: "ARROW_RIGHT"
                            });
                        },
                        Enter () {
                            send({
                                type: "ENTER"
                            });
                            if (highlightedValue == null) return;
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAnchorElement"])(item)) {
                                var _prop;
                                (_prop = prop("navigate")) === null || _prop === void 0 ? void 0 : _prop({
                                    value: highlightedValue,
                                    node: item,
                                    href: item.href
                                });
                            }
                        },
                        Space (event2) {
                            if (isTypingAhead) {
                                send({
                                    type: "TYPEAHEAD",
                                    key: event2.key
                                });
                            } else {
                                var _keyMap_Enter;
                                (_keyMap_Enter = keyMap.Enter) === null || _keyMap_Enter === void 0 ? void 0 : _keyMap_Enter.call(keyMap, event2);
                            }
                        },
                        Home () {
                            send({
                                type: "HOME"
                            });
                        },
                        End () {
                            send({
                                type: "END"
                            });
                        }
                    };
                    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        exec(event);
                        event.stopPropagation();
                        event.preventDefault();
                        return;
                    }
                    if (!prop("typeahead")) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPrintableKey"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isModifierKey"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEditableElement"])(target)) return;
                    send({
                        type: "TYPEAHEAD",
                        key: event.key
                    });
                    event.preventDefault();
                }
            });
        },
        getSeparatorProps () {
            return normalize.element({
                ...parts.separator.attrs,
                role: "separator",
                dir: prop("dir"),
                "aria-orientation": "horizontal"
            });
        },
        getItemState,
        getItemProps,
        getOptionItemState,
        getOptionItemProps (props2) {
            const { type, disabled, closeOnSelect } = props2;
            const option = getOptionItemProps(props2);
            const itemState = getOptionItemState(props2);
            return {
                ...getItemProps(option),
                ...normalize.element({
                    "data-type": type,
                    ...parts.item.attrs,
                    dir: prop("dir"),
                    "data-value": option.value,
                    role: "menuitem".concat(type),
                    "aria-checked": !!itemState.checked,
                    "data-state": itemState.checked ? "checked" : "unchecked",
                    onClick (event) {
                        if (disabled) return;
                        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDownloadingEvent"])(event)) return;
                        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOpeningInNewTab"])(event)) return;
                        const target = event.currentTarget;
                        send({
                            type: "ITEM_CLICK",
                            target,
                            option,
                            closeOnSelect
                        });
                    }
                })
            };
        },
        getItemIndicatorProps (props2) {
            const itemState = getOptionItemState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cast"])(props2));
            const dataState = itemState.checked ? "checked" : "unchecked";
            return normalize.element({
                ...parts.itemIndicator.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted),
                "data-state": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(props2, "checked") ? dataState : void 0,
                hidden: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(props2, "checked") ? !itemState.checked : void 0
            });
        },
        getItemTextProps (props2) {
            const itemState = getOptionItemState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cast"])(props2));
            const dataState = itemState.checked ? "checked" : "unchecked";
            return normalize.element({
                ...parts.itemText.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted),
                "data-state": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProp"])(props2, "checked") ? dataState : void 0
            });
        },
        getItemGroupLabelProps (props2) {
            return normalize.element({
                ...parts.itemGroupLabel.attrs,
                id: getGroupLabelId(scope, props2.htmlFor),
                dir: prop("dir")
            });
        },
        getItemGroupProps (props2) {
            return normalize.element({
                id: getGroupId(scope, props2.id),
                ...parts.itemGroup.attrs,
                dir: prop("dir"),
                "aria-labelledby": getGroupLabelId(scope, props2.id),
                role: "group"
            });
        }
    };
}
var { not, and, or } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            closeOnSelect: true,
            typeahead: true,
            composite: true,
            loopFocus: false,
            navigate (details) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clickIfLink"])(details.node);
            },
            ...props2,
            positioning: {
                placement: "bottom-start",
                gutter: 8,
                ...props2.positioning
            }
        };
    },
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "open" : "idle";
    },
    context (param) {
        let { bindable, prop } = param;
        return {
            suspendPointer: bindable(()=>({
                    defaultValue: false
                })),
            highlightedValue: bindable(()=>({
                    defaultValue: prop("defaultHighlightedValue") || null,
                    value: prop("highlightedValue"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onHighlightChange")) === null || _prop === void 0 ? void 0 : _prop({
                            highlightedValue: value
                        });
                    }
                })),
            lastHighlightedValue: bindable(()=>({
                    defaultValue: null
                })),
            currentPlacement: bindable(()=>({
                    defaultValue: void 0
                })),
            intentPolygon: bindable(()=>({
                    defaultValue: null
                })),
            anchorPoint: bindable(()=>({
                    defaultValue: null,
                    hash (value) {
                        return "x: ".concat(value === null || value === void 0 ? void 0 : value.x, ", y: ").concat(value === null || value === void 0 ? void 0 : value.y);
                    }
                })),
            isSubmenu: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    refs () {
        return {
            parent: null,
            children: {},
            typeaheadState: {
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getByTypeahead"].defaultOptions
            },
            positioningOverride: {}
        };
    },
    computed: {
        isRtl: (param)=>{
            let { prop } = param;
            return prop("dir") === "rtl";
        },
        isTypingAhead: (param)=>{
            let { refs } = param;
            return refs.get("typeaheadState").keysSoFar !== "";
        },
        highlightedId: (param)=>{
            let { context, scope, refs } = param;
            return resolveItemId(refs.get("children"), context.get("highlightedValue"), scope);
        }
    },
    watch (param) {
        let { track, action, context, prop } = param;
        track([
            ()=>context.get("isSubmenu")
        ], ()=>{
            action([
                "setSubmenuPlacement"
            ]);
        });
        track([
            ()=>context.hash("anchorPoint")
        ], ()=>{
            if (!context.get("anchorPoint")) return;
            action([
                "reposition"
            ]);
        });
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
    },
    on: {
        "PARENT.SET": {
            actions: [
                "setParentMenu"
            ]
        },
        "CHILD.SET": {
            actions: [
                "setChildMenu"
            ]
        },
        OPEN: [
            {
                guard: "isOpenControlled",
                actions: [
                    "invokeOnOpen"
                ]
            },
            {
                target: "open",
                actions: [
                    "invokeOnOpen"
                ]
            }
        ],
        OPEN_AUTOFOCUS: [
            {
                guard: "isOpenControlled",
                actions: [
                    "invokeOnOpen"
                ]
            },
            {
                // internal: true,
                target: "open",
                actions: [
                    "highlightFirstItem",
                    "invokeOnOpen"
                ]
            }
        ],
        CLOSE: [
            {
                guard: "isOpenControlled",
                actions: [
                    "invokeOnClose"
                ]
            },
            {
                target: "closed",
                actions: [
                    "invokeOnClose"
                ]
            }
        ],
        "HIGHLIGHTED.RESTORE": {
            actions: [
                "restoreHighlightedItem"
            ]
        },
        "HIGHLIGHTED.SET": {
            actions: [
                "setHighlightedItem"
            ]
        }
    },
    states: {
        idle: {
            tags: [
                "closed"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                "CONTROLLED.CLOSE": {
                    target: "closed"
                },
                CONTEXT_MENU_START: {
                    target: "opening:contextmenu",
                    actions: [
                        "setAnchorPoint"
                    ]
                },
                CONTEXT_MENU: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "setAnchorPoint",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setAnchorPoint",
                            "invokeOnOpen"
                        ]
                    }
                ],
                TRIGGER_CLICK: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                TRIGGER_FOCUS: {
                    guard: not("isSubmenu"),
                    target: "closed"
                },
                TRIGGER_POINTERMOVE: {
                    guard: "isSubmenu",
                    target: "opening"
                }
            }
        },
        "opening:contextmenu": {
            tags: [
                "closed"
            ],
            effects: [
                "waitForLongPress"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                "CONTROLLED.CLOSE": {
                    target: "closed"
                },
                CONTEXT_MENU_CANCEL: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "LONG_PRESS.OPEN": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ]
            }
        },
        opening: {
            tags: [
                "closed"
            ],
            effects: [
                "waitForOpenDelay"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                "CONTROLLED.CLOSE": {
                    target: "closed"
                },
                BLUR: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                TRIGGER_POINTERLEAVE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "DELAY.OPEN": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ]
            }
        },
        closing: {
            tags: [
                "open"
            ],
            effects: [
                "trackPointerMove",
                "trackInteractOutside",
                "waitForCloseDelay"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                "CONTROLLED.CLOSE": {
                    target: "closed",
                    actions: [
                        "focusParentMenu",
                        "restoreParentHighlightedItem"
                    ]
                },
                // don't invoke on open here since the menu is still open (we're only keeping it open)
                MENU_POINTERENTER: {
                    target: "open",
                    actions: [
                        "clearIntentPolygon"
                    ]
                },
                POINTER_MOVED_AWAY_FROM_SUBMENU: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "focusParentMenu",
                            "restoreParentHighlightedItem"
                        ]
                    }
                ],
                "DELAY.CLOSE": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "focusParentMenu",
                            "restoreParentHighlightedItem",
                            "invokeOnClose"
                        ]
                    }
                ]
            }
        },
        closed: {
            tags: [
                "closed"
            ],
            entry: [
                "clearHighlightedItem",
                "focusTrigger",
                "resumePointer",
                "clearAnchorPoint"
            ],
            on: {
                "CONTROLLED.OPEN": [
                    {
                        guard: or("isOpenAutoFocusEvent", "isArrowDownEvent"),
                        target: "open",
                        actions: [
                            "highlightFirstItem"
                        ]
                    },
                    {
                        guard: "isArrowUpEvent",
                        target: "open",
                        actions: [
                            "highlightLastItem"
                        ]
                    },
                    {
                        target: "open"
                    }
                ],
                CONTEXT_MENU_START: {
                    target: "opening:contextmenu",
                    actions: [
                        "setAnchorPoint"
                    ]
                },
                CONTEXT_MENU: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "setAnchorPoint",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setAnchorPoint",
                            "invokeOnOpen"
                        ]
                    }
                ],
                TRIGGER_CLICK: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                TRIGGER_POINTERMOVE: {
                    guard: "isTriggerItem",
                    target: "opening"
                },
                TRIGGER_BLUR: {
                    target: "idle"
                },
                ARROW_DOWN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "highlightFirstItem",
                            "invokeOnOpen"
                        ]
                    }
                ],
                ARROW_UP: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "highlightLastItem",
                            "invokeOnOpen"
                        ]
                    }
                ]
            }
        },
        open: {
            tags: [
                "open"
            ],
            effects: [
                "trackInteractOutside",
                "trackPositioning",
                "scrollToHighlightedItem"
            ],
            entry: [
                "focusMenu",
                "resumePointer"
            ],
            on: {
                "CONTROLLED.CLOSE": [
                    {
                        target: "closed",
                        guard: "isArrowLeftEvent",
                        actions: [
                            "focusParentMenu"
                        ]
                    },
                    {
                        target: "closed"
                    }
                ],
                TRIGGER_CLICK: [
                    {
                        guard: and(not("isTriggerItem"), "isOpenControlled"),
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: not("isTriggerItem"),
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                CONTEXT_MENU: {
                    actions: [
                        "setAnchorPoint",
                        "focusMenu"
                    ]
                },
                ARROW_UP: {
                    actions: [
                        "highlightPrevItem",
                        "focusMenu"
                    ]
                },
                ARROW_DOWN: {
                    actions: [
                        "highlightNextItem",
                        "focusMenu"
                    ]
                },
                ARROW_LEFT: [
                    {
                        guard: and("isSubmenu", "isOpenControlled"),
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "isSubmenu",
                        target: "closed",
                        actions: [
                            "focusParentMenu",
                            "invokeOnClose"
                        ]
                    }
                ],
                HOME: {
                    actions: [
                        "highlightFirstItem",
                        "focusMenu"
                    ]
                },
                END: {
                    actions: [
                        "highlightLastItem",
                        "focusMenu"
                    ]
                },
                ARROW_RIGHT: {
                    guard: "isTriggerItemHighlighted",
                    actions: [
                        "openSubmenu"
                    ]
                },
                ENTER: [
                    {
                        guard: "isTriggerItemHighlighted",
                        actions: [
                            "openSubmenu"
                        ]
                    },
                    {
                        actions: [
                            "clickHighlightedItem"
                        ]
                    }
                ],
                ITEM_POINTERMOVE: [
                    {
                        guard: not("isPointerSuspended"),
                        actions: [
                            "setHighlightedItem",
                            "focusMenu"
                        ]
                    },
                    {
                        actions: [
                            "setLastHighlightedItem"
                        ]
                    }
                ],
                ITEM_POINTERLEAVE: {
                    guard: and(not("isPointerSuspended"), not("isTriggerItem")),
                    actions: [
                        "clearHighlightedItem"
                    ]
                },
                ITEM_CLICK: [
                    // == grouped ==
                    {
                        guard: and(not("isTriggerItemHighlighted"), not("isHighlightedItemEditable"), "closeOnSelect", "isOpenControlled"),
                        actions: [
                            "invokeOnSelect",
                            "setOptionState",
                            "closeRootMenu",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: and(not("isTriggerItemHighlighted"), not("isHighlightedItemEditable"), "closeOnSelect"),
                        target: "closed",
                        actions: [
                            "invokeOnSelect",
                            "setOptionState",
                            "closeRootMenu",
                            "invokeOnClose"
                        ]
                    },
                    //
                    {
                        guard: and(not("isTriggerItemHighlighted"), not("isHighlightedItemEditable")),
                        actions: [
                            "invokeOnSelect",
                            "setOptionState"
                        ]
                    },
                    {
                        actions: [
                            "setHighlightedItem"
                        ]
                    }
                ],
                TRIGGER_POINTERMOVE: {
                    guard: "isTriggerItem",
                    actions: [
                        "setIntentPolygon"
                    ]
                },
                TRIGGER_POINTERLEAVE: {
                    target: "closing"
                },
                ITEM_POINTERDOWN: {
                    actions: [
                        "setHighlightedItem"
                    ]
                },
                TYPEAHEAD: {
                    actions: [
                        "highlightMatchedItem"
                    ]
                },
                FOCUS_MENU: {
                    actions: [
                        "focusMenu"
                    ]
                },
                "POSITIONING.SET": {
                    actions: [
                        "reposition"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            closeOnSelect: (param)=>{
                let { prop, event } = param;
                var _event_closeOnSelect;
                return !!((_event_closeOnSelect = event === null || event === void 0 ? void 0 : event.closeOnSelect) !== null && _event_closeOnSelect !== void 0 ? _event_closeOnSelect : prop("closeOnSelect"));
            },
            // whether the trigger is also a menu item
            isTriggerItem: (param)=>{
                let { event } = param;
                return isTriggerItem(event.target);
            },
            // whether the trigger item is the active item
            isTriggerItemHighlighted: (param)=>{
                let { event, scope, computed } = param;
                var _event_target;
                const target = (_event_target = event.target) !== null && _event_target !== void 0 ? _event_target : scope.getById(computed("highlightedId"));
                return !!(target === null || target === void 0 ? void 0 : target.hasAttribute("aria-controls"));
            },
            isSubmenu: (param)=>{
                let { context } = param;
                return context.get("isSubmenu");
            },
            isPointerSuspended: (param)=>{
                let { context } = param;
                return context.get("suspendPointer");
            },
            isHighlightedItemEditable: (param)=>{
                let { scope, computed } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEditableElement"])(scope.getById(computed("highlightedId")));
            },
            // guard assertions (for controlled mode)
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") !== void 0;
            },
            isArrowLeftEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "ARROW_LEFT";
            },
            isArrowUpEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "ARROW_UP";
            },
            isArrowDownEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "ARROW_DOWN";
            },
            isOpenAutoFocusEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "OPEN_AUTOFOCUS";
            }
        },
        effects: {
            waitForOpenDelay (param) {
                let { send } = param;
                const timer = setTimeout(()=>{
                    send({
                        type: "DELAY.OPEN"
                    });
                }, 100);
                return ()=>clearTimeout(timer);
            },
            waitForCloseDelay (param) {
                let { send } = param;
                const timer = setTimeout(()=>{
                    send({
                        type: "DELAY.CLOSE"
                    });
                }, 300);
                return ()=>clearTimeout(timer);
            },
            waitForLongPress (param) {
                let { send } = param;
                const timer = setTimeout(()=>{
                    send({
                        type: "LONG_PRESS.OPEN"
                    });
                }, 700);
                return ()=>clearTimeout(timer);
            },
            trackPositioning (param) {
                let { context, prop, scope, refs } = param;
                if (!!getContextTriggerEl(scope)) return;
                const positioning = {
                    ...prop("positioning"),
                    ...refs.get("positioningOverride")
                };
                context.set("currentPlacement", positioning.placement);
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(getTriggerEl(scope), getPositionerEl2, {
                    ...positioning,
                    defer: true,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            trackInteractOutside (param) {
                let { refs, scope, prop, context, send } = param;
                const getContentEl2 = ()=>getContentEl(scope);
                let restoreFocus = true;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDismissableElement"])(getContentEl2, {
                    defer: true,
                    exclude: [
                        getTriggerEl(scope)
                    ],
                    onInteractOutside: prop("onInteractOutside"),
                    onRequestDismiss: prop("onRequestDismiss"),
                    onFocusOutside (event) {
                        var _prop;
                        (_prop = prop("onFocusOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                        const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event.detail.originalEvent);
                        const isWithinContextTrigger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(getContextTriggerEl(scope), target);
                        if (isWithinContextTrigger) {
                            event.preventDefault();
                            return;
                        }
                    },
                    onEscapeKeyDown (event) {
                        var _prop;
                        (_prop = prop("onEscapeKeyDown")) === null || _prop === void 0 ? void 0 : _prop(event);
                        if (context.get("isSubmenu")) event.preventDefault();
                        closeRootMenu({
                            parent: refs.get("parent")
                        });
                    },
                    onPointerDownOutside (event) {
                        var _prop;
                        (_prop = prop("onPointerDownOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                        const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event.detail.originalEvent);
                        const isWithinContextTrigger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(getContextTriggerEl(scope), target);
                        if (isWithinContextTrigger && event.detail.contextmenu) {
                            event.preventDefault();
                            return;
                        }
                        restoreFocus = !event.detail.focusable;
                    },
                    onDismiss () {
                        send({
                            type: "CLOSE",
                            src: "interact-outside",
                            restoreFocus
                        });
                    }
                });
            },
            trackPointerMove (param) {
                let { context, scope, send, refs, flush } = param;
                const parent = refs.get("parent");
                flush(()=>{
                    parent.context.set("suspendPointer", true);
                });
                const doc = scope.getDoc();
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "pointermove", (e)=>{
                    const isMovingToSubmenu = isWithinPolygon(context.get("intentPolygon"), {
                        x: e.clientX,
                        y: e.clientY
                    });
                    if (!isMovingToSubmenu) {
                        send({
                            type: "POINTER_MOVED_AWAY_FROM_SUBMENU"
                        });
                        parent.context.set("suspendPointer", false);
                    }
                });
            },
            scrollToHighlightedItem (param) {
                let { event, scope, computed } = param;
                const exec = ()=>{
                    if (event.type.startsWith("ITEM_POINTER")) return;
                    const itemEl = scope.getById(computed("highlightedId"));
                    const contentEl2 = getContentEl(scope);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["scrollIntoView"])(itemEl, {
                        rootEl: contentEl2,
                        block: "nearest"
                    });
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>exec());
                const contentEl = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observeAttributes"])(contentEl, {
                    defer: true,
                    attributes: [
                        "aria-activedescendant"
                    ],
                    callback: exec
                });
            }
        },
        actions: {
            setAnchorPoint (param) {
                let { context, event } = param;
                context.set("anchorPoint", (prev2)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(prev2, event.point) ? prev2 : event.point);
            },
            setSubmenuPlacement (param) {
                let { context, computed, refs } = param;
                if (!context.get("isSubmenu")) return;
                const placement = computed("isRtl") ? "left-start" : "right-start";
                refs.set("positioningOverride", {
                    placement,
                    gutter: 0
                });
            },
            reposition (param) {
                let { context, scope, prop, event, refs } = param;
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                const anchorPoint = context.get("anchorPoint");
                const getAnchorRect = anchorPoint ? ()=>({
                        width: 0,
                        height: 0,
                        ...anchorPoint
                    }) : void 0;
                const positioning = {
                    ...prop("positioning"),
                    ...refs.get("positioningOverride")
                };
                var _event_options;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(getTriggerEl(scope), getPositionerEl2, {
                    ...positioning,
                    defer: true,
                    getAnchorRect,
                    ...(_event_options = event.options) !== null && _event_options !== void 0 ? _event_options : {},
                    listeners: false,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            setOptionState (param) {
                let { event } = param;
                if (!event.option) return;
                const { checked, onCheckedChange, type } = event.option;
                if (type === "radio") {
                    onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange(true);
                } else if (type === "checkbox") {
                    onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange(!checked);
                }
            },
            clickHighlightedItem (param) {
                let { scope, computed } = param;
                const itemEl = scope.getById(computed("highlightedId"));
                if (!itemEl || itemEl.dataset.disabled) return;
                queueMicrotask(()=>itemEl.click());
            },
            setIntentPolygon (param) {
                let { context, scope, event } = param;
                const menu = getContentEl(scope);
                const placement = context.get("currentPlacement");
                if (!menu || !placement) return;
                const rect = menu.getBoundingClientRect();
                const polygon = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$rect$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getElementPolygon"])(rect, placement);
                if (!polygon) return;
                const rightSide = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementSide"])(placement) === "right";
                const bleed = rightSide ? -5 : 5;
                context.set("intentPolygon", [
                    {
                        ...event.point,
                        x: event.point.x + bleed
                    },
                    ...polygon
                ]);
            },
            clearIntentPolygon (param) {
                let { context } = param;
                context.set("intentPolygon", null);
            },
            clearAnchorPoint (param) {
                let { context } = param;
                context.set("anchorPoint", null);
            },
            resumePointer (param) {
                let { refs, flush } = param;
                const parent = refs.get("parent");
                if (!parent) return;
                flush(()=>{
                    parent.context.set("suspendPointer", false);
                });
            },
            setHighlightedItem (param) {
                let { context, event } = param;
                const value = event.value || getItemValue(event.target);
                context.set("highlightedValue", value);
            },
            clearHighlightedItem (param) {
                let { context } = param;
                context.set("highlightedValue", null);
            },
            focusMenu (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const contentEl = getContentEl(scope);
                    const initialFocusEl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getInitialFocus"])({
                        root: contentEl,
                        enabled: !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["contains"])(contentEl, scope.getActiveElement()),
                        filter (node) {
                            var _node_role;
                            return !((_node_role = node.role) === null || _node_role === void 0 ? void 0 : _node_role.startsWith("menuitem"));
                        }
                    });
                    initialFocusEl === null || initialFocusEl === void 0 ? void 0 : initialFocusEl.focus({
                        preventScroll: true
                    });
                });
            },
            highlightFirstItem (param) {
                let { context, scope } = param;
                const fn = getContentEl(scope) ? queueMicrotask : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"];
                fn(()=>{
                    const first2 = getFirstEl(scope);
                    if (!first2) return;
                    context.set("highlightedValue", getItemValue(first2));
                });
            },
            highlightLastItem (param) {
                let { context, scope } = param;
                const fn = getContentEl(scope) ? queueMicrotask : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"];
                fn(()=>{
                    const last2 = getLastEl(scope);
                    if (!last2) return;
                    context.set("highlightedValue", getItemValue(last2));
                });
            },
            highlightNextItem (param) {
                let { context, scope, event, prop } = param;
                const next2 = getNextEl(scope, {
                    loop: event.loop,
                    value: context.get("highlightedValue"),
                    loopFocus: prop("loopFocus")
                });
                context.set("highlightedValue", getItemValue(next2));
            },
            highlightPrevItem (param) {
                let { context, scope, event, prop } = param;
                const prev2 = getPrevEl(scope, {
                    loop: event.loop,
                    value: context.get("highlightedValue"),
                    loopFocus: prop("loopFocus")
                });
                context.set("highlightedValue", getItemValue(prev2));
            },
            invokeOnSelect (param) {
                let { context, prop, scope } = param;
                var _prop;
                const value = context.get("highlightedValue");
                if (value == null) return;
                const node = getItemEl(scope, value);
                dispatchSelectionEvent(node, value);
                (_prop = prop("onSelect")) === null || _prop === void 0 ? void 0 : _prop({
                    value
                });
            },
            focusTrigger (param) {
                let { scope, context, event } = param;
                if (context.get("isSubmenu") || context.get("anchorPoint") || event.restoreFocus === false) return;
                queueMicrotask(()=>{
                    var _getTriggerEl;
                    return (_getTriggerEl = getTriggerEl(scope)) === null || _getTriggerEl === void 0 ? void 0 : _getTriggerEl.focus({
                        preventScroll: true
                    });
                });
            },
            highlightMatchedItem (param) {
                let { scope, context, event, refs } = param;
                const node = getElemByKey(scope, {
                    key: event.key,
                    value: context.get("highlightedValue"),
                    typeaheadState: refs.get("typeaheadState")
                });
                if (!node) return;
                context.set("highlightedValue", getItemValue(node));
            },
            setParentMenu (param) {
                let { refs, event, context } = param;
                refs.set("parent", event.value);
                context.set("isSubmenu", true);
            },
            setChildMenu (param) {
                let { refs, event } = param;
                const children = refs.get("children");
                children[event.id] = event.value;
                refs.set("children", children);
            },
            closeRootMenu (param) {
                let { refs } = param;
                closeRootMenu({
                    parent: refs.get("parent")
                });
            },
            openSubmenu (param) {
                let { refs, scope, computed } = param;
                const item = scope.getById(computed("highlightedId"));
                const id = item === null || item === void 0 ? void 0 : item.getAttribute("data-uid");
                const children = refs.get("children");
                const child = id ? children[id] : null;
                child === null || child === void 0 ? void 0 : child.send({
                    type: "OPEN_AUTOFOCUS"
                });
            },
            focusParentMenu (param) {
                let { refs } = param;
                var _refs_get;
                (_refs_get = refs.get("parent")) === null || _refs_get === void 0 ? void 0 : _refs_get.send({
                    type: "FOCUS_MENU"
                });
            },
            setLastHighlightedItem (param) {
                let { context, event } = param;
                context.set("lastHighlightedValue", getItemValue(event.target));
            },
            restoreHighlightedItem (param) {
                let { context } = param;
                if (!context.get("lastHighlightedValue")) return;
                context.set("highlightedValue", context.get("lastHighlightedValue"));
                context.set("lastHighlightedValue", null);
            },
            restoreParentHighlightedItem (param) {
                let { refs } = param;
                var _refs_get;
                (_refs_get = refs.get("parent")) === null || _refs_get === void 0 ? void 0 : _refs_get.send({
                    type: "HIGHLIGHTED.RESTORE"
                });
            },
            invokeOnOpen (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true
                });
            },
            invokeOnClose (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false
                });
            },
            toggleVisibility (param) {
                let { prop, event, send } = param;
                send({
                    type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
                    previousEvent: event
                });
            }
        }
    }
});
function closeRootMenu(ctx) {
    let parent = ctx.parent;
    while(parent && parent.context.get("isSubmenu")){
        parent = parent.refs.get("parent");
    }
    parent === null || parent === void 0 ? void 0 : parent.send({
        type: "CLOSE"
    });
}
function isWithinPolygon(polygon, point) {
    if (!polygon) return false;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$rect$2d$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPointInPolygon"])(polygon, point);
}
function resolveItemId(children, value, scope) {
    const hasChildren = Object.keys(children).length > 0;
    if (!value) return null;
    if (!hasChildren) {
        return getItemId(scope, value);
    }
    for(const id in children){
        const childMenu = children[id];
        const childTriggerId = getTriggerId(childMenu.scope);
        if (childTriggerId === value) {
            return childTriggerId;
        }
    }
    return getItemId(scope, value);
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "anchorPoint",
    "aria-label",
    "closeOnSelect",
    "composite",
    "defaultHighlightedValue",
    "defaultOpen",
    "dir",
    "getRootNode",
    "highlightedValue",
    "id",
    "ids",
    "loopFocus",
    "navigate",
    "onEscapeKeyDown",
    "onFocusOutside",
    "onHighlightChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onRequestDismiss",
    "onSelect",
    "open",
    "positioning",
    "typeahead"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "closeOnSelect",
    "disabled",
    "value",
    "valueText"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
var itemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "htmlFor"
]);
var splitItemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupLabelProps);
var itemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "id"
]);
var splitItemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupProps);
var optionItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "checked",
    "closeOnSelect",
    "disabled",
    "onCheckedChange",
    "type",
    "value",
    "valueText"
]);
var splitOptionItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(optionItemProps);
;
}),
"[project]/node_modules/@zag-js/menu/dist/index.mjs [app-client] (ecmascript) <export anatomy as menuAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "menuAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$menu$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$menu$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/menu/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/popover/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$aria$2d$hidden$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/aria-hidden/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$trap$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/focus-trap/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$remove$2d$scroll$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/remove-scroll/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
// src/popover.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("popover").parts("arrow", "arrowTip", "anchor", "trigger", "indicator", "positioner", "content", "title", "description", "closeTrigger");
var parts = anatomy.build();
var getAnchorId = (scope)=>{
    var _scope_ids;
    var _scope_ids_anchor;
    return (_scope_ids_anchor = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.anchor) !== null && _scope_ids_anchor !== void 0 ? _scope_ids_anchor : "popover:".concat(scope.id, ":anchor");
};
var getTriggerId = (scope)=>{
    var _scope_ids;
    var _scope_ids_trigger;
    return (_scope_ids_trigger = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.trigger) !== null && _scope_ids_trigger !== void 0 ? _scope_ids_trigger : "popover:".concat(scope.id, ":trigger");
};
var getContentId = (scope)=>{
    var _scope_ids;
    var _scope_ids_content;
    return (_scope_ids_content = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.content) !== null && _scope_ids_content !== void 0 ? _scope_ids_content : "popover:".concat(scope.id, ":content");
};
var getPositionerId = (scope)=>{
    var _scope_ids;
    var _scope_ids_positioner;
    return (_scope_ids_positioner = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.positioner) !== null && _scope_ids_positioner !== void 0 ? _scope_ids_positioner : "popover:".concat(scope.id, ":popper");
};
var getArrowId = (scope)=>{
    var _scope_ids;
    var _scope_ids_arrow;
    return (_scope_ids_arrow = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.arrow) !== null && _scope_ids_arrow !== void 0 ? _scope_ids_arrow : "popover:".concat(scope.id, ":arrow");
};
var getTitleId = (scope)=>{
    var _scope_ids;
    var _scope_ids_title;
    return (_scope_ids_title = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.title) !== null && _scope_ids_title !== void 0 ? _scope_ids_title : "popover:".concat(scope.id, ":title");
};
var getDescriptionId = (scope)=>{
    var _scope_ids;
    var _scope_ids_description;
    return (_scope_ids_description = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.description) !== null && _scope_ids_description !== void 0 ? _scope_ids_description : "popover:".concat(scope.id, ":desc");
};
var getCloseTriggerId = (scope)=>{
    var _scope_ids;
    var _scope_ids_closeTrigger;
    return (_scope_ids_closeTrigger = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.closeTrigger) !== null && _scope_ids_closeTrigger !== void 0 ? _scope_ids_closeTrigger : "popover:".concat(scope.id, ":close");
};
var getAnchorEl = (scope)=>scope.getById(getAnchorId(scope));
var getTriggerEl = (scope)=>scope.getById(getTriggerId(scope));
var getContentEl = (scope)=>scope.getById(getContentId(scope));
var getPositionerEl = (scope)=>scope.getById(getPositionerId(scope));
var getTitleEl = (scope)=>scope.getById(getTitleId(scope));
var getDescriptionEl = (scope)=>scope.getById(getDescriptionId(scope));
// src/popover.connect.ts
function connect(service, normalize) {
    const { state, context, send, computed, prop, scope } = service;
    const open = state.matches("open");
    const currentPlacement = context.get("currentPlacement");
    const portalled = computed("currentPortalled");
    const rendered = context.get("renderedElements");
    const popperStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementStyles"])({
        ...prop("positioning"),
        placement: currentPlacement
    });
    return {
        portalled,
        open,
        setOpen (nextOpen) {
            const open2 = state.matches("open");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "OPEN" : "CLOSE"
            });
        },
        reposition () {
            let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            send({
                type: "POSITIONING.SET",
                options
            });
        },
        getArrowProps () {
            return normalize.element({
                id: getArrowId(scope),
                ...parts.arrow.attrs,
                dir: prop("dir"),
                style: popperStyles.arrow
            });
        },
        getArrowTipProps () {
            return normalize.element({
                ...parts.arrowTip.attrs,
                dir: prop("dir"),
                style: popperStyles.arrowTip
            });
        },
        getAnchorProps () {
            return normalize.element({
                ...parts.anchor.attrs,
                dir: prop("dir"),
                id: getAnchorId(scope)
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                dir: prop("dir"),
                type: "button",
                "data-placement": currentPlacement,
                id: getTriggerId(scope),
                "aria-haspopup": "dialog",
                "aria-expanded": open,
                "data-state": open ? "open" : "closed",
                "aria-controls": getContentId(scope),
                onPointerDown (event) {
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) {
                        event.currentTarget.focus();
                    }
                },
                onClick (event) {
                    if (event.defaultPrevented) return;
                    send({
                        type: "TOGGLE"
                    });
                },
                onBlur (event) {
                    send({
                        type: "TRIGGER_BLUR",
                        target: event.relatedTarget
                    });
                }
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "data-state": open ? "open" : "closed"
            });
        },
        getPositionerProps () {
            return normalize.element({
                id: getPositionerId(scope),
                ...parts.positioner.attrs,
                dir: prop("dir"),
                style: popperStyles.floating
            });
        },
        getContentProps () {
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: getContentId(scope),
                tabIndex: -1,
                role: "dialog",
                hidden: !open,
                "data-state": open ? "open" : "closed",
                "data-expanded": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(open),
                "aria-labelledby": rendered.title ? getTitleId(scope) : void 0,
                "aria-describedby": rendered.description ? getDescriptionId(scope) : void 0,
                "data-placement": currentPlacement
            });
        },
        getTitleProps () {
            return normalize.element({
                ...parts.title.attrs,
                id: getTitleId(scope),
                dir: prop("dir")
            });
        },
        getDescriptionProps () {
            return normalize.element({
                ...parts.description.attrs,
                id: getDescriptionId(scope),
                dir: prop("dir")
            });
        },
        getCloseTriggerProps () {
            return normalize.button({
                ...parts.closeTrigger.attrs,
                dir: prop("dir"),
                id: getCloseTriggerId(scope),
                type: "button",
                "aria-label": "close",
                onClick (event) {
                    if (event.defaultPrevented) return;
                    event.stopPropagation();
                    send({
                        type: "CLOSE"
                    });
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            closeOnInteractOutside: true,
            closeOnEscape: true,
            autoFocus: true,
            modal: false,
            portalled: true,
            ...props2,
            positioning: {
                placement: "bottom",
                ...props2.positioning
            }
        };
    },
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "open" : "closed";
    },
    context (param) {
        let { bindable } = param;
        return {
            currentPlacement: bindable(()=>({
                    defaultValue: void 0
                })),
            renderedElements: bindable(()=>({
                    defaultValue: {
                        title: true,
                        description: true
                    }
                }))
        };
    },
    computed: {
        currentPortalled: (param)=>{
            let { prop } = param;
            return !!prop("modal") || !!prop("portalled");
        }
    },
    watch (param) {
        let { track, prop, action } = param;
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
    },
    entry: [
        "checkRenderedElements"
    ],
    states: {
        closed: {
            on: {
                "CONTROLLED.OPEN": {
                    target: "open",
                    actions: [
                        "setInitialFocus"
                    ]
                },
                TOGGLE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen",
                            "setInitialFocus"
                        ]
                    }
                ],
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen",
                            "setInitialFocus"
                        ]
                    }
                ]
            }
        },
        open: {
            effects: [
                "trapFocus",
                "preventScroll",
                "hideContentBelow",
                "trackPositioning",
                "trackDismissableElement",
                "proxyTabFocus"
            ],
            on: {
                "CONTROLLED.CLOSE": {
                    target: "closed",
                    actions: [
                        "setFinalFocus"
                    ]
                },
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose",
                            "setFinalFocus"
                        ]
                    }
                ],
                TOGGLE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "POSITIONING.SET": {
                    actions: [
                        "reposition"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") != void 0;
            }
        },
        effects: {
            trackPositioning (param) {
                let { context, prop, scope } = param;
                context.set("currentPlacement", prop("positioning").placement);
                var _getAnchorEl;
                const anchorEl = (_getAnchorEl = getAnchorEl(scope)) !== null && _getAnchorEl !== void 0 ? _getAnchorEl : getTriggerEl(scope);
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(anchorEl, getPositionerEl2, {
                    ...prop("positioning"),
                    defer: true,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            trackDismissableElement (param) {
                let { send, prop, scope } = param;
                const getContentEl2 = ()=>getContentEl(scope);
                let restoreFocus = true;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDismissableElement"])(getContentEl2, {
                    pointerBlocking: prop("modal"),
                    exclude: getTriggerEl(scope),
                    defer: true,
                    onEscapeKeyDown (event) {
                        var _prop;
                        (_prop = prop("onEscapeKeyDown")) === null || _prop === void 0 ? void 0 : _prop(event);
                        if (prop("closeOnEscape")) return;
                        event.preventDefault();
                    },
                    onInteractOutside (event) {
                        var _prop;
                        (_prop = prop("onInteractOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                        if (event.defaultPrevented) return;
                        restoreFocus = !(event.detail.focusable || event.detail.contextmenu);
                        if (!prop("closeOnInteractOutside")) {
                            event.preventDefault();
                        }
                    },
                    onPointerDownOutside: prop("onPointerDownOutside"),
                    onFocusOutside: prop("onFocusOutside"),
                    persistentElements: prop("persistentElements"),
                    onRequestDismiss: prop("onRequestDismiss"),
                    onDismiss () {
                        send({
                            type: "CLOSE",
                            src: "interact-outside",
                            restoreFocus
                        });
                    }
                });
            },
            proxyTabFocus (param) {
                let { prop, scope } = param;
                if (prop("modal") || !prop("portalled")) return;
                const getContentEl2 = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["proxyTabFocus"])(getContentEl2, {
                    triggerElement: getTriggerEl(scope),
                    defer: true,
                    onFocus (el) {
                        el.focus({
                            preventScroll: true
                        });
                    }
                });
            },
            hideContentBelow (param) {
                let { prop, scope } = param;
                if (!prop("modal")) return;
                const getElements = ()=>[
                        getContentEl(scope),
                        getTriggerEl(scope)
                    ];
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$aria$2d$hidden$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaHidden"])(getElements, {
                    defer: true
                });
            },
            preventScroll (param) {
                let { prop, scope } = param;
                if (!prop("modal")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$remove$2d$scroll$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["preventBodyScroll"])(scope.getDoc());
            },
            trapFocus (param) {
                let { prop, scope } = param;
                if (!prop("modal")) return;
                const contentEl = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$trap$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trapFocus"])(contentEl, {
                    initialFocus: ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getInitialFocus"])({
                            root: getContentEl(scope),
                            getInitialEl: prop("initialFocusEl"),
                            enabled: prop("autoFocus")
                        })
                });
            }
        },
        actions: {
            reposition (param) {
                let { event, prop, scope, context } = param;
                var _getAnchorEl;
                const anchorEl = (_getAnchorEl = getAnchorEl(scope)) !== null && _getAnchorEl !== void 0 ? _getAnchorEl : getTriggerEl(scope);
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(anchorEl, getPositionerEl2, {
                    ...prop("positioning"),
                    ...event.options,
                    defer: true,
                    listeners: false,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            checkRenderedElements (param) {
                let { context, scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    Object.assign(context.get("renderedElements"), {
                        title: !!getTitleEl(scope),
                        description: !!getDescriptionEl(scope)
                    });
                });
            },
            setInitialFocus (param) {
                let { prop, scope } = param;
                if (prop("modal")) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const element = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getInitialFocus"])({
                        root: getContentEl(scope),
                        getInitialEl: prop("initialFocusEl"),
                        enabled: prop("autoFocus")
                    });
                    element === null || element === void 0 ? void 0 : element.focus({
                        preventScroll: true
                    });
                });
            },
            setFinalFocus (param) {
                let { event, scope } = param;
                var _event_previousEvent;
                var _event_restoreFocus;
                const restoreFocus = (_event_restoreFocus = event.restoreFocus) !== null && _event_restoreFocus !== void 0 ? _event_restoreFocus : (_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.restoreFocus;
                if (restoreFocus != null && !restoreFocus) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const element = getTriggerEl(scope);
                    element === null || element === void 0 ? void 0 : element.focus({
                        preventScroll: true
                    });
                });
            },
            invokeOnOpen (param) {
                let { prop, flush } = param;
                flush(()=>{
                    var _prop;
                    (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                        open: true
                    });
                });
            },
            invokeOnClose (param) {
                let { prop, flush } = param;
                flush(()=>{
                    var _prop;
                    (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                        open: false
                    });
                });
            },
            toggleVisibility (param) {
                let { event, send, prop } = param;
                send({
                    type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
                    previousEvent: event
                });
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "autoFocus",
    "closeOnEscape",
    "closeOnInteractOutside",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "initialFocusEl",
    "modal",
    "onEscapeKeyDown",
    "onFocusOutside",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onRequestDismiss",
    "defaultOpen",
    "open",
    "persistentElements",
    "portalled",
    "positioning"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/popover/dist/index.mjs [app-client] (ecmascript) <export anatomy as popoverAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "popoverAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popover$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popover$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popover/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/radio-group/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/focus-visible/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
// src/radio-group.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("radio-group").parts("root", "label", "item", "itemText", "itemControl", "indicator");
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "radio-group:".concat(ctx.id);
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "radio-group:".concat(ctx.id, ":label");
};
var getItemId = (ctx, value)=>{
    var _ctx_ids_item, _ctx_ids;
    var _ctx_ids_item1;
    return (_ctx_ids_item1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_item = _ctx_ids.item) === null || _ctx_ids_item === void 0 ? void 0 : _ctx_ids_item.call(_ctx_ids, value)) !== null && _ctx_ids_item1 !== void 0 ? _ctx_ids_item1 : "radio-group:".concat(ctx.id, ":radio:").concat(value);
};
var getItemHiddenInputId = (ctx, value)=>{
    var _ctx_ids_itemHiddenInput, _ctx_ids;
    var _ctx_ids_itemHiddenInput1;
    return (_ctx_ids_itemHiddenInput1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemHiddenInput = _ctx_ids.itemHiddenInput) === null || _ctx_ids_itemHiddenInput === void 0 ? void 0 : _ctx_ids_itemHiddenInput.call(_ctx_ids, value)) !== null && _ctx_ids_itemHiddenInput1 !== void 0 ? _ctx_ids_itemHiddenInput1 : "radio-group:".concat(ctx.id, ":radio:input:").concat(value);
};
var getItemControlId = (ctx, value)=>{
    var _ctx_ids_itemControl, _ctx_ids;
    var _ctx_ids_itemControl1;
    return (_ctx_ids_itemControl1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemControl = _ctx_ids.itemControl) === null || _ctx_ids_itemControl === void 0 ? void 0 : _ctx_ids_itemControl.call(_ctx_ids, value)) !== null && _ctx_ids_itemControl1 !== void 0 ? _ctx_ids_itemControl1 : "radio-group:".concat(ctx.id, ":radio:control:").concat(value);
};
var getItemLabelId = (ctx, value)=>{
    var _ctx_ids_itemLabel, _ctx_ids;
    var _ctx_ids_itemLabel1;
    return (_ctx_ids_itemLabel1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemLabel = _ctx_ids.itemLabel) === null || _ctx_ids_itemLabel === void 0 ? void 0 : _ctx_ids_itemLabel.call(_ctx_ids, value)) !== null && _ctx_ids_itemLabel1 !== void 0 ? _ctx_ids_itemLabel1 : "radio-group:".concat(ctx.id, ":radio:label:").concat(value);
};
var getIndicatorId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_indicator;
    return (_ctx_ids_indicator = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.indicator) !== null && _ctx_ids_indicator !== void 0 ? _ctx_ids_indicator : "radio-group:".concat(ctx.id, ":indicator");
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getItemHiddenInputEl = (ctx, value)=>ctx.getById(getItemHiddenInputId(ctx, value));
var getIndicatorEl = (ctx)=>ctx.getById(getIndicatorId(ctx));
var getFirstEnabledInputEl = (ctx)=>{
    var _getRootEl;
    return (_getRootEl = getRootEl(ctx)) === null || _getRootEl === void 0 ? void 0 : _getRootEl.querySelector("input:not(:disabled)");
};
var getFirstEnabledAndCheckedInputEl = (ctx)=>{
    var _getRootEl;
    return (_getRootEl = getRootEl(ctx)) === null || _getRootEl === void 0 ? void 0 : _getRootEl.querySelector("input:not(:disabled):checked");
};
var getInputEls = (ctx)=>{
    const ownerId = CSS.escape(getRootId(ctx));
    const selector = "input[type=radio][data-ownedby='".concat(ownerId, "']:not([disabled])");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getRootEl(ctx), selector);
};
var getRadioEl = (ctx, value)=>{
    if (!value) return;
    return ctx.getById(getItemId(ctx, value));
};
var getOffsetRect = (el)=>{
    var _el_offsetLeft, _el_offsetTop, _el_offsetWidth, _el_offsetHeight;
    return {
        left: (_el_offsetLeft = el === null || el === void 0 ? void 0 : el.offsetLeft) !== null && _el_offsetLeft !== void 0 ? _el_offsetLeft : 0,
        top: (_el_offsetTop = el === null || el === void 0 ? void 0 : el.offsetTop) !== null && _el_offsetTop !== void 0 ? _el_offsetTop : 0,
        width: (_el_offsetWidth = el === null || el === void 0 ? void 0 : el.offsetWidth) !== null && _el_offsetWidth !== void 0 ? _el_offsetWidth : 0,
        height: (_el_offsetHeight = el === null || el === void 0 ? void 0 : el.offsetHeight) !== null && _el_offsetHeight !== void 0 ? _el_offsetHeight : 0
    };
};
var resolveRect = (rect)=>({
        width: "".concat(rect.width, "px"),
        height: "".concat(rect.height, "px"),
        left: "".concat(rect.left, "px"),
        top: "".concat(rect.top, "px")
    });
// src/radio-group.connect.ts
function connect(service, normalize) {
    const { context, send, computed, prop, scope, refs } = service;
    const groupDisabled = computed("isDisabled");
    const readOnly = prop("readOnly");
    function getItemState(props2) {
        return {
            value: props2.value,
            invalid: !!props2.invalid,
            disabled: !!props2.disabled || groupDisabled,
            checked: context.get("value") === props2.value,
            focused: context.get("focusedValue") === props2.value,
            focusVisible: refs.get("focusVisibleValue") === props2.value,
            hovered: context.get("hoveredValue") === props2.value,
            active: context.get("activeValue") === props2.value
        };
    }
    function getItemDataAttrs(props2) {
        const itemState = getItemState(props2);
        return {
            "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.focused),
            "data-focus-visible": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.focusVisible),
            "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
            "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
            "data-state": itemState.checked ? "checked" : "unchecked",
            "data-hover": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.hovered),
            "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.invalid),
            "data-orientation": prop("orientation"),
            "data-ssr": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("ssr"))
        };
    }
    const focus = ()=>{
        var _getFirstEnabledAndCheckedInputEl;
        const nodeToFocus = (_getFirstEnabledAndCheckedInputEl = getFirstEnabledAndCheckedInputEl(scope)) !== null && _getFirstEnabledAndCheckedInputEl !== void 0 ? _getFirstEnabledAndCheckedInputEl : getFirstEnabledInputEl(scope);
        nodeToFocus === null || nodeToFocus === void 0 ? void 0 : nodeToFocus.focus();
    };
    return {
        focus,
        value: context.get("value"),
        setValue (value) {
            send({
                type: "SET_VALUE",
                value,
                isTrusted: false
            });
        },
        clearValue () {
            send({
                type: "SET_VALUE",
                value: null,
                isTrusted: false
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                role: "radiogroup",
                id: getRootId(scope),
                "aria-labelledby": getLabelId(scope),
                "data-orientation": prop("orientation"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(groupDisabled),
                "aria-orientation": prop("orientation"),
                dir: prop("dir"),
                style: {
                    position: "relative"
                }
            });
        },
        getLabelProps () {
            return normalize.element({
                ...parts.label.attrs,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(groupDisabled),
                id: getLabelId(scope),
                onClick: focus
            });
        },
        getItemState,
        getItemProps (props2) {
            const itemState = getItemState(props2);
            return normalize.label({
                ...parts.item.attrs,
                dir: prop("dir"),
                id: getItemId(scope, props2.value),
                htmlFor: getItemHiddenInputId(scope, props2.value),
                ...getItemDataAttrs(props2),
                onPointerMove () {
                    if (itemState.disabled) return;
                    if (itemState.hovered) return;
                    send({
                        type: "SET_HOVERED",
                        value: props2.value,
                        hovered: true
                    });
                },
                onPointerLeave () {
                    if (itemState.disabled) return;
                    send({
                        type: "SET_HOVERED",
                        value: null
                    });
                },
                onPointerDown (event) {
                    if (itemState.disabled) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    if (itemState.focused && event.pointerType === "mouse") {
                        event.preventDefault();
                    }
                    send({
                        type: "SET_ACTIVE",
                        value: props2.value,
                        active: true
                    });
                },
                onPointerUp () {
                    if (itemState.disabled) return;
                    send({
                        type: "SET_ACTIVE",
                        value: null
                    });
                },
                onClick () {
                    if (!itemState.disabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) {
                        var _getItemHiddenInputEl;
                        (_getItemHiddenInputEl = getItemHiddenInputEl(scope, props2.value)) === null || _getItemHiddenInputEl === void 0 ? void 0 : _getItemHiddenInputEl.focus();
                    }
                }
            });
        },
        getItemTextProps (props2) {
            return normalize.element({
                ...parts.itemText.attrs,
                dir: prop("dir"),
                id: getItemLabelId(scope, props2.value),
                ...getItemDataAttrs(props2)
            });
        },
        getItemControlProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.itemControl.attrs,
                dir: prop("dir"),
                id: getItemControlId(scope, props2.value),
                "data-active": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.active),
                "aria-hidden": true,
                ...getItemDataAttrs(props2)
            });
        },
        getItemHiddenInputProps (props2) {
            const itemState = getItemState(props2);
            return normalize.input({
                "data-ownedby": getRootId(scope),
                id: getItemHiddenInputId(scope, props2.value),
                type: "radio",
                name: prop("name") || prop("id"),
                form: prop("form"),
                value: props2.value,
                onClick (event) {
                    if (readOnly) {
                        event.preventDefault();
                        return;
                    }
                    if (event.currentTarget.checked) {
                        send({
                            type: "SET_VALUE",
                            value: props2.value,
                            isTrusted: true
                        });
                    }
                },
                onBlur () {
                    send({
                        type: "SET_FOCUSED",
                        value: null,
                        focused: false
                    });
                },
                onFocus () {
                    const focusVisible = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusVisible"])();
                    send({
                        type: "SET_FOCUSED",
                        value: props2.value,
                        focused: true,
                        focusVisible
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (event.key === " ") {
                        send({
                            type: "SET_ACTIVE",
                            value: props2.value,
                            active: true
                        });
                    }
                },
                onKeyUp (event) {
                    if (event.defaultPrevented) return;
                    if (event.key === " ") {
                        send({
                            type: "SET_ACTIVE",
                            value: null
                        });
                    }
                },
                disabled: itemState.disabled,
                defaultChecked: itemState.checked,
                style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visuallyHiddenStyle"]
            });
        },
        getIndicatorProps () {
            const rect = context.get("indicatorRect");
            return normalize.element({
                id: getIndicatorId(scope),
                ...parts.indicator.attrs,
                dir: prop("dir"),
                hidden: context.get("value") == null,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(groupDisabled),
                "data-orientation": prop("orientation"),
                style: {
                    "--transition-property": "left, top, width, height",
                    "--left": rect === null || rect === void 0 ? void 0 : rect.left,
                    "--top": rect === null || rect === void 0 ? void 0 : rect.top,
                    "--width": rect === null || rect === void 0 ? void 0 : rect.width,
                    "--height": rect === null || rect === void 0 ? void 0 : rect.height,
                    position: "absolute",
                    willChange: "var(--transition-property)",
                    transitionProperty: "var(--transition-property)",
                    transitionDuration: context.get("canIndicatorTransition") ? "var(--transition-duration, 150ms)" : "0ms",
                    transitionTimingFunction: "var(--transition-timing-function)",
                    [prop("orientation") === "horizontal" ? "left" : "top"]: prop("orientation") === "horizontal" ? "var(--left)" : "var(--top)"
                }
            });
        }
    };
}
var { not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            orientation: "vertical",
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                })),
            activeValue: bindable(()=>({
                    defaultValue: null
                })),
            focusedValue: bindable(()=>({
                    defaultValue: null
                })),
            hoveredValue: bindable(()=>({
                    defaultValue: null
                })),
            indicatorRect: bindable(()=>({
                    defaultValue: {}
                })),
            canIndicatorTransition: bindable(()=>({
                    defaultValue: false
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                })),
            ssr: bindable(()=>({
                    defaultValue: true
                }))
        };
    },
    refs () {
        return {
            indicatorCleanup: null,
            focusVisibleValue: null
        };
    },
    computed: {
        isDisabled: (param)=>{
            let { prop, context } = param;
            return !!prop("disabled") || context.get("fieldsetDisabled");
        }
    },
    entry: [
        "syncIndicatorRect",
        "syncSsr"
    ],
    exit: [
        "cleanupObserver"
    ],
    effects: [
        "trackFormControlState",
        "trackFocusVisible"
    ],
    watch (param) {
        let { track, action, context } = param;
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "setIndicatorTransition",
                "syncIndicatorRect",
                "syncInputElements"
            ]);
        });
    },
    on: {
        SET_VALUE: [
            {
                guard: not("isTrusted"),
                actions: [
                    "setValue",
                    "dispatchChangeEvent"
                ]
            },
            {
                actions: [
                    "setValue"
                ]
            }
        ],
        SET_HOVERED: {
            actions: [
                "setHovered"
            ]
        },
        SET_ACTIVE: {
            actions: [
                "setActive"
            ]
        },
        SET_FOCUSED: {
            actions: [
                "setFocused"
            ]
        }
    },
    states: {
        idle: {}
    },
    implementations: {
        guards: {
            isTrusted: (param)=>{
                let { event } = param;
                return !!event.isTrusted;
            }
        },
        effects: {
            trackFormControlState (param) {
                let { context, scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(getRootEl(scope), {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        context.set("value", context.initial("value"));
                    }
                });
            },
            trackFocusVisible (param) {
                let { scope } = param;
                var _scope_getRootNode;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFocusVisible"])({
                    root: (_scope_getRootNode = scope.getRootNode) === null || _scope_getRootNode === void 0 ? void 0 : _scope_getRootNode.call(scope)
                });
            }
        },
        actions: {
            setValue (param) {
                let { context, event } = param;
                context.set("value", event.value);
            },
            setHovered (param) {
                let { context, event } = param;
                context.set("hoveredValue", event.value);
            },
            setActive (param) {
                let { context, event } = param;
                context.set("activeValue", event.value);
            },
            setFocused (param) {
                let { context, event, refs } = param;
                context.set("focusedValue", event.value);
                refs.set("focusVisibleValue", event.focusVisible ? event.value : null);
            },
            syncInputElements (param) {
                let { context, scope } = param;
                const inputs = getInputEls(scope);
                inputs.forEach((input)=>{
                    input.checked = input.value === context.get("value");
                });
            },
            setIndicatorTransition (param) {
                let { context } = param;
                context.set("canIndicatorTransition", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(context.get("value")));
            },
            cleanupObserver (param) {
                let { refs } = param;
                var _refs_get;
                (_refs_get = refs.get("indicatorCleanup")) === null || _refs_get === void 0 ? void 0 : _refs_get();
            },
            syncSsr (param) {
                let { context } = param;
                context.set("ssr", false);
            },
            syncIndicatorRect (param) {
                let { context, scope, refs } = param;
                var _refs_get;
                (_refs_get = refs.get("indicatorCleanup")) === null || _refs_get === void 0 ? void 0 : _refs_get();
                if (!getIndicatorEl(scope)) return;
                const value = context.get("value");
                const radioEl = getRadioEl(scope, value);
                if (value == null || !radioEl) {
                    context.set("canIndicatorTransition", false);
                    context.set("indicatorRect", {});
                    return;
                }
                const indicatorCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackElementRect"])([
                    radioEl
                ], {
                    measure (el) {
                        return getOffsetRect(el);
                    },
                    onEntry (param) {
                        let { rects } = param;
                        context.set("indicatorRect", resolveRect(rects[0]));
                    }
                });
                refs.set("indicatorCleanup", indicatorCleanup);
            },
            dispatchChangeEvent (param) {
                let { context, scope } = param;
                const inputEls = getInputEls(scope);
                inputEls.forEach((inputEl)=>{
                    const checked = inputEl.value === context.get("value");
                    if (checked === inputEl.checked) return;
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dispatchInputCheckedEvent"])(inputEl, {
                        checked
                    });
                });
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "name",
    "onValueChange",
    "orientation",
    "readOnly",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value",
    "disabled",
    "invalid"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
;
}),
"[project]/node_modules/@zag-js/radio-group/dist/index.mjs [app-client] (ecmascript) <export anatomy as radioGroupAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "radioGroupAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$radio$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$radio$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/radio-group/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/rating-group/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/rating-group.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("rating-group").parts("root", "label", "item", "control");
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "rating:".concat(ctx.id);
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "rating:".concat(ctx.id, ":label");
};
var getHiddenInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_hiddenInput;
    return (_ctx_ids_hiddenInput = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.hiddenInput) !== null && _ctx_ids_hiddenInput !== void 0 ? _ctx_ids_hiddenInput : "rating:".concat(ctx.id, ":input");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "rating:".concat(ctx.id, ":control");
};
var getItemId = (ctx, id)=>{
    var _ctx_ids_item, _ctx_ids;
    var _ctx_ids_item1;
    return (_ctx_ids_item1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_item = _ctx_ids.item) === null || _ctx_ids_item === void 0 ? void 0 : _ctx_ids_item.call(_ctx_ids, id)) !== null && _ctx_ids_item1 !== void 0 ? _ctx_ids_item1 : "rating:".concat(ctx.id, ":item:").concat(id);
};
var getControlEl = (ctx)=>ctx.getById(getControlId(ctx));
var getRadioEl = (ctx, value)=>{
    const selector = "[role=radio][aria-posinset='".concat(Math.ceil(value), "']");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["query"])(getControlEl(ctx), selector);
};
var getHiddenInputEl = (ctx)=>ctx.getById(getHiddenInputId(ctx));
var dispatchChangeEvent = (ctx, value)=>{
    const inputEl = getHiddenInputEl(ctx);
    if (!inputEl) return;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dispatchInputValueEvent"])(inputEl, {
        value
    });
};
// src/rating-group.connect.ts
function connect(service, normalize) {
    const { context, send, prop, scope, computed } = service;
    const interactive = computed("isInteractive");
    const disabled = computed("isDisabled");
    const readOnly = prop("readOnly");
    const value = context.get("value");
    const hoveredValue = context.get("hoveredValue");
    const translations = prop("translations");
    function getItemState(props2) {
        const currentValue = computed("isHovering") ? hoveredValue : value;
        const equal = Math.ceil(currentValue) === props2.index;
        const highlighted = props2.index <= currentValue || equal;
        const half = equal && Math.abs(currentValue - props2.index) === 0.5;
        return {
            highlighted,
            half,
            checked: equal || value === -1 && props2.index === 1
        };
    }
    return {
        hovering: computed("isHovering"),
        value,
        hoveredValue,
        count: prop("count"),
        items: Array.from({
            length: prop("count")
        }).map((_, index)=>index + 1),
        setValue (value2) {
            send({
                type: "SET_VALUE",
                value: value2
            });
        },
        clearValue () {
            send({
                type: "CLEAR_VALUE"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope)
            });
        },
        getHiddenInputProps () {
            return normalize.input({
                name: prop("name"),
                form: prop("form"),
                type: "text",
                hidden: true,
                disabled,
                readOnly,
                required: prop("required"),
                id: getHiddenInputId(scope),
                defaultValue: value
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                dir: prop("dir"),
                id: getLabelId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                htmlFor: getHiddenInputId(scope),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    event.preventDefault();
                    const radioEl = getRadioEl(scope, Math.max(1, context.get("value")));
                    radioEl === null || radioEl === void 0 ? void 0 : radioEl.focus({
                        preventScroll: true
                    });
                }
            });
        },
        getControlProps () {
            return normalize.element({
                id: getControlId(scope),
                ...parts.control.attrs,
                dir: prop("dir"),
                role: "radiogroup",
                "aria-orientation": "horizontal",
                "aria-labelledby": getLabelId(scope),
                "aria-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(readOnly),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                onPointerMove (event) {
                    if (!interactive) return;
                    if (event.pointerType === "touch") return;
                    send({
                        type: "GROUP_POINTER_OVER"
                    });
                },
                onPointerLeave (event) {
                    if (!interactive) return;
                    if (event.pointerType === "touch") return;
                    send({
                        type: "GROUP_POINTER_LEAVE"
                    });
                }
            });
        },
        getItemState,
        getItemProps (props2) {
            const { index } = props2;
            const itemState = getItemState(props2);
            const valueText = translations.ratingValueText(index);
            return normalize.element({
                ...parts.item.attrs,
                dir: prop("dir"),
                id: getItemId(scope, index.toString()),
                role: "radio",
                tabIndex: (()=>{
                    if (readOnly) return itemState.checked ? 0 : void 0;
                    if (disabled) return void 0;
                    return itemState.checked ? 0 : -1;
                })(),
                "aria-roledescription": "rating",
                "aria-label": valueText,
                "aria-disabled": disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
                "aria-setsize": prop("count"),
                "aria-checked": itemState.checked,
                "data-checked": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.checked),
                "aria-posinset": index,
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted),
                "data-half": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.half),
                onPointerDown (event) {
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    event.preventDefault();
                },
                onPointerMove (event) {
                    if (!interactive) return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    const relativePoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRelativePoint"])(point, event.currentTarget);
                    const percentX = relativePoint.getPercentValue({
                        orientation: "horizontal",
                        dir: prop("dir")
                    });
                    const isMidway = percentX < 0.5;
                    send({
                        type: "POINTER_OVER",
                        index,
                        isMidway
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    const keyMap = {
                        ArrowLeft () {
                            send({
                                type: "ARROW_LEFT"
                            });
                        },
                        ArrowRight () {
                            send({
                                type: "ARROW_RIGHT"
                            });
                        },
                        ArrowUp () {
                            send({
                                type: "ARROW_LEFT"
                            });
                        },
                        ArrowDown () {
                            send({
                                type: "ARROW_RIGHT"
                            });
                        },
                        Space () {
                            send({
                                type: "SPACE",
                                value: index
                            });
                        },
                        Home () {
                            send({
                                type: "HOME"
                            });
                        },
                        End () {
                            send({
                                type: "END"
                            });
                        }
                    };
                    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        event.preventDefault();
                        exec(event);
                    }
                },
                onClick () {
                    if (!interactive) return;
                    send({
                        type: "CLICK",
                        value: index
                    });
                },
                onFocus () {
                    if (!interactive) return;
                    send({
                        type: "FOCUS"
                    });
                },
                onBlur () {
                    if (!interactive) return;
                    send({
                        type: "BLUR"
                    });
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            name: "rating",
            count: 5,
            dir: "ltr",
            defaultValue: -1,
            ...props2,
            translations: {
                ratingValueText: (index)=>"".concat(index, " stars"),
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                })),
            hoveredValue: bindable(()=>({
                    defaultValue: -1,
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onHoverChange")) === null || _prop === void 0 ? void 0 : _prop({
                            hoveredValue: value
                        });
                    }
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    watch (param) {
        let { track, action, prop, context } = param;
        track([
            ()=>prop("allowHalf")
        ], ()=>{
            action([
                "roundValueIfNeeded"
            ]);
        });
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "dispatchChangeEvent"
            ]);
        });
    },
    computed: {
        isDisabled: (param)=>{
            let { context, prop } = param;
            return !!prop("disabled") || context.get("fieldsetDisabled");
        },
        isInteractive: (param)=>{
            let { computed, prop } = param;
            return !(computed("isDisabled") || prop("readOnly"));
        },
        isHovering: (param)=>{
            let { context } = param;
            return context.get("hoveredValue") > -1;
        }
    },
    effects: [
        "trackFormControlState"
    ],
    on: {
        SET_VALUE: {
            actions: [
                "setValue"
            ]
        },
        CLEAR_VALUE: {
            actions: [
                "clearValue"
            ]
        }
    },
    states: {
        idle: {
            entry: [
                "clearHoveredValue"
            ],
            on: {
                GROUP_POINTER_OVER: {
                    target: "hover"
                },
                FOCUS: {
                    target: "focus"
                },
                CLICK: {
                    actions: [
                        "setValue",
                        "focusActiveRadio"
                    ]
                }
            }
        },
        focus: {
            on: {
                POINTER_OVER: {
                    actions: [
                        "setHoveredValue"
                    ]
                },
                GROUP_POINTER_LEAVE: {
                    actions: [
                        "clearHoveredValue"
                    ]
                },
                BLUR: {
                    target: "idle"
                },
                SPACE: {
                    guard: "isValueEmpty",
                    actions: [
                        "setValue"
                    ]
                },
                CLICK: {
                    actions: [
                        "setValue",
                        "focusActiveRadio"
                    ]
                },
                ARROW_LEFT: {
                    actions: [
                        "setPrevValue",
                        "focusActiveRadio"
                    ]
                },
                ARROW_RIGHT: {
                    actions: [
                        "setNextValue",
                        "focusActiveRadio"
                    ]
                },
                HOME: {
                    actions: [
                        "setValueToMin",
                        "focusActiveRadio"
                    ]
                },
                END: {
                    actions: [
                        "setValueToMax",
                        "focusActiveRadio"
                    ]
                }
            }
        },
        hover: {
            on: {
                POINTER_OVER: {
                    actions: [
                        "setHoveredValue"
                    ]
                },
                GROUP_POINTER_LEAVE: [
                    {
                        guard: "isRadioFocused",
                        target: "focus",
                        actions: [
                            "clearHoveredValue"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "clearHoveredValue"
                        ]
                    }
                ],
                CLICK: {
                    actions: [
                        "setValue",
                        "focusActiveRadio"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            isInteractive: (param)=>{
                let { prop } = param;
                return !(prop("disabled") || prop("readOnly"));
            },
            isHoveredValueEmpty: (param)=>{
                let { context } = param;
                return context.get("hoveredValue") === -1;
            },
            isValueEmpty: (param)=>{
                let { context } = param;
                return context.get("value") <= 0;
            },
            isRadioFocused: (param)=>{
                let { scope } = param;
                var _getControlEl;
                return !!((_getControlEl = getControlEl(scope)) === null || _getControlEl === void 0 ? void 0 : _getControlEl.contains(scope.getActiveElement()));
            }
        },
        effects: {
            trackFormControlState (param) {
                let { context, scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(getHiddenInputEl(scope), {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        context.set("value", context.initial("value"));
                    }
                });
            }
        },
        actions: {
            clearHoveredValue (param) {
                let { context } = param;
                context.set("hoveredValue", -1);
            },
            focusActiveRadio (param) {
                let { scope, context } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _getRadioEl;
                    return (_getRadioEl = getRadioEl(scope, context.get("value"))) === null || _getRadioEl === void 0 ? void 0 : _getRadioEl.focus();
                });
            },
            setPrevValue (param) {
                let { context, prop } = param;
                const factor = prop("allowHalf") ? 0.5 : 1;
                context.set("value", Math.max(0, context.get("value") - factor));
            },
            setNextValue (param) {
                let { context, prop } = param;
                const factor = prop("allowHalf") ? 0.5 : 1;
                const value = context.get("value") === -1 ? 0 : context.get("value");
                context.set("value", Math.min(prop("count"), value + factor));
            },
            setValueToMin (param) {
                let { context } = param;
                context.set("value", 1);
            },
            setValueToMax (param) {
                let { context, prop } = param;
                context.set("value", prop("count"));
            },
            setValue (param) {
                let { context, event } = param;
                const hoveredValue = context.get("hoveredValue");
                const value = hoveredValue === -1 ? event.value : hoveredValue;
                context.set("value", value);
            },
            clearValue (param) {
                let { context } = param;
                context.set("value", -1);
            },
            setHoveredValue (param) {
                let { context, prop, event } = param;
                const half = prop("allowHalf") && event.isMidway;
                const factor = half ? 0.5 : 0;
                context.set("hoveredValue", event.index - factor);
            },
            roundValueIfNeeded (param) {
                let { context, prop } = param;
                if (prop("allowHalf")) return;
                context.set("value", Math.round(context.get("value")));
            },
            dispatchChangeEvent (param) {
                let { context, scope } = param;
                dispatchChangeEvent(scope, context.get("value"));
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "allowHalf",
    "autoFocus",
    "count",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "name",
    "onHoverChange",
    "onValueChange",
    "required",
    "readOnly",
    "translations",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "index"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
;
}),
"[project]/node_modules/@zag-js/rating-group/dist/index.mjs [app-client] (ecmascript) <export anatomy as ratingGroupAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "ratingGroupAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$rating$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$rating$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/rating-group/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/select/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "collection",
    ()=>collection,
    "connect",
    ()=>connect,
    "itemGroupLabelProps",
    ()=>itemGroupLabelProps,
    "itemGroupProps",
    ()=>itemGroupProps,
    "itemProps",
    ()=>itemProps,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitItemGroupLabelProps",
    ()=>splitItemGroupLabelProps,
    "splitItemGroupProps",
    ()=>splitItemGroupProps,
    "splitItemProps",
    ()=>splitItemProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/collection/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
// src/select.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("select").parts("label", "positioner", "trigger", "indicator", "clearTrigger", "item", "itemText", "itemIndicator", "itemGroup", "itemGroupLabel", "list", "content", "root", "control", "valueText");
var parts = anatomy.build();
var collection = (options)=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListCollection"](options);
};
collection.empty = ()=>{
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ListCollection"]({
        items: []
    });
};
// src/select.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "select:".concat(ctx.id);
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "select:".concat(ctx.id, ":content");
};
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "select:".concat(ctx.id, ":trigger");
};
var getClearTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_clearTrigger;
    return (_ctx_ids_clearTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.clearTrigger) !== null && _ctx_ids_clearTrigger !== void 0 ? _ctx_ids_clearTrigger : "select:".concat(ctx.id, ":clear-trigger");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "select:".concat(ctx.id, ":label");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "select:".concat(ctx.id, ":control");
};
var getItemId = (ctx, id)=>{
    var _ctx_ids_item, _ctx_ids;
    var _ctx_ids_item1;
    return (_ctx_ids_item1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_item = _ctx_ids.item) === null || _ctx_ids_item === void 0 ? void 0 : _ctx_ids_item.call(_ctx_ids, id)) !== null && _ctx_ids_item1 !== void 0 ? _ctx_ids_item1 : "select:".concat(ctx.id, ":option:").concat(id);
};
var getHiddenSelectId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_hiddenSelect;
    return (_ctx_ids_hiddenSelect = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.hiddenSelect) !== null && _ctx_ids_hiddenSelect !== void 0 ? _ctx_ids_hiddenSelect : "select:".concat(ctx.id, ":select");
};
var getPositionerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_positioner;
    return (_ctx_ids_positioner = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.positioner) !== null && _ctx_ids_positioner !== void 0 ? _ctx_ids_positioner : "select:".concat(ctx.id, ":positioner");
};
var getItemGroupId = (ctx, id)=>{
    var _ctx_ids_itemGroup, _ctx_ids;
    var _ctx_ids_itemGroup1;
    return (_ctx_ids_itemGroup1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemGroup = _ctx_ids.itemGroup) === null || _ctx_ids_itemGroup === void 0 ? void 0 : _ctx_ids_itemGroup.call(_ctx_ids, id)) !== null && _ctx_ids_itemGroup1 !== void 0 ? _ctx_ids_itemGroup1 : "select:".concat(ctx.id, ":optgroup:").concat(id);
};
var getItemGroupLabelId = (ctx, id)=>{
    var _ctx_ids_itemGroupLabel, _ctx_ids;
    var _ctx_ids_itemGroupLabel1;
    return (_ctx_ids_itemGroupLabel1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_itemGroupLabel = _ctx_ids.itemGroupLabel) === null || _ctx_ids_itemGroupLabel === void 0 ? void 0 : _ctx_ids_itemGroupLabel.call(_ctx_ids, id)) !== null && _ctx_ids_itemGroupLabel1 !== void 0 ? _ctx_ids_itemGroupLabel1 : "select:".concat(ctx.id, ":optgroup-label:").concat(id);
};
var getHiddenSelectEl = (ctx)=>ctx.getById(getHiddenSelectId(ctx));
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
var getTriggerEl = (ctx)=>ctx.getById(getTriggerId(ctx));
var getClearTriggerEl = (ctx)=>ctx.getById(getClearTriggerId(ctx));
var getPositionerEl = (ctx)=>ctx.getById(getPositionerId(ctx));
var getItemEl = (ctx, id)=>{
    if (id == null) return null;
    return ctx.getById(getItemId(ctx, id));
};
// src/select.connect.ts
function connect(service, normalize) {
    const { context, prop, scope, state, computed, send } = service;
    const disabled = prop("disabled") || context.get("fieldsetDisabled");
    const invalid = prop("invalid");
    const readOnly = prop("readOnly");
    const composite = prop("composite");
    const collection2 = prop("collection");
    const open = state.hasTag("open");
    const focused = state.matches("focused");
    const highlightedValue = context.get("highlightedValue");
    const highlightedItem = context.get("highlightedItem");
    const selectedItems = context.get("selectedItems");
    const currentPlacement = context.get("currentPlacement");
    const isTypingAhead = computed("isTypingAhead");
    const interactive = computed("isInteractive");
    const ariaActiveDescendant = highlightedValue ? getItemId(scope, highlightedValue) : void 0;
    function getItemState(props2) {
        const _disabled = collection2.getItemDisabled(props2.item);
        const value = collection2.getItemValue(props2.item);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ensure"])(value, ()=>"[zag-js] No value found for item ".concat(JSON.stringify(props2.item)));
        return {
            value,
            disabled: Boolean(disabled || _disabled),
            highlighted: highlightedValue === value,
            selected: context.get("value").includes(value)
        };
    }
    const popperStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementStyles"])({
        ...prop("positioning"),
        placement: currentPlacement
    });
    return {
        open,
        focused,
        empty: context.get("value").length === 0,
        highlightedItem,
        highlightedValue,
        selectedItems,
        hasSelectedItems: computed("hasSelectedItems"),
        value: context.get("value"),
        valueAsString: computed("valueAsString"),
        collection: collection2,
        multiple: !!prop("multiple"),
        disabled: !!disabled,
        reposition () {
            let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            send({
                type: "POSITIONING.SET",
                options
            });
        },
        focus () {
            var _getTriggerEl;
            (_getTriggerEl = getTriggerEl(scope)) === null || _getTriggerEl === void 0 ? void 0 : _getTriggerEl.focus({
                preventScroll: true
            });
        },
        setOpen (nextOpen) {
            const open2 = state.hasTag("open");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "OPEN" : "CLOSE"
            });
        },
        selectValue (value) {
            send({
                type: "ITEM.SELECT",
                value
            });
        },
        setValue (value) {
            send({
                type: "VALUE.SET",
                value
            });
        },
        selectAll () {
            send({
                type: "VALUE.SET",
                value: collection2.getValues()
            });
        },
        setHighlightValue (value) {
            send({
                type: "HIGHLIGHTED_VALUE.SET",
                value
            });
        },
        clearHighlightValue () {
            send({
                type: "HIGHLIGHTED_VALUE.CLEAR"
            });
        },
        clearValue (value) {
            if (value) {
                send({
                    type: "ITEM.CLEAR",
                    value
                });
            } else {
                send({
                    type: "VALUE.CLEAR"
                });
            }
        },
        getItemState,
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly)
            });
        },
        getLabelProps () {
            return normalize.label({
                dir: prop("dir"),
                id: getLabelId(scope),
                ...parts.label.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
                htmlFor: getHiddenSelectId(scope),
                onClick (event) {
                    var _getTriggerEl;
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    (_getTriggerEl = getTriggerEl(scope)) === null || _getTriggerEl === void 0 ? void 0 : _getTriggerEl.focus({
                        preventScroll: true
                    });
                }
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                dir: prop("dir"),
                id: getControlId(scope),
                "data-state": open ? "open" : "closed",
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid)
            });
        },
        getValueTextProps () {
            return normalize.element({
                ...parts.valueText.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused)
            });
        },
        getTriggerProps () {
            return normalize.button({
                id: getTriggerId(scope),
                disabled,
                dir: prop("dir"),
                type: "button",
                role: "combobox",
                "aria-controls": getContentId(scope),
                "aria-expanded": open,
                "aria-haspopup": "listbox",
                "data-state": open ? "open" : "closed",
                "aria-invalid": invalid,
                "aria-labelledby": getLabelId(scope),
                ...parts.trigger.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
                "data-placement": currentPlacement,
                "data-placeholder-shown": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(!computed("hasSelectedItems")),
                onClick (event) {
                    if (!interactive) return;
                    if (event.defaultPrevented) return;
                    send({
                        type: "TRIGGER.CLICK"
                    });
                },
                onFocus () {
                    send({
                        type: "TRIGGER.FOCUS"
                    });
                },
                onBlur () {
                    send({
                        type: "TRIGGER.BLUR"
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    const keyMap = {
                        ArrowUp () {
                            send({
                                type: "TRIGGER.ARROW_UP"
                            });
                        },
                        ArrowDown (event2) {
                            send({
                                type: event2.altKey ? "OPEN" : "TRIGGER.ARROW_DOWN"
                            });
                        },
                        ArrowLeft () {
                            send({
                                type: "TRIGGER.ARROW_LEFT"
                            });
                        },
                        ArrowRight () {
                            send({
                                type: "TRIGGER.ARROW_RIGHT"
                            });
                        },
                        Home () {
                            send({
                                type: "TRIGGER.HOME"
                            });
                        },
                        End () {
                            send({
                                type: "TRIGGER.END"
                            });
                        },
                        Enter () {
                            send({
                                type: "TRIGGER.ENTER"
                            });
                        },
                        Space (event2) {
                            if (isTypingAhead) {
                                send({
                                    type: "TRIGGER.TYPEAHEAD",
                                    key: event2.key
                                });
                            } else {
                                send({
                                    type: "TRIGGER.ENTER"
                                });
                            }
                        }
                    };
                    const exec = keyMap[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir"),
                        orientation: "vertical"
                    })];
                    if (exec) {
                        exec(event);
                        event.preventDefault();
                        return;
                    }
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getByTypeahead"].isValidEvent(event)) {
                        send({
                            type: "TRIGGER.TYPEAHEAD",
                            key: event.key
                        });
                        event.preventDefault();
                    }
                }
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "aria-hidden": true,
                "data-state": open ? "open" : "closed",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly)
            });
        },
        getItemProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                id: getItemId(scope, itemState.value),
                role: "option",
                ...parts.item.attrs,
                dir: prop("dir"),
                "data-value": itemState.value,
                "aria-selected": itemState.selected,
                "data-state": itemState.selected ? "checked" : "unchecked",
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "aria-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(itemState.disabled),
                onPointerMove (event) {
                    if (itemState.disabled || event.pointerType !== "mouse") return;
                    if (itemState.value === highlightedValue) return;
                    send({
                        type: "ITEM.POINTER_MOVE",
                        value: itemState.value
                    });
                },
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (itemState.disabled) return;
                    send({
                        type: "ITEM.CLICK",
                        src: "pointerup",
                        value: itemState.value
                    });
                },
                onPointerLeave (event) {
                    var _service_event_previous;
                    if (itemState.disabled) return;
                    if (props2.persistFocus) return;
                    if (event.pointerType !== "mouse") return;
                    const pointerMoved = (_service_event_previous = service.event.previous()) === null || _service_event_previous === void 0 ? void 0 : _service_event_previous.type.includes("POINTER");
                    if (!pointerMoved) return;
                    send({
                        type: "ITEM.POINTER_LEAVE"
                    });
                }
            });
        },
        getItemTextProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.itemText.attrs,
                "data-state": itemState.selected ? "checked" : "unchecked",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.disabled),
                "data-highlighted": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.highlighted)
            });
        },
        getItemIndicatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                "aria-hidden": true,
                ...parts.itemIndicator.attrs,
                "data-state": itemState.selected ? "checked" : "unchecked",
                hidden: !itemState.selected
            });
        },
        getItemGroupLabelProps (props2) {
            const { htmlFor } = props2;
            return normalize.element({
                ...parts.itemGroupLabel.attrs,
                id: getItemGroupLabelId(scope, htmlFor),
                dir: prop("dir"),
                role: "presentation"
            });
        },
        getItemGroupProps (props2) {
            const { id } = props2;
            return normalize.element({
                ...parts.itemGroup.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                id: getItemGroupId(scope, id),
                "aria-labelledby": getItemGroupLabelId(scope, id),
                role: "group",
                dir: prop("dir")
            });
        },
        getClearTriggerProps () {
            return normalize.button({
                ...parts.clearTrigger.attrs,
                id: getClearTriggerId(scope),
                type: "button",
                "aria-label": "Clear value",
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                disabled,
                hidden: !computed("hasSelectedItems"),
                dir: prop("dir"),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    send({
                        type: "CLEAR.CLICK"
                    });
                }
            });
        },
        getHiddenSelectProps () {
            const value = context.get("value");
            const defaultValue = prop("multiple") ? value : value === null || value === void 0 ? void 0 : value[0];
            return normalize.select({
                name: prop("name"),
                form: prop("form"),
                disabled,
                multiple: prop("multiple"),
                required: prop("required"),
                "aria-hidden": true,
                id: getHiddenSelectId(scope),
                defaultValue,
                style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visuallyHiddenStyle"],
                tabIndex: -1,
                // Some browser extensions will focus the hidden select.
                // Let's forward the focus to the trigger.
                onFocus () {
                    var _getTriggerEl;
                    (_getTriggerEl = getTriggerEl(scope)) === null || _getTriggerEl === void 0 ? void 0 : _getTriggerEl.focus({
                        preventScroll: true
                    });
                },
                "aria-labelledby": getLabelId(scope)
            });
        },
        getPositionerProps () {
            return normalize.element({
                ...parts.positioner.attrs,
                dir: prop("dir"),
                id: getPositionerId(scope),
                style: popperStyles.floating
            });
        },
        getContentProps () {
            return normalize.element({
                hidden: !open,
                dir: prop("dir"),
                id: getContentId(scope),
                role: composite ? "listbox" : "dialog",
                ...parts.content.attrs,
                "data-state": open ? "open" : "closed",
                "data-placement": currentPlacement,
                "data-activedescendant": ariaActiveDescendant,
                "aria-activedescendant": composite ? ariaActiveDescendant : void 0,
                "aria-multiselectable": prop("multiple") && composite ? true : void 0,
                "aria-labelledby": getLabelId(scope),
                tabIndex: 0,
                onKeyDown (event) {
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    if (event.key === "Tab") {
                        const valid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidTabEvent"])(event);
                        if (!valid) {
                            event.preventDefault();
                            return;
                        }
                    }
                    const keyMap = {
                        ArrowUp () {
                            send({
                                type: "CONTENT.ARROW_UP"
                            });
                        },
                        ArrowDown () {
                            send({
                                type: "CONTENT.ARROW_DOWN"
                            });
                        },
                        Home () {
                            send({
                                type: "CONTENT.HOME"
                            });
                        },
                        End () {
                            send({
                                type: "CONTENT.END"
                            });
                        },
                        Enter () {
                            send({
                                type: "ITEM.CLICK",
                                src: "keydown.enter"
                            });
                        },
                        Space (event2) {
                            if (isTypingAhead) {
                                send({
                                    type: "CONTENT.TYPEAHEAD",
                                    key: event2.key
                                });
                            } else {
                                var _keyMap_Enter;
                                (_keyMap_Enter = keyMap.Enter) === null || _keyMap_Enter === void 0 ? void 0 : _keyMap_Enter.call(keyMap, event2);
                            }
                        }
                    };
                    const exec = keyMap[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event)];
                    if (exec) {
                        exec(event);
                        event.preventDefault();
                        return;
                    }
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEditableElement"])(target)) {
                        return;
                    }
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getByTypeahead"].isValidEvent(event)) {
                        send({
                            type: "CONTENT.TYPEAHEAD",
                            key: event.key
                        });
                        event.preventDefault();
                    }
                }
            });
        },
        getListProps () {
            return normalize.element({
                ...parts.list.attrs,
                tabIndex: 0,
                role: !composite ? "listbox" : void 0,
                "aria-labelledby": getTriggerId(scope),
                "aria-activedescendant": !composite ? ariaActiveDescendant : void 0,
                "aria-multiselectable": !composite && prop("multiple") ? true : void 0
            });
        }
    };
}
var { and, not, or } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        var _props2_collection;
        return {
            loopFocus: false,
            closeOnSelect: !props2.multiple,
            composite: true,
            defaultValue: [],
            ...props2,
            collection: (_props2_collection = props2.collection) !== null && _props2_collection !== void 0 ? _props2_collection : collection.empty(),
            positioning: {
                placement: "bottom-start",
                gutter: 8,
                ...props2.positioning
            }
        };
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    isEqual: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"],
                    onChange (value) {
                        var _prop;
                        const items = prop("collection").findMany(value);
                        return (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value,
                            items
                        });
                    }
                })),
            highlightedValue: bindable(()=>({
                    defaultValue: prop("defaultHighlightedValue") || null,
                    value: prop("highlightedValue"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onHighlightChange")) === null || _prop === void 0 ? void 0 : _prop({
                            highlightedValue: value,
                            highlightedItem: prop("collection").find(value),
                            highlightedIndex: prop("collection").indexOf(value)
                        });
                    }
                })),
            currentPlacement: bindable(()=>({
                    defaultValue: void 0
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                })),
            highlightedItem: bindable(()=>({
                    defaultValue: null
                })),
            selectedItems: bindable(()=>{
                var _prop, _ref;
                const value = (_ref = (_prop = prop("value")) !== null && _prop !== void 0 ? _prop : prop("defaultValue")) !== null && _ref !== void 0 ? _ref : [];
                const items = prop("collection").findMany(value);
                return {
                    defaultValue: items
                };
            })
        };
    },
    refs () {
        return {
            typeahead: {
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getByTypeahead"].defaultOptions
            }
        };
    },
    computed: {
        hasSelectedItems: (param)=>{
            let { context } = param;
            return context.get("value").length > 0;
        },
        isTypingAhead: (param)=>{
            let { refs } = param;
            return refs.get("typeahead").keysSoFar !== "";
        },
        isDisabled: (param)=>{
            let { prop, context } = param;
            return !!prop("disabled") || !!context.get("fieldsetDisabled");
        },
        isInteractive: (param)=>{
            let { prop } = param;
            return !(prop("disabled") || prop("readOnly"));
        },
        valueAsString: (param)=>{
            let { context, prop } = param;
            return prop("collection").stringifyItems(context.get("selectedItems"));
        }
    },
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "open" : "idle";
    },
    entry: [
        "syncSelectElement"
    ],
    watch (param) {
        let { context, prop, track, action } = param;
        track([
            ()=>context.get("value").toString()
        ], ()=>{
            action([
                "syncSelectedItems",
                "syncSelectElement",
                "dispatchChangeEvent"
            ]);
        });
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
        track([
            ()=>context.get("highlightedValue")
        ], ()=>{
            action([
                "syncHighlightedItem"
            ]);
        });
        track([
            ()=>prop("collection").toString()
        ], ()=>{
            action([
                "syncCollection"
            ]);
        });
    },
    on: {
        "HIGHLIGHTED_VALUE.SET": {
            actions: [
                "setHighlightedItem"
            ]
        },
        "HIGHLIGHTED_VALUE.CLEAR": {
            actions: [
                "clearHighlightedItem"
            ]
        },
        "ITEM.SELECT": {
            actions: [
                "selectItem"
            ]
        },
        "ITEM.CLEAR": {
            actions: [
                "clearItem"
            ]
        },
        "VALUE.SET": {
            actions: [
                "setSelectedItems"
            ]
        },
        "VALUE.CLEAR": {
            actions: [
                "clearSelectedItems"
            ]
        },
        "CLEAR.CLICK": {
            actions: [
                "clearSelectedItems",
                "focusTriggerEl"
            ]
        }
    },
    effects: [
        "trackFormControlState"
    ],
    states: {
        idle: {
            tags: [
                "closed"
            ],
            on: {
                "CONTROLLED.OPEN": [
                    {
                        guard: "isTriggerClickEvent",
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "highlightFirstSelectedItem"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus"
                        ]
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen",
                            "setInitialFocus",
                            "highlightFirstSelectedItem"
                        ]
                    }
                ],
                "TRIGGER.FOCUS": {
                    target: "focused"
                },
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "invokeOnOpen"
                        ]
                    }
                ]
            }
        },
        focused: {
            tags: [
                "closed"
            ],
            on: {
                "CONTROLLED.OPEN": [
                    {
                        guard: "isTriggerClickEvent",
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "highlightFirstSelectedItem"
                        ]
                    },
                    {
                        guard: "isTriggerArrowUpEvent",
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "highlightComputedLastItem"
                        ]
                    },
                    {
                        guard: or("isTriggerArrowDownEvent", "isTriggerEnterEvent"),
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "highlightComputedFirstItem"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus"
                        ]
                    }
                ],
                OPEN: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "TRIGGER.BLUR": {
                    target: "idle"
                },
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "invokeOnOpen",
                            "highlightFirstSelectedItem"
                        ]
                    }
                ],
                "TRIGGER.ENTER": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "invokeOnOpen",
                            "highlightComputedFirstItem"
                        ]
                    }
                ],
                "TRIGGER.ARROW_UP": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "invokeOnOpen",
                            "highlightComputedLastItem"
                        ]
                    }
                ],
                "TRIGGER.ARROW_DOWN": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitialFocus",
                            "invokeOnOpen",
                            "highlightComputedFirstItem"
                        ]
                    }
                ],
                "TRIGGER.ARROW_LEFT": [
                    {
                        guard: and(not("multiple"), "hasSelectedItems"),
                        actions: [
                            "selectPreviousItem"
                        ]
                    },
                    {
                        guard: not("multiple"),
                        actions: [
                            "selectLastItem"
                        ]
                    }
                ],
                "TRIGGER.ARROW_RIGHT": [
                    {
                        guard: and(not("multiple"), "hasSelectedItems"),
                        actions: [
                            "selectNextItem"
                        ]
                    },
                    {
                        guard: not("multiple"),
                        actions: [
                            "selectFirstItem"
                        ]
                    }
                ],
                "TRIGGER.HOME": {
                    guard: not("multiple"),
                    actions: [
                        "selectFirstItem"
                    ]
                },
                "TRIGGER.END": {
                    guard: not("multiple"),
                    actions: [
                        "selectLastItem"
                    ]
                },
                "TRIGGER.TYPEAHEAD": {
                    guard: not("multiple"),
                    actions: [
                        "selectMatchingItem"
                    ]
                }
            }
        },
        open: {
            tags: [
                "open"
            ],
            exit: [
                "scrollContentToTop"
            ],
            effects: [
                "trackDismissableElement",
                "computePlacement",
                "scrollToHighlightedItem"
            ],
            on: {
                "CONTROLLED.CLOSE": [
                    {
                        guard: "restoreFocus",
                        target: "focused",
                        actions: [
                            "focusTriggerEl",
                            "clearHighlightedItem"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "clearHighlightedItem"
                        ]
                    }
                ],
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "restoreFocus",
                        target: "focused",
                        actions: [
                            "invokeOnClose",
                            "focusTriggerEl",
                            "clearHighlightedItem"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "invokeOnClose",
                            "clearHighlightedItem"
                        ]
                    }
                ],
                "TRIGGER.CLICK": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "invokeOnClose",
                            "clearHighlightedItem"
                        ]
                    }
                ],
                "ITEM.CLICK": [
                    {
                        guard: and("closeOnSelect", "isOpenControlled"),
                        actions: [
                            "selectHighlightedItem",
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: "closeOnSelect",
                        target: "focused",
                        actions: [
                            "selectHighlightedItem",
                            "invokeOnClose",
                            "focusTriggerEl",
                            "clearHighlightedItem"
                        ]
                    },
                    {
                        actions: [
                            "selectHighlightedItem"
                        ]
                    }
                ],
                "CONTENT.HOME": {
                    actions: [
                        "highlightFirstItem"
                    ]
                },
                "CONTENT.END": {
                    actions: [
                        "highlightLastItem"
                    ]
                },
                "CONTENT.ARROW_DOWN": [
                    {
                        guard: and("hasHighlightedItem", "loop", "isLastItemHighlighted"),
                        actions: [
                            "highlightFirstItem"
                        ]
                    },
                    {
                        guard: "hasHighlightedItem",
                        actions: [
                            "highlightNextItem"
                        ]
                    },
                    {
                        actions: [
                            "highlightFirstItem"
                        ]
                    }
                ],
                "CONTENT.ARROW_UP": [
                    {
                        guard: and("hasHighlightedItem", "loop", "isFirstItemHighlighted"),
                        actions: [
                            "highlightLastItem"
                        ]
                    },
                    {
                        guard: "hasHighlightedItem",
                        actions: [
                            "highlightPreviousItem"
                        ]
                    },
                    {
                        actions: [
                            "highlightLastItem"
                        ]
                    }
                ],
                "CONTENT.TYPEAHEAD": {
                    actions: [
                        "highlightMatchingItem"
                    ]
                },
                "ITEM.POINTER_MOVE": {
                    actions: [
                        "highlightItem"
                    ]
                },
                "ITEM.POINTER_LEAVE": {
                    actions: [
                        "clearHighlightedItem"
                    ]
                },
                "POSITIONING.SET": {
                    actions: [
                        "reposition"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            loop: (param)=>{
                let { prop } = param;
                return !!prop("loopFocus");
            },
            multiple: (param)=>{
                let { prop } = param;
                return !!prop("multiple");
            },
            hasSelectedItems: (param)=>{
                let { computed } = param;
                return !!computed("hasSelectedItems");
            },
            hasHighlightedItem: (param)=>{
                let { context } = param;
                return context.get("highlightedValue") != null;
            },
            isFirstItemHighlighted: (param)=>{
                let { context, prop } = param;
                return context.get("highlightedValue") === prop("collection").firstValue;
            },
            isLastItemHighlighted: (param)=>{
                let { context, prop } = param;
                return context.get("highlightedValue") === prop("collection").lastValue;
            },
            closeOnSelect: (param)=>{
                let { prop, event } = param;
                var _event_closeOnSelect;
                return !!((_event_closeOnSelect = event.closeOnSelect) !== null && _event_closeOnSelect !== void 0 ? _event_closeOnSelect : prop("closeOnSelect"));
            },
            restoreFocus: (param)=>{
                let { event } = param;
                return restoreFocusFn(event);
            },
            // guard assertions (for controlled mode)
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") !== void 0;
            },
            isTriggerClickEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "TRIGGER.CLICK";
            },
            isTriggerEnterEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "TRIGGER.ENTER";
            },
            isTriggerArrowUpEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "TRIGGER.ARROW_UP";
            },
            isTriggerArrowDownEvent: (param)=>{
                let { event } = param;
                var _event_previousEvent;
                return ((_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.type) === "TRIGGER.ARROW_DOWN";
            }
        },
        effects: {
            trackFormControlState (param) {
                let { context, scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(getHiddenSelectEl(scope), {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        const value = context.initial("value");
                        context.set("value", value);
                    }
                });
            },
            trackDismissableElement (param) {
                let { scope, send, prop } = param;
                const contentEl = ()=>getContentEl(scope);
                let restoreFocus = true;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDismissableElement"])(contentEl, {
                    defer: true,
                    exclude: [
                        getTriggerEl(scope),
                        getClearTriggerEl(scope)
                    ],
                    onFocusOutside: prop("onFocusOutside"),
                    onPointerDownOutside: prop("onPointerDownOutside"),
                    onInteractOutside (event) {
                        var _prop;
                        (_prop = prop("onInteractOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                        restoreFocus = !(event.detail.focusable || event.detail.contextmenu);
                    },
                    onDismiss () {
                        send({
                            type: "CLOSE",
                            src: "interact-outside",
                            restoreFocus
                        });
                    }
                });
            },
            computePlacement (param) {
                let { context, prop, scope } = param;
                const positioning = prop("positioning");
                context.set("currentPlacement", positioning.placement);
                const triggerEl = ()=>getTriggerEl(scope);
                const positionerEl = ()=>getPositionerEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(triggerEl, positionerEl, {
                    defer: true,
                    ...positioning,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            scrollToHighlightedItem (param) {
                let { context, prop, scope, event } = param;
                const exec = (immediate)=>{
                    const highlightedValue = context.get("highlightedValue");
                    if (highlightedValue == null) return;
                    if (event.current().type.includes("POINTER")) return;
                    const contentEl2 = getContentEl(scope);
                    const scrollToIndexFn = prop("scrollToIndexFn");
                    if (scrollToIndexFn) {
                        const highlightedIndex = prop("collection").indexOf(highlightedValue);
                        scrollToIndexFn === null || scrollToIndexFn === void 0 ? void 0 : scrollToIndexFn({
                            index: highlightedIndex,
                            immediate,
                            getElement: ()=>getItemEl(scope, highlightedValue)
                        });
                        return;
                    }
                    const itemEl = getItemEl(scope, highlightedValue);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["scrollIntoView"])(itemEl, {
                        rootEl: contentEl2,
                        block: "nearest"
                    });
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>exec(true));
                const contentEl = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observeAttributes"])(contentEl, {
                    defer: true,
                    attributes: [
                        "data-activedescendant"
                    ],
                    callback () {
                        exec(false);
                    }
                });
            }
        },
        actions: {
            reposition (param) {
                let { context, prop, scope, event } = param;
                const positionerEl = ()=>getPositionerEl(scope);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(getTriggerEl(scope), positionerEl, {
                    ...prop("positioning"),
                    ...event.options,
                    defer: true,
                    listeners: false,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            toggleVisibility (param) {
                let { send, prop, event } = param;
                send({
                    type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
                    previousEvent: event
                });
            },
            highlightPreviousItem (param) {
                let { context, prop } = param;
                const highlightedValue = context.get("highlightedValue");
                if (highlightedValue == null) return;
                const value = prop("collection").getPreviousValue(highlightedValue, 1, prop("loopFocus"));
                if (value == null) return;
                context.set("highlightedValue", value);
            },
            highlightNextItem (param) {
                let { context, prop } = param;
                const highlightedValue = context.get("highlightedValue");
                if (highlightedValue == null) return;
                const value = prop("collection").getNextValue(highlightedValue, 1, prop("loopFocus"));
                if (value == null) return;
                context.set("highlightedValue", value);
            },
            highlightFirstItem (param) {
                let { context, prop } = param;
                const value = prop("collection").firstValue;
                context.set("highlightedValue", value);
            },
            highlightLastItem (param) {
                let { context, prop } = param;
                const value = prop("collection").lastValue;
                context.set("highlightedValue", value);
            },
            setInitialFocus (param) {
                let { scope } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const element = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getInitialFocus"])({
                        root: getContentEl(scope)
                    });
                    element === null || element === void 0 ? void 0 : element.focus({
                        preventScroll: true
                    });
                });
            },
            focusTriggerEl (param) {
                let { event, scope } = param;
                if (!restoreFocusFn(event)) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const element = getTriggerEl(scope);
                    element === null || element === void 0 ? void 0 : element.focus({
                        preventScroll: true
                    });
                });
            },
            selectHighlightedItem (param) {
                let { context, prop, event } = param;
                var _prop;
                var _event_value;
                let value = (_event_value = event.value) !== null && _event_value !== void 0 ? _event_value : context.get("highlightedValue");
                if (value == null || !prop("collection").has(value)) return;
                (_prop = prop("onSelect")) === null || _prop === void 0 ? void 0 : _prop({
                    value
                });
                const nullable = prop("deselectable") && !prop("multiple") && context.get("value").includes(value);
                value = nullable ? null : value;
                context.set("value", (prev)=>{
                    if (value == null) return [];
                    if (prop("multiple")) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addOrRemove"])(prev, value);
                    return [
                        value
                    ];
                });
            },
            highlightComputedFirstItem (param) {
                let { context, prop, computed } = param;
                const collection2 = prop("collection");
                const value = computed("hasSelectedItems") ? collection2.sort(context.get("value"))[0] : collection2.firstValue;
                context.set("highlightedValue", value);
            },
            highlightComputedLastItem (param) {
                let { context, prop, computed } = param;
                const collection2 = prop("collection");
                const value = computed("hasSelectedItems") ? collection2.sort(context.get("value"))[0] : collection2.lastValue;
                context.set("highlightedValue", value);
            },
            highlightFirstSelectedItem (param) {
                let { context, prop, computed } = param;
                if (!computed("hasSelectedItems")) return;
                const value = prop("collection").sort(context.get("value"))[0];
                context.set("highlightedValue", value);
            },
            highlightItem (param) {
                let { context, event } = param;
                context.set("highlightedValue", event.value);
            },
            highlightMatchingItem (param) {
                let { context, prop, event, refs } = param;
                const value = prop("collection").search(event.key, {
                    state: refs.get("typeahead"),
                    currentValue: context.get("highlightedValue")
                });
                if (value == null) return;
                context.set("highlightedValue", value);
            },
            setHighlightedItem (param) {
                let { context, event } = param;
                context.set("highlightedValue", event.value);
            },
            clearHighlightedItem (param) {
                let { context } = param;
                context.set("highlightedValue", null);
            },
            selectItem (param) {
                let { context, prop, event } = param;
                var _prop;
                (_prop = prop("onSelect")) === null || _prop === void 0 ? void 0 : _prop({
                    value: event.value
                });
                const nullable = prop("deselectable") && !prop("multiple") && context.get("value").includes(event.value);
                const value = nullable ? null : event.value;
                context.set("value", (prev)=>{
                    if (value == null) return [];
                    if (prop("multiple")) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addOrRemove"])(prev, value);
                    return [
                        value
                    ];
                });
            },
            clearItem (param) {
                let { context, event } = param;
                context.set("value", (prev)=>prev.filter((v)=>v !== event.value));
            },
            setSelectedItems (param) {
                let { context, event } = param;
                context.set("value", event.value);
            },
            clearSelectedItems (param) {
                let { context } = param;
                context.set("value", []);
            },
            selectPreviousItem (param) {
                let { context, prop } = param;
                const [firstItem] = context.get("value");
                const value = prop("collection").getPreviousValue(firstItem);
                if (value) context.set("value", [
                    value
                ]);
            },
            selectNextItem (param) {
                let { context, prop } = param;
                const [firstItem] = context.get("value");
                const value = prop("collection").getNextValue(firstItem);
                if (value) context.set("value", [
                    value
                ]);
            },
            selectFirstItem (param) {
                let { context, prop } = param;
                const value = prop("collection").firstValue;
                if (value) context.set("value", [
                    value
                ]);
            },
            selectLastItem (param) {
                let { context, prop } = param;
                const value = prop("collection").lastValue;
                if (value) context.set("value", [
                    value
                ]);
            },
            selectMatchingItem (param) {
                let { context, prop, event, refs } = param;
                const value = prop("collection").search(event.key, {
                    state: refs.get("typeahead"),
                    currentValue: context.get("value")[0]
                });
                if (value == null) return;
                context.set("value", [
                    value
                ]);
            },
            scrollContentToTop (param) {
                let { prop, scope } = param;
                if (prop("scrollToIndexFn")) {
                    var _prop;
                    const firstValue = prop("collection").firstValue;
                    (_prop = prop("scrollToIndexFn")) === null || _prop === void 0 ? void 0 : _prop({
                        index: 0,
                        immediate: true,
                        getElement: ()=>getItemEl(scope, firstValue)
                    });
                } else {
                    var _getContentEl;
                    (_getContentEl = getContentEl(scope)) === null || _getContentEl === void 0 ? void 0 : _getContentEl.scrollTo(0, 0);
                }
            },
            invokeOnOpen (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true
                });
            },
            invokeOnClose (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false
                });
            },
            syncSelectElement (param) {
                let { context, prop, scope } = param;
                const selectEl = getHiddenSelectEl(scope);
                if (!selectEl) return;
                if (context.get("value").length === 0 && !prop("multiple")) {
                    selectEl.selectedIndex = -1;
                    return;
                }
                for (const option of selectEl.options){
                    option.selected = context.get("value").includes(option.value);
                }
            },
            syncCollection (param) {
                let { context, prop } = param;
                const collection2 = prop("collection");
                const highlightedItem = collection2.find(context.get("highlightedValue"));
                if (highlightedItem) context.set("highlightedItem", highlightedItem);
                const selectedItems = collection2.findMany(context.get("value"));
                context.set("selectedItems", selectedItems);
            },
            syncSelectedItems (param) {
                let { context, prop } = param;
                const collection2 = prop("collection");
                const prevSelectedItems = context.get("selectedItems");
                const value = context.get("value");
                const selectedItems = value.map((value2)=>{
                    const item = prevSelectedItems.find((item2)=>collection2.getItemValue(item2) === value2);
                    return item || collection2.find(value2);
                });
                context.set("selectedItems", selectedItems);
            },
            syncHighlightedItem (param) {
                let { context, prop } = param;
                const collection2 = prop("collection");
                const highlightedValue = context.get("highlightedValue");
                const highlightedItem = highlightedValue ? collection2.find(highlightedValue) : null;
                context.set("highlightedItem", highlightedItem);
            },
            dispatchChangeEvent (param) {
                let { scope } = param;
                queueMicrotask(()=>{
                    const node = getHiddenSelectEl(scope);
                    if (!node) return;
                    const win = scope.getWin();
                    const changeEvent = new win.Event("change", {
                        bubbles: true,
                        composed: true
                    });
                    node.dispatchEvent(changeEvent);
                });
            }
        }
    }
});
function restoreFocusFn(event) {
    var _event_previousEvent;
    var _event_restoreFocus;
    const v = (_event_restoreFocus = event.restoreFocus) !== null && _event_restoreFocus !== void 0 ? _event_restoreFocus : (_event_previousEvent = event.previousEvent) === null || _event_previousEvent === void 0 ? void 0 : _event_previousEvent.restoreFocus;
    return v == null || !!v;
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "closeOnSelect",
    "collection",
    "composite",
    "defaultHighlightedValue",
    "defaultOpen",
    "defaultValue",
    "deselectable",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "highlightedValue",
    "id",
    "ids",
    "invalid",
    "loopFocus",
    "multiple",
    "name",
    "onFocusOutside",
    "onHighlightChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onSelect",
    "onValueChange",
    "open",
    "positioning",
    "readOnly",
    "required",
    "scrollToIndexFn",
    "value"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "item",
    "persistFocus"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
var itemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "id"
]);
var splitItemGroupProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupProps);
var itemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "htmlFor"
]);
var splitItemGroupLabelProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemGroupLabelProps);
;
}),
"[project]/node_modules/@zag-js/select/dist/index.mjs [app-client] (ecmascript) <export anatomy as selectAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "selectAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$select$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$select$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/select/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/slider/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps,
    "splitThumbProps",
    ()=>splitThumbProps,
    "thumbProps",
    ()=>thumbProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/slider.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("slider").parts("root", "label", "thumb", "valueText", "track", "range", "control", "markerGroup", "marker", "draggingIndicator");
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "slider:".concat(ctx.id);
};
var getThumbId = (ctx, index)=>{
    var _ctx_ids_thumb, _ctx_ids;
    var _ctx_ids_thumb1;
    return (_ctx_ids_thumb1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_thumb = _ctx_ids.thumb) === null || _ctx_ids_thumb === void 0 ? void 0 : _ctx_ids_thumb.call(_ctx_ids, index)) !== null && _ctx_ids_thumb1 !== void 0 ? _ctx_ids_thumb1 : "slider:".concat(ctx.id, ":thumb:").concat(index);
};
var getHiddenInputId = (ctx, index)=>{
    var _ctx_ids_hiddenInput, _ctx_ids;
    var _ctx_ids_hiddenInput1;
    return (_ctx_ids_hiddenInput1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_hiddenInput = _ctx_ids.hiddenInput) === null || _ctx_ids_hiddenInput === void 0 ? void 0 : _ctx_ids_hiddenInput.call(_ctx_ids, index)) !== null && _ctx_ids_hiddenInput1 !== void 0 ? _ctx_ids_hiddenInput1 : "slider:".concat(ctx.id, ":input:").concat(index);
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "slider:".concat(ctx.id, ":control");
};
var getTrackId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_track;
    return (_ctx_ids_track = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.track) !== null && _ctx_ids_track !== void 0 ? _ctx_ids_track : "slider:".concat(ctx.id, ":track");
};
var getRangeId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_range;
    return (_ctx_ids_range = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.range) !== null && _ctx_ids_range !== void 0 ? _ctx_ids_range : "slider:".concat(ctx.id, ":range");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "slider:".concat(ctx.id, ":label");
};
var getValueTextId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_valueText;
    return (_ctx_ids_valueText = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.valueText) !== null && _ctx_ids_valueText !== void 0 ? _ctx_ids_valueText : "slider:".concat(ctx.id, ":value-text");
};
var getMarkerId = (ctx, value)=>{
    var _ctx_ids_marker, _ctx_ids;
    var _ctx_ids_marker1;
    return (_ctx_ids_marker1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_marker = _ctx_ids.marker) === null || _ctx_ids_marker === void 0 ? void 0 : _ctx_ids_marker.call(_ctx_ids, value)) !== null && _ctx_ids_marker1 !== void 0 ? _ctx_ids_marker1 : "slider:".concat(ctx.id, ":marker:").concat(value);
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getThumbEl = (ctx, index)=>ctx.getById(getThumbId(ctx, index));
var getThumbEls = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getControlEl(ctx), "[role=slider]");
var getFirstThumbEl = (ctx)=>getThumbEls(ctx)[0];
var getHiddenInputEl = (ctx, index)=>ctx.getById(getHiddenInputId(ctx, index));
var getControlEl = (ctx)=>ctx.getById(getControlId(ctx));
var getPointValue = (params, point)=>{
    const { prop, scope } = params;
    const controlEl = getControlEl(scope);
    if (!controlEl) return;
    const relativePoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRelativePoint"])(point, controlEl);
    const percent = relativePoint.getPercentValue({
        orientation: prop("orientation"),
        dir: prop("dir"),
        inverted: {
            y: true
        }
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPercentValue"])(percent, prop("min"), prop("max"), prop("step"));
};
var dispatchChangeEvent = (ctx, value)=>{
    value.forEach((value2, index)=>{
        const inputEl = getHiddenInputEl(ctx, index);
        if (!inputEl) return;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dispatchInputValueEvent"])(inputEl, {
            value: value2
        });
    });
};
var getOffsetRect = (el)=>{
    var _el_offsetLeft, _el_offsetTop, _el_offsetWidth, _el_offsetHeight;
    return {
        left: (_el_offsetLeft = el === null || el === void 0 ? void 0 : el.offsetLeft) !== null && _el_offsetLeft !== void 0 ? _el_offsetLeft : 0,
        top: (_el_offsetTop = el === null || el === void 0 ? void 0 : el.offsetTop) !== null && _el_offsetTop !== void 0 ? _el_offsetTop : 0,
        width: (_el_offsetWidth = el === null || el === void 0 ? void 0 : el.offsetWidth) !== null && _el_offsetWidth !== void 0 ? _el_offsetWidth : 0,
        height: (_el_offsetHeight = el === null || el === void 0 ? void 0 : el.offsetHeight) !== null && _el_offsetHeight !== void 0 ? _el_offsetHeight : 0
    };
};
function getBounds(value) {
    const firstValue = value[0];
    const lastThumb = value[value.length - 1];
    return [
        firstValue,
        lastThumb
    ];
}
function getRangeOffsets(params) {
    const { prop, computed } = params;
    const valuePercent = computed("valuePercent");
    const [firstPercent, lastPercent] = getBounds(valuePercent);
    if (valuePercent.length === 1) {
        if (prop("origin") === "center") {
            const isNegative = valuePercent[0] < 50;
            const start = isNegative ? "".concat(valuePercent[0], "%") : "50%";
            const end = isNegative ? "50%" : "".concat(100 - valuePercent[0], "%");
            return {
                start,
                end
            };
        }
        if (prop("origin") === "end") {
            return {
                start: "".concat(lastPercent, "%"),
                end: "0%"
            };
        }
        return {
            start: "0%",
            end: "".concat(100 - lastPercent, "%")
        };
    }
    return {
        start: "".concat(firstPercent, "%"),
        end: "".concat(100 - lastPercent, "%")
    };
}
function getRangeStyle(params) {
    const { computed } = params;
    const isVertical = computed("isVertical");
    const isRtl = computed("isRtl");
    if (isVertical) {
        return {
            position: "absolute",
            bottom: "var(--slider-range-start)",
            top: "var(--slider-range-end)"
        };
    }
    return {
        position: "absolute",
        [isRtl ? "right" : "left"]: "var(--slider-range-start)",
        [isRtl ? "left" : "right"]: "var(--slider-range-end)"
    };
}
function getVerticalThumbOffset(params, value) {
    const { context, prop } = params;
    var _context_get;
    const { height = 0 } = (_context_get = context.get("thumbSize")) !== null && _context_get !== void 0 ? _context_get : {};
    const getValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueTransformer"])([
        prop("min"),
        prop("max")
    ], [
        -height / 2,
        height / 2
    ]);
    return parseFloat(getValue(value).toFixed(2));
}
function getHorizontalThumbOffset(params, value) {
    const { computed, context, prop } = params;
    var _context_get;
    const { width = 0 } = (_context_get = context.get("thumbSize")) !== null && _context_get !== void 0 ? _context_get : {};
    const isRtl = computed("isRtl");
    if (isRtl) {
        const getValue2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueTransformer"])([
            prop("max"),
            prop("min")
        ], [
            -width / 2,
            width / 2
        ]);
        return -1 * parseFloat(getValue2(value).toFixed(2));
    }
    const getValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueTransformer"])([
        prop("min"),
        prop("max")
    ], [
        -width / 2,
        width / 2
    ]);
    return parseFloat(getValue(value).toFixed(2));
}
function getOffset(params, percent, value) {
    const { computed, prop } = params;
    if (prop("thumbAlignment") === "center") return "".concat(percent, "%");
    const offset = computed("isVertical") ? getVerticalThumbOffset(params, value) : getHorizontalThumbOffset(params, value);
    return "calc(".concat(percent, "% - ").concat(offset, "px)");
}
function getThumbOffset(params, value) {
    const { prop } = params;
    const percent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValuePercent"])(value, prop("min"), prop("max")) * 100;
    return getOffset(params, percent, value);
}
function getVisibility(params) {
    const { computed, prop } = params;
    let visibility = "visible";
    if (prop("thumbAlignment") === "contain" && !computed("hasMeasuredThumbSize")) {
        visibility = "hidden";
    }
    return visibility;
}
function getThumbStyle(params, index) {
    const { computed } = params;
    const placementProp = computed("isVertical") ? "bottom" : "insetInlineStart";
    return {
        visibility: getVisibility(params),
        position: "absolute",
        transform: "var(--slider-thumb-transform)",
        [placementProp]: "var(--slider-thumb-offset-".concat(index, ")")
    };
}
function getControlStyle() {
    return {
        touchAction: "none",
        userSelect: "none",
        WebkitUserSelect: "none",
        position: "relative"
    };
}
function getRootStyle(params) {
    const { context, computed } = params;
    const isVertical = computed("isVertical");
    const isRtl = computed("isRtl");
    const range = getRangeOffsets(params);
    const thumbSize = context.get("thumbSize");
    const offsetStyles = context.get("value").reduce((styles, value, index)=>{
        const offset = getThumbOffset(params, value);
        return {
            ...styles,
            ["--slider-thumb-offset-".concat(index)]: offset
        };
    }, {});
    return {
        ...offsetStyles,
        "--slider-thumb-width": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toPx"])(thumbSize === null || thumbSize === void 0 ? void 0 : thumbSize.width),
        "--slider-thumb-height": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toPx"])(thumbSize === null || thumbSize === void 0 ? void 0 : thumbSize.height),
        "--slider-thumb-transform": isVertical ? "translateY(50%)" : isRtl ? "translateX(50%)" : "translateX(-50%)",
        "--slider-range-start": range.start,
        "--slider-range-end": range.end
    };
}
function getMarkerStyle(params, value) {
    const { computed } = params;
    const isHorizontal = computed("isHorizontal");
    const isRtl = computed("isRtl");
    return {
        visibility: getVisibility(params),
        position: "absolute",
        pointerEvents: "none",
        [isHorizontal ? "insetInlineStart" : "bottom"]: getThumbOffset(params, value),
        translate: "var(--translate-x) var(--translate-y)",
        "--translate-x": isHorizontal ? isRtl ? "50%" : "-50%" : "0%",
        "--translate-y": !isHorizontal ? "50%" : "0%"
    };
}
function getMarkerGroupStyle() {
    return {
        userSelect: "none",
        WebkitUserSelect: "none",
        pointerEvents: "none",
        position: "relative"
    };
}
function normalizeValues(params, nextValues) {
    return nextValues.map((value, index)=>{
        return constrainValue(params, value, index);
    });
}
function getRangeAtIndex(params, index) {
    const { context, prop } = params;
    const step = prop("step") * prop("minStepsBetweenThumbs");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueRanges"])(context.get("value"), prop("min"), prop("max"), step)[index];
}
function constrainValue(params, value, index) {
    const { prop } = params;
    const range = getRangeAtIndex(params, index);
    const snapValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snapValueToStep"])(value, prop("min"), prop("max"), prop("step"));
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(snapValue, range.min, range.max);
}
function decrement(params, index, step) {
    const { context, prop } = params;
    const idx = index !== null && index !== void 0 ? index : context.get("focusedIndex");
    const range = getRangeAtIndex(params, idx);
    const nextValues = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPreviousStepValue"])(idx, {
        ...range,
        step: step !== null && step !== void 0 ? step : prop("step"),
        values: context.get("value")
    });
    nextValues[idx] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(nextValues[idx], range.min, range.max);
    return nextValues;
}
function increment(params, index, step) {
    const { context, prop } = params;
    const idx = index !== null && index !== void 0 ? index : context.get("focusedIndex");
    const range = getRangeAtIndex(params, idx);
    const nextValues = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNextStepValue"])(idx, {
        ...range,
        step: step !== null && step !== void 0 ? step : prop("step"),
        values: context.get("value")
    });
    nextValues[idx] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(nextValues[idx], range.min, range.max);
    return nextValues;
}
function getClosestIndex(params, pointValue) {
    const { context } = params;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getClosestValueIndex"])(context.get("value"), pointValue);
}
// src/slider.connect.ts
function connect(service, normalize2) {
    const { state, send, context, prop, computed, scope } = service;
    const ariaLabel = prop("aria-label");
    const ariaLabelledBy = prop("aria-labelledby");
    const sliderValue = context.get("value");
    const focusedIndex = context.get("focusedIndex");
    const focused = state.matches("focus");
    const dragging = state.matches("dragging");
    const disabled = computed("isDisabled");
    const invalid = prop("invalid");
    const interactive = computed("isInteractive");
    const isHorizontal = prop("orientation") === "horizontal";
    const isVertical = prop("orientation") === "vertical";
    function getValuePercentFn(value) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValuePercent"])(value, prop("min"), prop("max"));
    }
    function getPercentValueFn(percent) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPercentValue"])(percent, prop("min"), prop("max"), prop("step"));
    }
    return {
        value: sliderValue,
        dragging,
        focused,
        setValue (value) {
            send({
                type: "SET_VALUE",
                value
            });
        },
        getThumbValue (index) {
            return sliderValue[index];
        },
        setThumbValue (index, value) {
            send({
                type: "SET_VALUE",
                index,
                value
            });
        },
        getValuePercent: getValuePercentFn,
        getPercentValue: getPercentValueFn,
        getThumbPercent (index) {
            return getValuePercentFn(sliderValue[index]);
        },
        setThumbPercent (index, percent) {
            const value = getPercentValueFn(percent);
            send({
                type: "SET_VALUE",
                index,
                value
            });
        },
        getThumbMin (index) {
            return getRangeAtIndex(service, index).min;
        },
        getThumbMax (index) {
            return getRangeAtIndex(service, index).max;
        },
        increment (index) {
            send({
                type: "INCREMENT",
                index
            });
        },
        decrement (index) {
            send({
                type: "DECREMENT",
                index
            });
        },
        focus () {
            if (!interactive) return;
            send({
                type: "FOCUS",
                index: 0
            });
        },
        getLabelProps () {
            return normalize2.label({
                ...parts.label.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": prop("orientation"),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                id: getLabelId(scope),
                htmlFor: getHiddenInputId(scope, 0),
                onClick (event) {
                    var _getFirstThumbEl;
                    if (!interactive) return;
                    event.preventDefault();
                    (_getFirstThumbEl = getFirstThumbEl(scope)) === null || _getFirstThumbEl === void 0 ? void 0 : _getFirstThumbEl.focus();
                },
                style: {
                    userSelect: "none",
                    WebkitUserSelect: "none"
                }
            });
        },
        getRootProps () {
            return normalize2.element({
                ...parts.root.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": prop("orientation"),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                id: getRootId(scope),
                dir: prop("dir"),
                style: getRootStyle(service)
            });
        },
        getValueTextProps () {
            return normalize2.element({
                ...parts.valueText.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": prop("orientation"),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                id: getValueTextId(scope)
            });
        },
        getTrackProps () {
            return normalize2.element({
                ...parts.track.attrs,
                dir: prop("dir"),
                id: getTrackId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging),
                "data-orientation": prop("orientation"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                style: {
                    position: "relative"
                }
            });
        },
        getThumbProps (props2) {
            var _prop;
            const { index = 0, name } = props2;
            const value = sliderValue[index];
            const range = getRangeAtIndex(service, index);
            const valueText = (_prop = prop("getAriaValueText")) === null || _prop === void 0 ? void 0 : _prop({
                value,
                index
            });
            const _ariaLabel = Array.isArray(ariaLabel) ? ariaLabel[index] : ariaLabel;
            const _ariaLabelledBy = Array.isArray(ariaLabelledBy) ? ariaLabelledBy[index] : ariaLabelledBy;
            return normalize2.element({
                ...parts.thumb.attrs,
                dir: prop("dir"),
                "data-index": index,
                "data-name": name,
                id: getThumbId(scope, index),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": prop("orientation"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused && focusedIndex === index),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging && focusedIndex === index),
                draggable: false,
                "aria-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(disabled),
                "aria-label": _ariaLabel,
                "aria-labelledby": _ariaLabelledBy !== null && _ariaLabelledBy !== void 0 ? _ariaLabelledBy : getLabelId(scope),
                "aria-orientation": prop("orientation"),
                "aria-valuemax": range.max,
                "aria-valuemin": range.min,
                "aria-valuenow": sliderValue[index],
                "aria-valuetext": valueText,
                role: "slider",
                tabIndex: disabled ? void 0 : 0,
                style: getThumbStyle(service, index),
                onPointerDown (event) {
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    send({
                        type: "THUMB_POINTER_DOWN",
                        index
                    });
                    event.stopPropagation();
                },
                onBlur () {
                    if (!interactive) return;
                    send({
                        type: "BLUR"
                    });
                },
                onFocus () {
                    if (!interactive) return;
                    send({
                        type: "FOCUS",
                        index
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!interactive) return;
                    const step = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventStep"])(event) * prop("step");
                    const keyMap = {
                        ArrowUp () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_INC",
                                step,
                                src: "ArrowUp"
                            });
                        },
                        ArrowDown () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_DEC",
                                step,
                                src: "ArrowDown"
                            });
                        },
                        ArrowLeft () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_DEC",
                                step,
                                src: "ArrowLeft"
                            });
                        },
                        ArrowRight () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_INC",
                                step,
                                src: "ArrowRight"
                            });
                        },
                        PageUp () {
                            send({
                                type: "ARROW_INC",
                                step,
                                src: "PageUp"
                            });
                        },
                        PageDown () {
                            send({
                                type: "ARROW_DEC",
                                step,
                                src: "PageDown"
                            });
                        },
                        Home () {
                            send({
                                type: "HOME"
                            });
                        },
                        End () {
                            send({
                                type: "END"
                            });
                        }
                    };
                    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir"),
                        orientation: prop("orientation")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        exec(event);
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }
            });
        },
        getHiddenInputProps (props2) {
            const { index = 0, name } = props2;
            return normalize2.input({
                name: name !== null && name !== void 0 ? name : prop("name") ? prop("name") + (sliderValue.length > 1 ? "[]" : "") : void 0,
                form: prop("form"),
                type: "text",
                hidden: true,
                defaultValue: sliderValue[index],
                id: getHiddenInputId(scope, index)
            });
        },
        getRangeProps () {
            return normalize2.element({
                id: getRangeId(scope),
                ...parts.range.attrs,
                dir: prop("dir"),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": prop("orientation"),
                style: getRangeStyle(service)
            });
        },
        getControlProps () {
            return normalize2.element({
                ...parts.control.attrs,
                dir: prop("dir"),
                id: getControlId(scope),
                "data-dragging": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(dragging),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-orientation": prop("orientation"),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                style: getControlStyle(),
                onPointerDown (event) {
                    if (!interactive) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isModifierKey"])(event)) return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    send({
                        type: "POINTER_DOWN",
                        point
                    });
                    event.preventDefault();
                    event.stopPropagation();
                }
            });
        },
        getMarkerGroupProps () {
            return normalize2.element({
                ...parts.markerGroup.attrs,
                role: "presentation",
                dir: prop("dir"),
                "aria-hidden": true,
                "data-orientation": prop("orientation"),
                style: getMarkerGroupStyle()
            });
        },
        getMarkerProps (props2) {
            const style = getMarkerStyle(service, props2.value);
            let markerState;
            if (props2.value < (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["first"])(sliderValue)) {
                markerState = "under-value";
            } else if (props2.value > (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["last"])(sliderValue)) {
                markerState = "over-value";
            } else {
                markerState = "at-value";
            }
            return normalize2.element({
                ...parts.marker.attrs,
                id: getMarkerId(scope, props2.value),
                role: "presentation",
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-value": props2.value,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-state": markerState,
                style
            });
        },
        getDraggingIndicatorProps (props2) {
            const { index = 0 } = props2;
            const isDragging = index === focusedIndex && dragging;
            return normalize2.element({
                ...parts.draggingIndicator.attrs,
                role: "presentation",
                dir: prop("dir"),
                hidden: !isDragging,
                "data-orientation": prop("orientation"),
                "data-state": isDragging ? "open" : "closed",
                style: getThumbStyle(service, index)
            });
        }
    };
}
var isEqualSize = (a, b)=>{
    return (a === null || a === void 0 ? void 0 : a.width) === (b === null || b === void 0 ? void 0 : b.width) && (a === null || a === void 0 ? void 0 : a.height) === (b === null || b === void 0 ? void 0 : b.height);
};
var normalize = (value, min, max, step, minStepsBetweenThumbs)=>{
    const ranges = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueRanges"])(value, min, max, minStepsBetweenThumbs * step);
    return ranges.map((range)=>{
        const snapValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snapValueToStep"])(range.value, range.min, range.max, step);
        const rangeValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(snapValue, range.min, range.max);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValueWithinRange"])(rangeValue, min, max)) {
            throw new Error("[zag-js/slider] The configured `min`, `max`, `step` or `minStepsBetweenThumbs` values are invalid");
        }
        return rangeValue;
    });
};
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        var _props2_min;
        const min = (_props2_min = props2.min) !== null && _props2_min !== void 0 ? _props2_min : 0;
        var _props2_max;
        const max = (_props2_max = props2.max) !== null && _props2_max !== void 0 ? _props2_max : 100;
        var _props2_step;
        const step = (_props2_step = props2.step) !== null && _props2_step !== void 0 ? _props2_step : 1;
        var _props2_defaultValue;
        const defaultValue = (_props2_defaultValue = props2.defaultValue) !== null && _props2_defaultValue !== void 0 ? _props2_defaultValue : [
            min
        ];
        var _props2_minStepsBetweenThumbs;
        const minStepsBetweenThumbs = (_props2_minStepsBetweenThumbs = props2.minStepsBetweenThumbs) !== null && _props2_minStepsBetweenThumbs !== void 0 ? _props2_minStepsBetweenThumbs : 0;
        return {
            dir: "ltr",
            thumbAlignment: "contain",
            origin: "start",
            orientation: "horizontal",
            minStepsBetweenThumbs,
            ...props2,
            defaultValue: normalize(defaultValue, min, max, step, minStepsBetweenThumbs),
            value: props2.value ? normalize(props2.value, min, max, step, minStepsBetweenThumbs) : void 0,
            max,
            step,
            min
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable, getContext } = param;
        return {
            thumbSize: bindable(()=>({
                    defaultValue: prop("thumbSize") || null
                })),
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    isEqual: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"],
                    hash (a) {
                        return a.join(",");
                    },
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                })),
            focusedIndex: bindable(()=>({
                    defaultValue: -1,
                    onChange (value) {
                        var _prop;
                        const ctx = getContext();
                        (_prop = prop("onFocusChange")) === null || _prop === void 0 ? void 0 : _prop({
                            focusedIndex: value,
                            value: ctx.get("value")
                        });
                    }
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    computed: {
        isHorizontal: (param)=>{
            let { prop } = param;
            return prop("orientation") === "horizontal";
        },
        isVertical: (param)=>{
            let { prop } = param;
            return prop("orientation") === "vertical";
        },
        isRtl: (param)=>{
            let { prop } = param;
            return prop("orientation") === "horizontal" && prop("dir") === "rtl";
        },
        isDisabled: (param)=>{
            let { context, prop } = param;
            return !!prop("disabled") || context.get("fieldsetDisabled");
        },
        isInteractive: (param)=>{
            let { prop, computed } = param;
            return !(prop("readOnly") || computed("isDisabled"));
        },
        hasMeasuredThumbSize: (param)=>{
            let { context } = param;
            return context.get("thumbSize") != null;
        },
        valuePercent (param) {
            let { context, prop } = param;
            return context.get("value").map((value)=>100 * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValuePercent"])(value, prop("min"), prop("max")));
        }
    },
    watch (param) {
        let { track, action, context } = param;
        track([
            ()=>context.hash("value")
        ], ()=>{
            action([
                "syncInputElements",
                "dispatchChangeEvent"
            ]);
        });
    },
    effects: [
        "trackFormControlState",
        "trackThumbSize"
    ],
    on: {
        SET_VALUE: [
            {
                guard: "hasIndex",
                actions: [
                    "setValueAtIndex"
                ]
            },
            {
                actions: [
                    "setValue"
                ]
            }
        ],
        INCREMENT: {
            actions: [
                "incrementThumbAtIndex"
            ]
        },
        DECREMENT: {
            actions: [
                "decrementThumbAtIndex"
            ]
        }
    },
    states: {
        idle: {
            on: {
                POINTER_DOWN: {
                    target: "dragging",
                    actions: [
                        "setClosestThumbIndex",
                        "setPointerValue",
                        "focusActiveThumb"
                    ]
                },
                FOCUS: {
                    target: "focus",
                    actions: [
                        "setFocusedIndex"
                    ]
                },
                THUMB_POINTER_DOWN: {
                    target: "dragging",
                    actions: [
                        "setFocusedIndex",
                        "focusActiveThumb"
                    ]
                }
            }
        },
        focus: {
            entry: [
                "focusActiveThumb"
            ],
            on: {
                POINTER_DOWN: {
                    target: "dragging",
                    actions: [
                        "setClosestThumbIndex",
                        "setPointerValue",
                        "focusActiveThumb"
                    ]
                },
                THUMB_POINTER_DOWN: {
                    target: "dragging",
                    actions: [
                        "setFocusedIndex",
                        "focusActiveThumb"
                    ]
                },
                ARROW_DEC: {
                    actions: [
                        "decrementThumbAtIndex",
                        "invokeOnChangeEnd"
                    ]
                },
                ARROW_INC: {
                    actions: [
                        "incrementThumbAtIndex",
                        "invokeOnChangeEnd"
                    ]
                },
                HOME: {
                    actions: [
                        "setFocusedThumbToMin",
                        "invokeOnChangeEnd"
                    ]
                },
                END: {
                    actions: [
                        "setFocusedThumbToMax",
                        "invokeOnChangeEnd"
                    ]
                },
                BLUR: {
                    target: "idle",
                    actions: [
                        "clearFocusedIndex"
                    ]
                }
            }
        },
        dragging: {
            entry: [
                "focusActiveThumb"
            ],
            effects: [
                "trackPointerMove"
            ],
            on: {
                POINTER_UP: {
                    target: "focus",
                    actions: [
                        "invokeOnChangeEnd"
                    ]
                },
                POINTER_MOVE: {
                    actions: [
                        "setPointerValue"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            hasIndex: (param)=>{
                let { event } = param;
                return event.index != null;
            }
        },
        effects: {
            trackFormControlState (param) {
                let { context, scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(getRootEl(scope), {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        context.set("value", context.initial("value"));
                    }
                });
            },
            trackPointerMove (param) {
                let { scope, send } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackPointerMove"])(scope.getDoc(), {
                    onPointerMove (info) {
                        send({
                            type: "POINTER_MOVE",
                            point: info.point
                        });
                    },
                    onPointerUp () {
                        send({
                            type: "POINTER_UP"
                        });
                    }
                });
            },
            trackThumbSize (param) {
                let { context, scope, prop } = param;
                if (prop("thumbAlignment") !== "contain" || prop("thumbSize")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackElementRect"])(getThumbEls(scope), {
                    box: "border-box",
                    measure (el) {
                        return getOffsetRect(el);
                    },
                    onEntry (param) {
                        let { rects } = param;
                        if (rects.length === 0) return;
                        const size = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pick"])(rects[0], [
                            "width",
                            "height"
                        ]);
                        if (isEqualSize(context.get("thumbSize"), size)) return;
                        context.set("thumbSize", size);
                    }
                });
            }
        },
        actions: {
            dispatchChangeEvent (param) {
                let { context, scope } = param;
                dispatchChangeEvent(scope, context.get("value"));
            },
            syncInputElements (param) {
                let { context, scope } = param;
                context.get("value").forEach((value, index)=>{
                    const inputEl = getHiddenInputEl(scope, index);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(inputEl, value.toString());
                });
            },
            invokeOnChangeEnd (param) {
                let { prop, context } = param;
                queueMicrotask(()=>{
                    var _prop;
                    (_prop = prop("onValueChangeEnd")) === null || _prop === void 0 ? void 0 : _prop({
                        value: context.get("value")
                    });
                });
            },
            setClosestThumbIndex (params) {
                const { context, event } = params;
                const pointValue = getPointValue(params, event.point);
                if (pointValue == null) return;
                const focusedIndex = getClosestIndex(params, pointValue);
                context.set("focusedIndex", focusedIndex);
            },
            setFocusedIndex (param) {
                let { context, event } = param;
                context.set("focusedIndex", event.index);
            },
            clearFocusedIndex (param) {
                let { context } = param;
                context.set("focusedIndex", -1);
            },
            setPointerValue (params) {
                queueMicrotask(()=>{
                    const { context, event } = params;
                    const pointValue = getPointValue(params, event.point);
                    if (pointValue == null) return;
                    const focusedIndex = context.get("focusedIndex");
                    const value = constrainValue(params, pointValue, focusedIndex);
                    context.set("value", (prev)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtIndex"])(prev, focusedIndex, value));
                });
            },
            focusActiveThumb (param) {
                let { scope, context } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const thumbEl = getThumbEl(scope, context.get("focusedIndex"));
                    thumbEl === null || thumbEl === void 0 ? void 0 : thumbEl.focus({
                        preventScroll: true
                    });
                });
            },
            decrementThumbAtIndex (params) {
                const { context, event } = params;
                const value = decrement(params, event.index, event.step);
                context.set("value", value);
            },
            incrementThumbAtIndex (params) {
                const { context, event } = params;
                const value = increment(params, event.index, event.step);
                context.set("value", value);
            },
            setFocusedThumbToMin (params) {
                const { context } = params;
                const index = context.get("focusedIndex");
                const { min } = getRangeAtIndex(params, index);
                context.set("value", (prev)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtIndex"])(prev, index, min));
            },
            setFocusedThumbToMax (params) {
                const { context } = params;
                const index = context.get("focusedIndex");
                const { max } = getRangeAtIndex(params, index);
                context.set("value", (prev)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtIndex"])(prev, index, max));
            },
            setValueAtIndex (params) {
                const { context, event } = params;
                const value = constrainValue(params, event.value, event.index);
                context.set("value", (prev)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtIndex"])(prev, event.index, value));
            },
            setValue (params) {
                const { context, event } = params;
                const value = normalizeValues(params, event.value);
                context.set("value", value);
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "aria-label",
    "aria-labelledby",
    "dir",
    "disabled",
    "form",
    "getAriaValueText",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "max",
    "min",
    "minStepsBetweenThumbs",
    "name",
    "onFocusChange",
    "onValueChange",
    "onValueChangeEnd",
    "orientation",
    "origin",
    "readOnly",
    "step",
    "thumbAlignment",
    "thumbAlignment",
    "thumbSize",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var thumbProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "index",
    "name"
]);
var splitThumbProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(thumbProps);
;
}),
"[project]/node_modules/@zag-js/slider/dist/index.mjs [app-client] (ecmascript) <export anatomy as sliderAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "sliderAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$slider$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$slider$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/slider/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/switch/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/focus-visible/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
// src/switch.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("switch").parts("root", "label", "control", "thumb");
var parts = anatomy.build();
// src/switch.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "switch:".concat(ctx.id);
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "switch:".concat(ctx.id, ":label");
};
var getThumbId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_thumb;
    return (_ctx_ids_thumb = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.thumb) !== null && _ctx_ids_thumb !== void 0 ? _ctx_ids_thumb : "switch:".concat(ctx.id, ":thumb");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "switch:".concat(ctx.id, ":control");
};
var getHiddenInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_hiddenInput;
    return (_ctx_ids_hiddenInput = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.hiddenInput) !== null && _ctx_ids_hiddenInput !== void 0 ? _ctx_ids_hiddenInput : "switch:".concat(ctx.id, ":input");
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getHiddenInputEl = (ctx)=>ctx.getById(getHiddenInputId(ctx));
// src/switch.connect.ts
function connect(service, normalize) {
    const { context, send, prop, scope } = service;
    const disabled = prop("disabled");
    const readOnly = prop("readOnly");
    const checked = !!context.get("checked");
    const focused = !disabled && context.get("focused");
    const focusVisible = !disabled && context.get("focusVisible");
    const dataAttrs = {
        "data-active": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("active")),
        "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
        "data-focus-visible": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focusVisible),
        "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
        "data-hover": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("hovered")),
        "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
        "data-state": checked ? "checked" : "unchecked",
        "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("invalid"))
    };
    return {
        checked,
        disabled,
        focused,
        setChecked (checked2) {
            send({
                type: "CHECKED.SET",
                checked: checked2,
                isTrusted: false
            });
        },
        toggleChecked () {
            send({
                type: "CHECKED.TOGGLE",
                checked,
                isTrusted: false
            });
        },
        getRootProps () {
            return normalize.label({
                ...parts.root.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                id: getRootId(scope),
                htmlFor: getHiddenInputId(scope),
                onPointerMove () {
                    if (disabled) return;
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            hovered: true
                        }
                    });
                },
                onPointerLeave () {
                    if (disabled) return;
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            hovered: false
                        }
                    });
                },
                onClick (event) {
                    if (disabled) return;
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    if (target === getHiddenInputEl(scope)) {
                        event.stopPropagation();
                    }
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) {
                        var _getHiddenInputEl;
                        (_getHiddenInputEl = getHiddenInputEl(scope)) === null || _getHiddenInputEl === void 0 ? void 0 : _getHiddenInputEl.focus();
                    }
                }
            });
        },
        getLabelProps () {
            return normalize.element({
                ...parts.label.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                id: getLabelId(scope)
            });
        },
        getThumbProps () {
            return normalize.element({
                ...parts.thumb.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                id: getThumbId(scope),
                "aria-hidden": true
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                id: getControlId(scope),
                "aria-hidden": true
            });
        },
        getHiddenInputProps () {
            return normalize.input({
                id: getHiddenInputId(scope),
                type: "checkbox",
                required: prop("required"),
                defaultChecked: checked,
                disabled,
                "aria-labelledby": getLabelId(scope),
                "aria-invalid": prop("invalid"),
                name: prop("name"),
                form: prop("form"),
                value: prop("value"),
                style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visuallyHiddenStyle"],
                onFocus () {
                    const focusVisible2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusVisible"])();
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            focused: true,
                            focusVisible: focusVisible2
                        }
                    });
                },
                onBlur () {
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            focused: false,
                            focusVisible: false
                        }
                    });
                },
                onClick (event) {
                    if (readOnly) {
                        event.preventDefault();
                        return;
                    }
                    const checked2 = event.currentTarget.checked;
                    send({
                        type: "CHECKED.SET",
                        checked: checked2,
                        isTrusted: true
                    });
                }
            });
        }
    };
}
var { not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            defaultChecked: false,
            label: "switch",
            value: "on",
            ...props2
        };
    },
    initialState () {
        return "ready";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            checked: bindable(()=>({
                    defaultValue: prop("defaultChecked"),
                    value: prop("checked"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onCheckedChange")) === null || _prop === void 0 ? void 0 : _prop({
                            checked: value
                        });
                    }
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                })),
            focusVisible: bindable(()=>({
                    defaultValue: false
                })),
            active: bindable(()=>({
                    defaultValue: false
                })),
            focused: bindable(()=>({
                    defaultValue: false
                })),
            hovered: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    computed: {
        isDisabled: (param)=>{
            let { context, prop } = param;
            return prop("disabled") || context.get("fieldsetDisabled");
        }
    },
    watch (param) {
        let { track, prop, context, action } = param;
        track([
            ()=>prop("disabled")
        ], ()=>{
            action([
                "removeFocusIfNeeded"
            ]);
        });
        track([
            ()=>context.get("checked")
        ], ()=>{
            action([
                "syncInputElement"
            ]);
        });
    },
    effects: [
        "trackFormControlState",
        "trackPressEvent",
        "trackFocusVisible"
    ],
    on: {
        "CHECKED.TOGGLE": [
            {
                guard: not("isTrusted"),
                actions: [
                    "toggleChecked",
                    "dispatchChangeEvent"
                ]
            },
            {
                actions: [
                    "toggleChecked"
                ]
            }
        ],
        "CHECKED.SET": [
            {
                guard: not("isTrusted"),
                actions: [
                    "setChecked",
                    "dispatchChangeEvent"
                ]
            },
            {
                actions: [
                    "setChecked"
                ]
            }
        ],
        "CONTEXT.SET": {
            actions: [
                "setContext"
            ]
        }
    },
    states: {
        ready: {}
    },
    implementations: {
        guards: {
            isTrusted: (param)=>{
                let { event } = param;
                return !!event.isTrusted;
            }
        },
        effects: {
            trackPressEvent (param) {
                let { computed, scope, context } = param;
                if (computed("isDisabled")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackPress"])({
                    pointerNode: getRootEl(scope),
                    keyboardNode: getHiddenInputEl(scope),
                    isValidKey: (event)=>event.key === " ",
                    onPress: ()=>context.set("active", false),
                    onPressStart: ()=>context.set("active", true),
                    onPressEnd: ()=>context.set("active", false)
                });
            },
            trackFocusVisible (param) {
                let { computed, scope } = param;
                if (computed("isDisabled")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFocusVisible"])({
                    root: scope.getRootNode()
                });
            },
            trackFormControlState (param) {
                let { context, send, scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(getHiddenInputEl(scope), {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        const checked = context.initial("checked");
                        send({
                            type: "CHECKED.SET",
                            checked: !!checked,
                            src: "form-reset"
                        });
                    }
                });
            }
        },
        actions: {
            setContext (param) {
                let { context, event } = param;
                for(const key in event.context){
                    context.set(key, event.context[key]);
                }
            },
            syncInputElement (param) {
                let { context, scope } = param;
                const inputEl = getHiddenInputEl(scope);
                if (!inputEl) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementChecked"])(inputEl, !!context.get("checked"));
            },
            removeFocusIfNeeded (param) {
                let { context, prop } = param;
                if (prop("disabled")) {
                    context.set("focused", false);
                }
            },
            setChecked (param) {
                let { context, event } = param;
                context.set("checked", event.checked);
            },
            toggleChecked (param) {
                let { context } = param;
                context.set("checked", !context.get("checked"));
            },
            dispatchChangeEvent (param) {
                let { context, scope } = param;
                const inputEl = getHiddenInputEl(scope);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dispatchInputCheckedEvent"])(inputEl, {
                    checked: context.get("checked")
                });
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "checked",
    "defaultChecked",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "label",
    "name",
    "onCheckedChange",
    "readOnly",
    "required",
    "value"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/switch/dist/index.mjs [app-client] (ecmascript) <export anatomy as switchAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "switchAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$switch$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$switch$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/switch/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/avatar/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/avatar.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("avatar").parts("root", "image", "fallback");
var parts = anatomy.build();
// src/avatar.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "avatar:".concat(ctx.id);
};
var getImageId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_image;
    return (_ctx_ids_image = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.image) !== null && _ctx_ids_image !== void 0 ? _ctx_ids_image : "avatar:".concat(ctx.id, ":image");
};
var getFallbackId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_fallback;
    return (_ctx_ids_fallback = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.fallback) !== null && _ctx_ids_fallback !== void 0 ? _ctx_ids_fallback : "avatar:".concat(ctx.id, ":fallback");
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getImageEl = (ctx)=>ctx.getById(getImageId(ctx));
// src/avatar.connect.ts
function connect(service, normalize) {
    const { state, send, prop, scope } = service;
    const loaded = state.matches("loaded");
    return {
        loaded,
        setSrc (src) {
            const img = getImageEl(scope);
            img === null || img === void 0 ? void 0 : img.setAttribute("src", src);
        },
        setLoaded () {
            send({
                type: "img.loaded",
                src: "api"
            });
        },
        setError () {
            send({
                type: "img.error",
                src: "api"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                dir: prop("dir"),
                id: getRootId(scope)
            });
        },
        getImageProps () {
            return normalize.img({
                ...parts.image.attrs,
                hidden: !loaded,
                dir: prop("dir"),
                id: getImageId(scope),
                "data-state": loaded ? "visible" : "hidden",
                onLoad () {
                    send({
                        type: "img.loaded",
                        src: "element"
                    });
                },
                onError () {
                    send({
                        type: "img.error",
                        src: "element"
                    });
                }
            });
        },
        getFallbackProps () {
            return normalize.element({
                ...parts.fallback.attrs,
                dir: prop("dir"),
                id: getFallbackId(scope),
                hidden: loaded,
                "data-state": loaded ? "hidden" : "visible"
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    initialState () {
        return "loading";
    },
    effects: [
        "trackImageRemoval",
        "trackSrcChange"
    ],
    on: {
        "src.change": {
            target: "loading"
        },
        "img.unmount": {
            target: "error"
        }
    },
    states: {
        loading: {
            entry: [
                "checkImageStatus"
            ],
            on: {
                "img.loaded": {
                    target: "loaded",
                    actions: [
                        "invokeOnLoad"
                    ]
                },
                "img.error": {
                    target: "error",
                    actions: [
                        "invokeOnError"
                    ]
                }
            }
        },
        error: {
            on: {
                "img.loaded": {
                    target: "loaded",
                    actions: [
                        "invokeOnLoad"
                    ]
                }
            }
        },
        loaded: {
            on: {
                "img.error": {
                    target: "error",
                    actions: [
                        "invokeOnError"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            invokeOnLoad (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onStatusChange")) === null || _prop === void 0 ? void 0 : _prop({
                    status: "loaded"
                });
            },
            invokeOnError (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onStatusChange")) === null || _prop === void 0 ? void 0 : _prop({
                    status: "error"
                });
            },
            checkImageStatus (param) {
                let { send, scope } = param;
                const imageEl = getImageEl(scope);
                if (!(imageEl === null || imageEl === void 0 ? void 0 : imageEl.complete)) return;
                const type = hasLoaded(imageEl) ? "img.loaded" : "img.error";
                send({
                    type,
                    src: "ssr"
                });
            }
        },
        effects: {
            trackImageRemoval (param) {
                let { send, scope } = param;
                const rootEl = getRootEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observeChildren"])(rootEl, {
                    callback (records) {
                        const removedNodes = Array.from(records[0].removedNodes);
                        const removed = removedNodes.find((node)=>node.nodeType === Node.ELEMENT_NODE && node.matches("[data-scope=avatar][data-part=image]"));
                        if (removed) {
                            send({
                                type: "img.unmount"
                            });
                        }
                    }
                });
            },
            trackSrcChange (param) {
                let { send, scope } = param;
                const imageEl = getImageEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observeAttributes"])(imageEl, {
                    attributes: [
                        "src",
                        "srcset"
                    ],
                    callback () {
                        send({
                            type: "src.change"
                        });
                    }
                });
            }
        }
    }
});
function hasLoaded(image) {
    return image.complete && image.naturalWidth !== 0 && image.naturalHeight !== 0;
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "dir",
    "id",
    "ids",
    "onStatusChange",
    "getRootNode"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/avatar/dist/index.mjs [app-client] (ecmascript) <export anatomy as avatarAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "avatarAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$avatar$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$avatar$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/avatar/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/checkbox/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/focus-visible/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
// src/checkbox.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("checkbox").parts("root", "label", "control", "indicator");
var parts = anatomy.build();
// src/checkbox.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "checkbox:".concat(ctx.id);
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "checkbox:".concat(ctx.id, ":label");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "checkbox:".concat(ctx.id, ":control");
};
var getHiddenInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_hiddenInput;
    return (_ctx_ids_hiddenInput = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.hiddenInput) !== null && _ctx_ids_hiddenInput !== void 0 ? _ctx_ids_hiddenInput : "checkbox:".concat(ctx.id, ":input");
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getHiddenInputEl = (ctx)=>ctx.getById(getHiddenInputId(ctx));
// src/checkbox.connect.ts
function connect(service, normalize) {
    const { send, context, prop, computed, scope } = service;
    const disabled = prop("disabled");
    const readOnly = prop("readOnly");
    const invalid = prop("invalid");
    const focused = !disabled && context.get("focused");
    const focusVisible = !disabled && context.get("focusVisible");
    const checked = computed("checked");
    const indeterminate = computed("indeterminate");
    const dataAttrs = {
        "data-active": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("active")),
        "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
        "data-focus-visible": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focusVisible),
        "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(readOnly),
        "data-hover": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("hovered")),
        "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
        "data-state": indeterminate ? "indeterminate" : checked ? "checked" : "unchecked",
        "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid)
    };
    return {
        checked,
        disabled,
        indeterminate,
        focused,
        checkedState: checked,
        setChecked (checked2) {
            send({
                type: "CHECKED.SET",
                checked: checked2,
                isTrusted: false
            });
        },
        toggleChecked () {
            send({
                type: "CHECKED.TOGGLE",
                checked,
                isTrusted: false
            });
        },
        getRootProps () {
            return normalize.label({
                ...parts.root.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                id: getRootId(scope),
                htmlFor: getHiddenInputId(scope),
                onPointerMove () {
                    if (disabled) return;
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            hovered: true
                        }
                    });
                },
                onPointerLeave () {
                    if (disabled) return;
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            hovered: false
                        }
                    });
                },
                onClick (event) {
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    if (target === getHiddenInputEl(scope)) {
                        event.stopPropagation();
                    }
                }
            });
        },
        getLabelProps () {
            return normalize.element({
                ...parts.label.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                id: getLabelId(scope)
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                id: getControlId(scope),
                "aria-hidden": true
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                ...dataAttrs,
                dir: prop("dir"),
                hidden: !indeterminate && !checked
            });
        },
        getHiddenInputProps () {
            return normalize.input({
                id: getHiddenInputId(scope),
                type: "checkbox",
                required: prop("required"),
                defaultChecked: checked,
                disabled,
                "aria-labelledby": getLabelId(scope),
                "aria-invalid": invalid,
                name: prop("name"),
                form: prop("form"),
                value: prop("value"),
                style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visuallyHiddenStyle"],
                onFocus () {
                    const focusVisible2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusVisible"])();
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            focused: true,
                            focusVisible: focusVisible2
                        }
                    });
                },
                onBlur () {
                    send({
                        type: "CONTEXT.SET",
                        context: {
                            focused: false,
                            focusVisible: false
                        }
                    });
                },
                onClick (event) {
                    if (readOnly) {
                        event.preventDefault();
                        return;
                    }
                    const checked2 = event.currentTarget.checked;
                    send({
                        type: "CHECKED.SET",
                        checked: checked2,
                        isTrusted: true
                    });
                }
            });
        }
    };
}
var { not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            value: "on",
            ...props2,
            defaultChecked: !!props2.defaultChecked
        };
    },
    initialState () {
        return "ready";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            checked: bindable(()=>({
                    defaultValue: prop("defaultChecked"),
                    value: prop("checked"),
                    onChange (checked) {
                        var _prop;
                        (_prop = prop("onCheckedChange")) === null || _prop === void 0 ? void 0 : _prop({
                            checked
                        });
                    }
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                })),
            focusVisible: bindable(()=>({
                    defaultValue: false
                })),
            active: bindable(()=>({
                    defaultValue: false
                })),
            focused: bindable(()=>({
                    defaultValue: false
                })),
            hovered: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    watch (param) {
        let { track, context, prop, action } = param;
        track([
            ()=>prop("disabled")
        ], ()=>{
            action([
                "removeFocusIfNeeded"
            ]);
        });
        track([
            ()=>context.get("checked")
        ], ()=>{
            action([
                "syncInputElement"
            ]);
        });
    },
    effects: [
        "trackFormControlState",
        "trackPressEvent",
        "trackFocusVisible"
    ],
    on: {
        "CHECKED.TOGGLE": [
            {
                guard: not("isTrusted"),
                actions: [
                    "toggleChecked",
                    "dispatchChangeEvent"
                ]
            },
            {
                actions: [
                    "toggleChecked"
                ]
            }
        ],
        "CHECKED.SET": [
            {
                guard: not("isTrusted"),
                actions: [
                    "setChecked",
                    "dispatchChangeEvent"
                ]
            },
            {
                actions: [
                    "setChecked"
                ]
            }
        ],
        "CONTEXT.SET": {
            actions: [
                "setContext"
            ]
        }
    },
    computed: {
        indeterminate: (param)=>{
            let { context } = param;
            return isIndeterminate(context.get("checked"));
        },
        checked: (param)=>{
            let { context } = param;
            return isChecked(context.get("checked"));
        },
        disabled: (param)=>{
            let { context, prop } = param;
            return !!prop("disabled") || context.get("fieldsetDisabled");
        }
    },
    states: {
        ready: {}
    },
    implementations: {
        guards: {
            isTrusted: (param)=>{
                let { event } = param;
                return !!event.isTrusted;
            }
        },
        effects: {
            trackPressEvent (param) {
                let { context, computed, scope } = param;
                if (computed("disabled")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackPress"])({
                    pointerNode: getRootEl(scope),
                    keyboardNode: getHiddenInputEl(scope),
                    isValidKey: (event)=>event.key === " ",
                    onPress: ()=>context.set("active", false),
                    onPressStart: ()=>context.set("active", true),
                    onPressEnd: ()=>context.set("active", false)
                });
            },
            trackFocusVisible (param) {
                let { computed, scope } = param;
                var _scope_getRootNode;
                if (computed("disabled")) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFocusVisible"])({
                    root: (_scope_getRootNode = scope.getRootNode) === null || _scope_getRootNode === void 0 ? void 0 : _scope_getRootNode.call(scope)
                });
            },
            trackFormControlState (param) {
                let { context, scope } = param;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(getHiddenInputEl(scope), {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        context.set("checked", context.initial("checked"));
                    }
                });
            }
        },
        actions: {
            setContext (param) {
                let { context, event } = param;
                for(const key in event.context){
                    context.set(key, event.context[key]);
                }
            },
            syncInputElement (param) {
                let { context, computed, scope } = param;
                const inputEl = getHiddenInputEl(scope);
                if (!inputEl) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementChecked"])(inputEl, computed("checked"));
                inputEl.indeterminate = isIndeterminate(context.get("checked"));
            },
            removeFocusIfNeeded (param) {
                let { context, prop } = param;
                if (prop("disabled") && context.get("focused")) {
                    context.set("focused", false);
                    context.set("focusVisible", false);
                }
            },
            setChecked (param) {
                let { context, event } = param;
                context.set("checked", event.checked);
            },
            toggleChecked (param) {
                let { context, computed } = param;
                const checked = isIndeterminate(computed("checked")) ? true : !computed("checked");
                context.set("checked", checked);
            },
            dispatchChangeEvent (param) {
                let { computed, scope } = param;
                queueMicrotask(()=>{
                    const inputEl = getHiddenInputEl(scope);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dispatchInputCheckedEvent"])(inputEl, {
                        checked: computed("checked")
                    });
                });
            }
        }
    }
});
function isIndeterminate(checked) {
    return checked === "indeterminate";
}
function isChecked(checked) {
    return isIndeterminate(checked) ? false : !!checked;
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "defaultChecked",
    "checked",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "name",
    "onCheckedChange",
    "readOnly",
    "required",
    "value"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/collapsible/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/collapsible.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("collapsible").parts("root", "trigger", "content", "indicator");
var parts = anatomy.build();
// src/collapsible.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "collapsible:".concat(ctx.id);
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "collapsible:".concat(ctx.id, ":content");
};
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "collapsible:".concat(ctx.id, ":trigger");
};
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
// src/collapsible.connect.ts
function connect(service, normalize) {
    const { state, send, context, scope, prop } = service;
    const visible = state.matches("open") || state.matches("closing");
    const open = state.matches("open");
    const { width, height } = context.get("size");
    const disabled = !!prop("disabled");
    const skip = !context.get("initial") && open;
    const dir = "ltr";
    return {
        disabled,
        visible,
        open,
        measureSize () {
            send({
                type: "size.measure"
            });
        },
        setOpen (nextOpen) {
            const open2 = state.matches("open");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "open" : "close"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                "data-state": open ? "open" : "closed",
                dir,
                id: getRootId(scope)
            });
        },
        getContentProps () {
            return normalize.element({
                ...parts.content.attrs,
                "data-collapsible": "",
                "data-state": skip ? void 0 : open ? "open" : "closed",
                id: getContentId(scope),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                hidden: !visible,
                style: {
                    "--height": height != null ? "".concat(height, "px") : void 0,
                    "--width": width != null ? "".concat(width, "px") : void 0
                }
            });
        },
        getTriggerProps () {
            return normalize.element({
                ...parts.trigger.attrs,
                id: getTriggerId(scope),
                dir,
                type: "button",
                "data-state": open ? "open" : "closed",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "aria-controls": getContentId(scope),
                "aria-expanded": visible || false,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    send({
                        type: open ? "close" : "open"
                    });
                }
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                dir,
                "data-state": open ? "open" : "closed",
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled)
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "open" : "closed";
    },
    context (param) {
        let { bindable } = param;
        return {
            size: bindable(()=>({
                    defaultValue: {
                        height: 0,
                        width: 0
                    },
                    sync: true
                })),
            initial: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    refs () {
        return {
            cleanup: void 0,
            stylesRef: void 0
        };
    },
    watch (param) {
        let { track, prop, action } = param;
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "setInitial",
                "computeSize",
                "toggleVisibility"
            ]);
        });
    },
    exit: [
        "clearInitial",
        "cleanupNode"
    ],
    states: {
        closed: {
            on: {
                "controlled.open": {
                    target: "open"
                },
                open: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitial",
                            "computeSize",
                            "invokeOnOpen"
                        ]
                    }
                ]
            }
        },
        closing: {
            effects: [
                "trackExitAnimation"
            ],
            on: {
                "controlled.close": {
                    target: "closed"
                },
                "controlled.open": {
                    target: "open"
                },
                open: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setInitial",
                            "invokeOnOpen"
                        ]
                    }
                ],
                close: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnExitComplete"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "setInitial",
                            "computeSize",
                            "invokeOnExitComplete"
                        ]
                    }
                ],
                "animation.end": {
                    target: "closed",
                    actions: [
                        "invokeOnExitComplete",
                        "clearInitial"
                    ]
                }
            }
        },
        open: {
            effects: [
                "trackEnterAnimation"
            ],
            on: {
                "controlled.close": {
                    target: "closing"
                },
                close: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closing",
                        actions: [
                            "setInitial",
                            "computeSize",
                            "invokeOnClose"
                        ]
                    }
                ],
                "size.measure": {
                    actions: [
                        "measureSize"
                    ]
                },
                "animation.end": {
                    actions: [
                        "clearInitial"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") != void 0;
            }
        },
        effects: {
            trackEnterAnimation: (param)=>{
                let { send, scope } = param;
                let cleanup;
                const rafCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const contentEl = getContentEl(scope);
                    if (!contentEl) return;
                    const animationName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(contentEl).animationName;
                    const hasNoAnimation = !animationName || animationName === "none";
                    if (hasNoAnimation) {
                        send({
                            type: "animation.end"
                        });
                        return;
                    }
                    const onEnd = (event)=>{
                        const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                        if (target === contentEl) {
                            send({
                                type: "animation.end"
                            });
                        }
                    };
                    contentEl.addEventListener("animationend", onEnd);
                    cleanup = ()=>{
                        contentEl.removeEventListener("animationend", onEnd);
                    };
                });
                return ()=>{
                    rafCleanup();
                    cleanup === null || cleanup === void 0 ? void 0 : cleanup();
                };
            },
            trackExitAnimation: (param)=>{
                let { send, scope } = param;
                let cleanup;
                const rafCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const contentEl = getContentEl(scope);
                    if (!contentEl) return;
                    const animationName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(contentEl).animationName;
                    const hasNoAnimation = !animationName || animationName === "none";
                    if (hasNoAnimation) {
                        send({
                            type: "animation.end"
                        });
                        return;
                    }
                    const onEnd = (event)=>{
                        const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                        if (target === contentEl) {
                            send({
                                type: "animation.end"
                            });
                        }
                    };
                    contentEl.addEventListener("animationend", onEnd);
                    const restoreStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setStyle"])(contentEl, {
                        animationFillMode: "forwards"
                    });
                    cleanup = ()=>{
                        contentEl.removeEventListener("animationend", onEnd);
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextTick"])(()=>restoreStyles());
                    };
                });
                return ()=>{
                    rafCleanup();
                    cleanup === null || cleanup === void 0 ? void 0 : cleanup();
                };
            }
        },
        actions: {
            setInitial: (param)=>{
                let { context, flush } = param;
                flush(()=>{
                    context.set("initial", true);
                });
            },
            clearInitial: (param)=>{
                let { context } = param;
                context.set("initial", false);
            },
            cleanupNode: (param)=>{
                let { refs } = param;
                refs.set("stylesRef", null);
            },
            measureSize: (param)=>{
                let { context, scope } = param;
                const contentEl = getContentEl(scope);
                if (!contentEl) return;
                const { height, width } = contentEl.getBoundingClientRect();
                context.set("size", {
                    height,
                    width
                });
            },
            computeSize: (param)=>{
                let { refs, scope, context } = param;
                var _refs_get;
                (_refs_get = refs.get("cleanup")) === null || _refs_get === void 0 ? void 0 : _refs_get();
                const rafCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const contentEl = getContentEl(scope);
                    if (!contentEl) return;
                    const hidden = contentEl.hidden;
                    contentEl.style.animationName = "none";
                    contentEl.style.animationDuration = "0s";
                    contentEl.hidden = false;
                    const rect = contentEl.getBoundingClientRect();
                    context.set("size", {
                        height: rect.height,
                        width: rect.width
                    });
                    if (context.get("initial")) {
                        contentEl.style.animationName = "";
                        contentEl.style.animationDuration = "";
                    }
                    contentEl.hidden = hidden;
                });
                refs.set("cleanup", rafCleanup);
            },
            invokeOnOpen: (param)=>{
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true
                });
            },
            invokeOnClose: (param)=>{
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false
                });
            },
            invokeOnExitComplete: (param)=>{
                let { prop } = param;
                var _prop;
                (_prop = prop("onExitComplete")) === null || _prop === void 0 ? void 0 : _prop();
            },
            toggleVisibility: (param)=>{
                let { prop, send } = param;
                send({
                    type: prop("open") ? "controlled.open" : "controlled.close"
                });
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "dir",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "onExitComplete",
    "onOpenChange",
    "defaultOpen",
    "open"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/collapsible/dist/index.mjs [app-client] (ecmascript) <export anatomy as collapsibleAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "collapsibleAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collapsible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$collapsible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/collapsible/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/hover-card/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dismissable/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
// src/hover-card.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("hoverCard").parts("arrow", "arrowTip", "trigger", "positioner", "content");
var parts = anatomy.build();
// src/hover-card.dom.ts
var getTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_trigger;
    return (_ctx_ids_trigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.trigger) !== null && _ctx_ids_trigger !== void 0 ? _ctx_ids_trigger : "hover-card:".concat(ctx.id, ":trigger");
};
var getContentId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_content;
    return (_ctx_ids_content = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.content) !== null && _ctx_ids_content !== void 0 ? _ctx_ids_content : "hover-card:".concat(ctx.id, ":content");
};
var getPositionerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_positioner;
    return (_ctx_ids_positioner = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.positioner) !== null && _ctx_ids_positioner !== void 0 ? _ctx_ids_positioner : "hover-card:".concat(ctx.id, ":popper");
};
var getArrowId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_arrow;
    return (_ctx_ids_arrow = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.arrow) !== null && _ctx_ids_arrow !== void 0 ? _ctx_ids_arrow : "hover-card:".concat(ctx.id, ":arrow");
};
var getTriggerEl = (ctx)=>ctx.getById(getTriggerId(ctx));
var getContentEl = (ctx)=>ctx.getById(getContentId(ctx));
var getPositionerEl = (ctx)=>ctx.getById(getPositionerId(ctx));
// src/hover-card.connect.ts
function connect(service, normalize) {
    const { state, send, prop, context, scope } = service;
    const open = state.hasTag("open");
    const popperStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementStyles"])({
        ...prop("positioning"),
        placement: context.get("currentPlacement")
    });
    return {
        open,
        setOpen (nextOpen) {
            const open2 = state.hasTag("open");
            if (open2 === nextOpen) return;
            if (prop("disabled")) return;
            send({
                type: nextOpen ? "OPEN" : "CLOSE"
            });
        },
        reposition () {
            let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            send({
                type: "POSITIONING.SET",
                options
            });
        },
        getArrowProps () {
            return normalize.element({
                id: getArrowId(scope),
                ...parts.arrow.attrs,
                dir: prop("dir"),
                style: popperStyles.arrow
            });
        },
        getArrowTipProps () {
            return normalize.element({
                ...parts.arrowTip.attrs,
                dir: prop("dir"),
                style: popperStyles.arrowTip
            });
        },
        getTriggerProps () {
            return normalize.element({
                ...parts.trigger.attrs,
                dir: prop("dir"),
                "data-placement": context.get("currentPlacement"),
                id: getTriggerId(scope),
                "data-state": open ? "open" : "closed",
                onPointerEnter (event) {
                    if (event.pointerType === "touch") return;
                    if (prop("disabled")) return;
                    send({
                        type: "POINTER_ENTER",
                        src: "trigger"
                    });
                },
                onPointerLeave (event) {
                    if (event.pointerType === "touch") return;
                    if (prop("disabled")) return;
                    send({
                        type: "POINTER_LEAVE",
                        src: "trigger"
                    });
                },
                onFocus () {
                    if (prop("disabled")) return;
                    send({
                        type: "TRIGGER_FOCUS"
                    });
                },
                onBlur () {
                    if (prop("disabled")) return;
                    send({
                        type: "TRIGGER_BLUR"
                    });
                }
            });
        },
        getPositionerProps () {
            return normalize.element({
                id: getPositionerId(scope),
                ...parts.positioner.attrs,
                dir: prop("dir"),
                style: popperStyles.floating
            });
        },
        getContentProps () {
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: getContentId(scope),
                hidden: !open,
                tabIndex: -1,
                "data-state": open ? "open" : "closed",
                "data-placement": context.get("currentPlacement"),
                onPointerEnter (event) {
                    if (event.pointerType === "touch") return;
                    if (prop("disabled")) return;
                    send({
                        type: "POINTER_ENTER",
                        src: "content"
                    });
                },
                onPointerLeave (event) {
                    if (event.pointerType === "touch") return;
                    if (prop("disabled")) return;
                    send({
                        type: "POINTER_LEAVE",
                        src: "content"
                    });
                }
            });
        }
    };
}
var { not, and } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        return {
            disabled: false,
            openDelay: 700,
            closeDelay: 300,
            ...props2,
            positioning: {
                placement: "bottom",
                ...props2.positioning
            }
        };
    },
    initialState (param) {
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "open" : "closed";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            open: bindable(()=>({
                    defaultValue: prop("defaultOpen"),
                    value: prop("open"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                            open: value
                        });
                    }
                })),
            currentPlacement: bindable(()=>({
                    defaultValue: void 0
                })),
            isPointer: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    watch (param) {
        let { track, context, action, prop, send } = param;
        track([
            ()=>prop("disabled")
        ], ()=>{
            if (prop("disabled")) {
                send({
                    type: "CLOSE",
                    src: "disabled.change"
                });
            }
        });
        track([
            ()=>context.get("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
    },
    states: {
        closed: {
            tags: [
                "closed"
            ],
            entry: [
                "clearIsPointer"
            ],
            on: {
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                POINTER_ENTER: {
                    target: "opening",
                    actions: [
                        "setIsPointer"
                    ]
                },
                TRIGGER_FOCUS: {
                    target: "opening"
                },
                OPEN: {
                    target: "opening"
                }
            }
        },
        opening: {
            tags: [
                "closed"
            ],
            effects: [
                "waitForOpenDelay"
            ],
            on: {
                OPEN_DELAY: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                "CONTROLLED.CLOSE": {
                    target: "closed"
                },
                POINTER_LEAVE: [
                    {
                        guard: "isOpenControlled",
                        // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
                        actions: [
                            "invokeOnClose",
                            "toggleVisibility"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                TRIGGER_BLUR: [
                    {
                        guard: and("isOpenControlled", not("isPointer")),
                        // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
                        actions: [
                            "invokeOnClose",
                            "toggleVisibility"
                        ]
                    },
                    {
                        guard: not("isPointer"),
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
                        actions: [
                            "invokeOnClose",
                            "toggleVisibility"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ]
            }
        },
        open: {
            tags: [
                "open"
            ],
            effects: [
                "trackDismissableElement",
                "trackPositioning"
            ],
            on: {
                "CONTROLLED.CLOSE": {
                    target: "closed"
                },
                POINTER_ENTER: {
                    actions: [
                        "setIsPointer"
                    ]
                },
                POINTER_LEAVE: {
                    target: "closing"
                },
                CLOSE: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                TRIGGER_BLUR: [
                    {
                        guard: and("isOpenControlled", not("isPointer")),
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        guard: not("isPointer"),
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "POSITIONING.SET": {
                    actions: [
                        "reposition"
                    ]
                }
            }
        },
        closing: {
            tags: [
                "open"
            ],
            effects: [
                "trackPositioning",
                "waitForCloseDelay"
            ],
            on: {
                CLOSE_DELAY: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "CONTROLLED.CLOSE": {
                    target: "closed"
                },
                "CONTROLLED.OPEN": {
                    target: "open"
                },
                POINTER_ENTER: {
                    target: "open",
                    // no need to invokeOnOpen here because it's still open (but about to close)
                    actions: [
                        "setIsPointer"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            isPointer: (param)=>{
                let { context } = param;
                return !!context.get("isPointer");
            },
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") != null;
            }
        },
        effects: {
            waitForOpenDelay (param) {
                let { send, prop } = param;
                const id = setTimeout(()=>{
                    send({
                        type: "OPEN_DELAY"
                    });
                }, prop("openDelay"));
                return ()=>clearTimeout(id);
            },
            waitForCloseDelay (param) {
                let { send, prop } = param;
                const id = setTimeout(()=>{
                    send({
                        type: "CLOSE_DELAY"
                    });
                }, prop("closeDelay"));
                return ()=>clearTimeout(id);
            },
            trackPositioning (param) {
                let { context, prop, scope } = param;
                if (!context.get("currentPlacement")) {
                    context.set("currentPlacement", prop("positioning").placement);
                }
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(getTriggerEl(scope), getPositionerEl2, {
                    ...prop("positioning"),
                    defer: true,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            trackDismissableElement (param) {
                let { send, scope, prop } = param;
                const getContentEl2 = ()=>getContentEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dismissable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackDismissableElement"])(getContentEl2, {
                    defer: true,
                    exclude: [
                        getTriggerEl(scope)
                    ],
                    onDismiss () {
                        send({
                            type: "CLOSE",
                            src: "interact-outside"
                        });
                    },
                    onInteractOutside: prop("onInteractOutside"),
                    onPointerDownOutside: prop("onPointerDownOutside"),
                    onFocusOutside (event) {
                        var _prop;
                        event.preventDefault();
                        (_prop = prop("onFocusOutside")) === null || _prop === void 0 ? void 0 : _prop(event);
                    }
                });
            }
        },
        actions: {
            invokeOnClose (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false
                });
            },
            invokeOnOpen (param) {
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true
                });
            },
            setIsPointer (param) {
                let { context } = param;
                context.set("isPointer", true);
            },
            clearIsPointer (param) {
                let { context } = param;
                context.set("isPointer", false);
            },
            reposition (param) {
                let { context, prop, scope, event } = param;
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(getTriggerEl(scope), getPositionerEl2, {
                    ...prop("positioning"),
                    ...event.options,
                    defer: true,
                    listeners: false,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            toggleVisibility (param) {
                let { prop, event, send } = param;
                queueMicrotask(()=>{
                    send({
                        type: prop("open") ? "CONTROLLED.OPEN" : "CONTROLLED.CLOSE",
                        previousEvent: event
                    });
                });
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "closeDelay",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "disabled",
    "onOpenChange",
    "defaultOpen",
    "open",
    "openDelay",
    "positioning",
    "onInteractOutside",
    "onPointerDownOutside",
    "onFocusOutside"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/hover-card/dist/index.mjs [app-client] (ecmascript) <export anatomy as hoverCardAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "hoverCardAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$hover$2d$card$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$hover$2d$card$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/hover-card/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/number-input/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$internationalized$2f$number$2f$dist$2f$NumberParser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@internationalized/number/dist/NumberParser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
// src/number-input.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("numberInput").parts("root", "label", "input", "control", "valueText", "incrementTrigger", "decrementTrigger", "scrubber");
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "number-input:".concat(ctx.id);
};
var getInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_input;
    return (_ctx_ids_input = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.input) !== null && _ctx_ids_input !== void 0 ? _ctx_ids_input : "number-input:".concat(ctx.id, ":input");
};
var getIncrementTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_incrementTrigger;
    return (_ctx_ids_incrementTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.incrementTrigger) !== null && _ctx_ids_incrementTrigger !== void 0 ? _ctx_ids_incrementTrigger : "number-input:".concat(ctx.id, ":inc");
};
var getDecrementTriggerId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_decrementTrigger;
    return (_ctx_ids_decrementTrigger = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.decrementTrigger) !== null && _ctx_ids_decrementTrigger !== void 0 ? _ctx_ids_decrementTrigger : "number-input:".concat(ctx.id, ":dec");
};
var getScrubberId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_scrubber;
    return (_ctx_ids_scrubber = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.scrubber) !== null && _ctx_ids_scrubber !== void 0 ? _ctx_ids_scrubber : "number-input:".concat(ctx.id, ":scrubber");
};
var getCursorId = (ctx)=>"number-input:".concat(ctx.id, ":cursor");
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "number-input:".concat(ctx.id, ":label");
};
var getInputEl = (ctx)=>ctx.getById(getInputId(ctx));
var getIncrementTriggerEl = (ctx)=>ctx.getById(getIncrementTriggerId(ctx));
var getDecrementTriggerEl = (ctx)=>ctx.getById(getDecrementTriggerId(ctx));
var getCursorEl = (ctx)=>ctx.getDoc().getElementById(getCursorId(ctx));
var getPressedTriggerEl = (ctx, hint)=>{
    let btnEl = null;
    if (hint === "increment") {
        btnEl = getIncrementTriggerEl(ctx);
    }
    if (hint === "decrement") {
        btnEl = getDecrementTriggerEl(ctx);
    }
    return btnEl;
};
var setupVirtualCursor = (ctx, point)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) return;
    createVirtualCursor(ctx, point);
    return ()=>{
        var _getCursorEl;
        (_getCursorEl = getCursorEl(ctx)) === null || _getCursorEl === void 0 ? void 0 : _getCursorEl.remove();
    };
};
var preventTextSelection = (ctx)=>{
    const doc = ctx.getDoc();
    const html = doc.documentElement;
    const body = doc.body;
    body.style.pointerEvents = "none";
    html.style.userSelect = "none";
    html.style.cursor = "ew-resize";
    return ()=>{
        body.style.pointerEvents = "";
        html.style.userSelect = "";
        html.style.cursor = "";
        if (!html.style.length) {
            html.removeAttribute("style");
        }
        if (!body.style.length) {
            body.removeAttribute("style");
        }
    };
};
var getMousemoveValue = (ctx, opts)=>{
    const { point, isRtl, event } = opts;
    const win = ctx.getWin();
    const x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundToDpr"])(event.movementX, win.devicePixelRatio);
    const y = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundToDpr"])(event.movementY, win.devicePixelRatio);
    let hint = x > 0 ? "increment" : x < 0 ? "decrement" : null;
    if (isRtl && hint === "increment") hint = "decrement";
    if (isRtl && hint === "decrement") hint = "increment";
    const newPoint = {
        x: point.x + x,
        y: point.y + y
    };
    const width = win.innerWidth;
    const half = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundToDpr"])(7.5, win.devicePixelRatio);
    newPoint.x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrap"])(newPoint.x + half, width) - half;
    return {
        hint,
        point: newPoint
    };
};
var createVirtualCursor = (ctx, point)=>{
    const doc = ctx.getDoc();
    const el = doc.createElement("div");
    el.className = "scrubber--cursor";
    el.id = getCursorId(ctx);
    Object.assign(el.style, {
        width: "15px",
        height: "15px",
        position: "fixed",
        pointerEvents: "none",
        left: "0px",
        top: "0px",
        zIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_Z_INDEX"],
        transform: point ? "translate3d(".concat(point.x, "px, ").concat(point.y, "px, 0px)") : void 0,
        willChange: "transform"
    });
    el.innerHTML = '\n      <svg width="46" height="15" style="left: -15.5px; position: absolute; top: 0; filter: drop-shadow(rgba(0, 0, 0, 0.4) 0px 1px 1.1px);">\n        <g transform="translate(2 3)">\n          <path fill-rule="evenodd" d="M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z" style="stroke-width: 2px; stroke: white;"></path>\n          <path fill-rule="evenodd" d="M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z"></path>\n        </g>\n      </svg>';
    doc.body.appendChild(el);
};
// src/number-input.connect.ts
function connect(service, normalize) {
    const { state, send, prop, scope, computed } = service;
    const focused = state.hasTag("focus");
    const disabled = computed("isDisabled");
    const readOnly = prop("readOnly");
    const scrubbing = state.matches("scrubbing");
    const empty = computed("isValueEmpty");
    const invalid = computed("isOutOfRange") || !!prop("invalid");
    const isIncrementDisabled = disabled || !computed("canIncrement") || readOnly;
    const isDecrementDisabled = disabled || !computed("canDecrement") || readOnly;
    const translations = prop("translations");
    return {
        focused,
        invalid,
        empty,
        value: computed("formattedValue"),
        valueAsNumber: computed("valueAsNumber"),
        setValue (value) {
            send({
                type: "VALUE.SET",
                value
            });
        },
        clearValue () {
            send({
                type: "VALUE.CLEAR"
            });
        },
        increment () {
            send({
                type: "VALUE.INCREMENT"
            });
        },
        decrement () {
            send({
                type: "VALUE.DECREMENT"
            });
        },
        setToMax () {
            send({
                type: "VALUE.SET",
                value: prop("max")
            });
        },
        setToMin () {
            send({
                type: "VALUE.SET",
                value: prop("min")
            });
        },
        focus () {
            var _getInputEl;
            (_getInputEl = getInputEl(scope)) === null || _getInputEl === void 0 ? void 0 : _getInputEl.focus();
        },
        getRootProps () {
            return normalize.element({
                id: getRootId(scope),
                ...parts.root.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing)
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing),
                id: getLabelId(scope),
                htmlFor: getInputId(scope)
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                dir: prop("dir"),
                role: "group",
                "aria-disabled": disabled,
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing),
                "aria-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(invalid)
            });
        },
        getValueTextProps () {
            return normalize.element({
                ...parts.valueText.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing)
            });
        },
        getInputProps () {
            return normalize.input({
                ...parts.input.attrs,
                dir: prop("dir"),
                name: prop("name"),
                form: prop("form"),
                id: getInputId(scope),
                role: "spinbutton",
                defaultValue: computed("formattedValue"),
                pattern: prop("formatOptions") ? void 0 : prop("pattern"),
                inputMode: prop("inputMode"),
                "aria-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(invalid),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                disabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                readOnly,
                required: prop("required"),
                autoComplete: "off",
                autoCorrect: "off",
                spellCheck: "false",
                type: "text",
                "aria-roledescription": "numberfield",
                "aria-valuemin": prop("min"),
                "aria-valuemax": prop("max"),
                "aria-valuenow": Number.isNaN(computed("valueAsNumber")) ? void 0 : computed("valueAsNumber"),
                "aria-valuetext": computed("valueText"),
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing),
                onFocus () {
                    send({
                        type: "INPUT.FOCUS"
                    });
                },
                onBlur () {
                    send({
                        type: "INPUT.BLUR"
                    });
                },
                onInput (event) {
                    send({
                        type: "INPUT.CHANGE",
                        target: event.currentTarget,
                        hint: "set"
                    });
                },
                onBeforeInput (event) {
                    try {
                        const { selectionStart, selectionEnd, value } = event.currentTarget;
                        var _event_data;
                        const nextValue = value.slice(0, selectionStart) + ((_event_data = event.data) !== null && _event_data !== void 0 ? _event_data : "") + value.slice(selectionEnd);
                        const isValid = computed("parser").isValidPartialNumber(nextValue);
                        if (!isValid) {
                            event.preventDefault();
                        }
                    } catch (e) {}
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (readOnly) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    const step = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventStep"])(event) * prop("step");
                    const keyMap = {
                        ArrowUp () {
                            send({
                                type: "INPUT.ARROW_UP",
                                step
                            });
                            event.preventDefault();
                        },
                        ArrowDown () {
                            send({
                                type: "INPUT.ARROW_DOWN",
                                step
                            });
                            event.preventDefault();
                        },
                        Home () {
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isModifierKey"])(event)) return;
                            send({
                                type: "INPUT.HOME"
                            });
                            event.preventDefault();
                        },
                        End () {
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isModifierKey"])(event)) return;
                            send({
                                type: "INPUT.END"
                            });
                            event.preventDefault();
                        },
                        Enter () {
                            send({
                                type: "INPUT.ENTER"
                            });
                        }
                    };
                    const exec = keyMap[event.key];
                    exec === null || exec === void 0 ? void 0 : exec(event);
                }
            });
        },
        getDecrementTriggerProps () {
            return normalize.button({
                ...parts.decrementTrigger.attrs,
                dir: prop("dir"),
                id: getDecrementTriggerId(scope),
                disabled: isDecrementDisabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isDecrementDisabled),
                "aria-label": translations.decrementLabel,
                type: "button",
                tabIndex: -1,
                "aria-controls": getInputId(scope),
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing),
                onPointerDown (event) {
                    if (isDecrementDisabled) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    send({
                        type: "TRIGGER.PRESS_DOWN",
                        hint: "decrement",
                        pointerType: event.pointerType
                    });
                    if (event.pointerType === "mouse") {
                        event.preventDefault();
                    }
                    if (event.pointerType === "touch") {
                        var _event_currentTarget;
                        (_event_currentTarget = event.currentTarget) === null || _event_currentTarget === void 0 ? void 0 : _event_currentTarget.focus({
                            preventScroll: true
                        });
                    }
                },
                onPointerUp (event) {
                    send({
                        type: "TRIGGER.PRESS_UP",
                        hint: "decrement",
                        pointerType: event.pointerType
                    });
                },
                onPointerLeave () {
                    if (isDecrementDisabled) return;
                    send({
                        type: "TRIGGER.PRESS_UP",
                        hint: "decrement"
                    });
                }
            });
        },
        getIncrementTriggerProps () {
            return normalize.button({
                ...parts.incrementTrigger.attrs,
                dir: prop("dir"),
                id: getIncrementTriggerId(scope),
                disabled: isIncrementDisabled,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isIncrementDisabled),
                "aria-label": translations.incrementLabel,
                type: "button",
                tabIndex: -1,
                "aria-controls": getInputId(scope),
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing),
                onPointerDown (event) {
                    if (isIncrementDisabled || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    send({
                        type: "TRIGGER.PRESS_DOWN",
                        hint: "increment",
                        pointerType: event.pointerType
                    });
                    if (event.pointerType === "mouse") {
                        event.preventDefault();
                    }
                    if (event.pointerType === "touch") {
                        var _event_currentTarget;
                        (_event_currentTarget = event.currentTarget) === null || _event_currentTarget === void 0 ? void 0 : _event_currentTarget.focus({
                            preventScroll: true
                        });
                    }
                },
                onPointerUp (event) {
                    send({
                        type: "TRIGGER.PRESS_UP",
                        hint: "increment",
                        pointerType: event.pointerType
                    });
                },
                onPointerLeave (event) {
                    send({
                        type: "TRIGGER.PRESS_UP",
                        hint: "increment",
                        pointerType: event.pointerType
                    });
                }
            });
        },
        getScrubberProps () {
            return normalize.element({
                ...parts.scrubber.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                id: getScrubberId(scope),
                role: "presentation",
                "data-scrubbing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(scrubbing),
                onMouseDown (event) {
                    if (disabled) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    const point = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventPoint"])(event);
                    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(event.currentTarget);
                    const dpr = win.devicePixelRatio;
                    point.x = point.x - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundToDpr"])(7.5, dpr);
                    point.y = point.y - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundToDpr"])(7.5, dpr);
                    send({
                        type: "SCRUBBER.PRESS_DOWN",
                        point
                    });
                    event.preventDefault();
                },
                style: {
                    cursor: disabled ? void 0 : "ew-resize"
                }
            });
        }
    };
}
// src/cursor.ts
function recordCursor(inputEl) {
    if (!inputEl || inputEl.ownerDocument.activeElement !== inputEl) return;
    try {
        const { selectionStart: start, selectionEnd: end, value } = inputEl;
        const beforeTxt = value.substring(0, start);
        const afterTxt = value.substring(end);
        return {
            start,
            end,
            value,
            beforeTxt,
            afterTxt
        };
    } catch (e) {}
}
function restoreCursor(inputEl, selection) {
    if (!inputEl || inputEl.ownerDocument.activeElement !== inputEl) return;
    if (!selection) {
        inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length);
        return;
    }
    try {
        const { value } = inputEl;
        const { beforeTxt = "", afterTxt = "", start } = selection;
        let startPos = value.length;
        if (value.endsWith(afterTxt)) {
            startPos = value.length - afterTxt.length;
        } else if (value.startsWith(beforeTxt)) {
            startPos = beforeTxt.length;
        } else if (start != null) {
            const beforeLastChar = beforeTxt[start - 1];
            const newIndex = value.indexOf(beforeLastChar, start - 1);
            if (newIndex !== -1) {
                startPos = newIndex + 1;
            }
        }
        inputEl.setSelectionRange(startPos, startPos);
    } catch (e) {}
}
var createFormatter = function(locale) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return new Intl.NumberFormat(locale, options);
};
var createParser = function(locale) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$internationalized$2f$number$2f$dist$2f$NumberParser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NumberParser"](locale, options);
};
var parseValue = (value, params)=>{
    const { prop, computed } = params;
    if (!prop("formatOptions")) return parseFloat(value);
    if (value === "") return Number.NaN;
    return computed("parser").parse(value);
};
var formatValue = (value, params)=>{
    const { prop, computed } = params;
    if (Number.isNaN(value)) return "";
    if (!prop("formatOptions")) return value.toString();
    return computed("formatter").format(value);
};
var getDefaultStep = (step, formatOptions)=>{
    let defaultStep = step !== void 0 && !Number.isNaN(step) ? step : 1;
    if ((formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.style) === "percent" && (step === void 0 || Number.isNaN(step))) {
        defaultStep = 0.01;
    }
    return defaultStep;
};
// src/number-input.machine.ts
var { choose, guards, createMachine } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setup"])();
var { not, and } = guards;
var machine = createMachine({
    props (param) {
        let { props: props2 } = param;
        const step = getDefaultStep(props2.step, props2.formatOptions);
        return {
            dir: "ltr",
            locale: "en-US",
            focusInputOnChange: true,
            clampValueOnBlur: !props2.allowOverflow,
            allowOverflow: false,
            inputMode: "decimal",
            pattern: "-?[0-9]*(.[0-9]+)?",
            defaultValue: "",
            step,
            min: Number.MIN_SAFE_INTEGER,
            max: Number.MAX_SAFE_INTEGER,
            spinOnPress: true,
            ...props2,
            translations: {
                incrementLabel: "increment value",
                decrementLabel: "decrease value",
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable, getComputed } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        var _prop;
                        const computed = getComputed();
                        const valueAsNumber = parseValue(value, {
                            computed,
                            prop
                        });
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value,
                            valueAsNumber
                        });
                    }
                })),
            hint: bindable(()=>({
                    defaultValue: null
                })),
            scrubberCursorPoint: bindable(()=>({
                    defaultValue: null,
                    hash (value) {
                        return value ? "x:".concat(value.x, ", y:").concat(value.y) : "";
                    }
                })),
            fieldsetDisabled: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    computed: {
        isRtl: (param)=>{
            let { prop } = param;
            return prop("dir") === "rtl";
        },
        valueAsNumber: (param)=>{
            let { context, computed, prop } = param;
            return parseValue(context.get("value"), {
                computed,
                prop
            });
        },
        formattedValue: (param)=>{
            let { computed, prop } = param;
            return formatValue(computed("valueAsNumber"), {
                computed,
                prop
            });
        },
        isAtMin: (param)=>{
            let { computed, prop } = param;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValueAtMin"])(computed("valueAsNumber"), prop("min"));
        },
        isAtMax: (param)=>{
            let { computed, prop } = param;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValueAtMax"])(computed("valueAsNumber"), prop("max"));
        },
        isOutOfRange: (param)=>{
            let { computed, prop } = param;
            return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValueWithinRange"])(computed("valueAsNumber"), prop("min"), prop("max"));
        },
        isValueEmpty: (param)=>{
            let { context } = param;
            return context.get("value") === "";
        },
        isDisabled: (param)=>{
            let { prop, context } = param;
            return !!prop("disabled") || context.get("fieldsetDisabled");
        },
        canIncrement: (param)=>{
            let { prop, computed } = param;
            return prop("allowOverflow") || !computed("isAtMax");
        },
        canDecrement: (param)=>{
            let { prop, computed } = param;
            return prop("allowOverflow") || !computed("isAtMin");
        },
        valueText: (param)=>{
            let { prop, context } = param;
            var _prop_valueText, _prop;
            return (_prop_valueText = (_prop = prop("translations")).valueText) === null || _prop_valueText === void 0 ? void 0 : _prop_valueText.call(_prop, context.get("value"));
        },
        formatter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((param)=>{
            let { prop } = param;
            return [
                prop("locale"),
                prop("formatOptions")
            ];
        }, (locale, formatOptions)=>createFormatter(locale, formatOptions)),
        parser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((param)=>{
            let { prop } = param;
            return [
                prop("locale"),
                prop("formatOptions")
            ];
        }, (locale, formatOptions)=>createParser(locale, formatOptions))
    },
    watch (param) {
        let { track, action, context, computed, prop } = param;
        track([
            ()=>context.get("value"),
            ()=>prop("locale")
        ], ()=>{
            action([
                "syncInputElement"
            ]);
        });
        track([
            ()=>computed("isOutOfRange")
        ], ()=>{
            action([
                "invokeOnInvalid"
            ]);
        });
        track([
            ()=>context.hash("scrubberCursorPoint")
        ], ()=>{
            action([
                "setVirtualCursorPosition"
            ]);
        });
    },
    effects: [
        "trackFormControl"
    ],
    on: {
        "VALUE.SET": {
            actions: [
                "setRawValue"
            ]
        },
        "VALUE.CLEAR": {
            actions: [
                "clearValue"
            ]
        },
        "VALUE.INCREMENT": {
            actions: [
                "increment"
            ]
        },
        "VALUE.DECREMENT": {
            actions: [
                "decrement"
            ]
        }
    },
    states: {
        idle: {
            on: {
                "TRIGGER.PRESS_DOWN": [
                    {
                        guard: "isTouchPointer",
                        target: "before:spin",
                        actions: [
                            "setHint"
                        ]
                    },
                    {
                        target: "before:spin",
                        actions: [
                            "focusInput",
                            "invokeOnFocus",
                            "setHint"
                        ]
                    }
                ],
                "SCRUBBER.PRESS_DOWN": {
                    target: "scrubbing",
                    actions: [
                        "focusInput",
                        "invokeOnFocus",
                        "setHint",
                        "setCursorPoint"
                    ]
                },
                "INPUT.FOCUS": {
                    target: "focused",
                    actions: [
                        "focusInput",
                        "invokeOnFocus"
                    ]
                }
            }
        },
        focused: {
            tags: [
                "focus"
            ],
            effects: [
                "attachWheelListener"
            ],
            on: {
                "TRIGGER.PRESS_DOWN": [
                    {
                        guard: "isTouchPointer",
                        target: "before:spin",
                        actions: [
                            "setHint"
                        ]
                    },
                    {
                        target: "before:spin",
                        actions: [
                            "focusInput",
                            "setHint"
                        ]
                    }
                ],
                "SCRUBBER.PRESS_DOWN": {
                    target: "scrubbing",
                    actions: [
                        "focusInput",
                        "setHint",
                        "setCursorPoint"
                    ]
                },
                "INPUT.ARROW_UP": {
                    actions: [
                        "increment"
                    ]
                },
                "INPUT.ARROW_DOWN": {
                    actions: [
                        "decrement"
                    ]
                },
                "INPUT.HOME": {
                    actions: [
                        "decrementToMin"
                    ]
                },
                "INPUT.END": {
                    actions: [
                        "incrementToMax"
                    ]
                },
                "INPUT.CHANGE": {
                    actions: [
                        "setValue",
                        "setHint"
                    ]
                },
                "INPUT.BLUR": [
                    {
                        guard: and("clampValueOnBlur", not("isInRange")),
                        target: "idle",
                        actions: [
                            "setClampedValue",
                            "clearHint",
                            "invokeOnBlur"
                        ]
                    },
                    {
                        guard: not("isInRange"),
                        target: "idle",
                        actions: [
                            "setFormattedValue",
                            "clearHint",
                            "invokeOnBlur",
                            "invokeOnInvalid"
                        ]
                    },
                    {
                        target: "idle",
                        actions: [
                            "setFormattedValue",
                            "clearHint",
                            "invokeOnBlur"
                        ]
                    }
                ],
                "INPUT.ENTER": {
                    actions: [
                        "setFormattedValue",
                        "clearHint",
                        "invokeOnBlur"
                    ]
                }
            }
        },
        "before:spin": {
            tags: [
                "focus"
            ],
            effects: [
                "trackButtonDisabled",
                "waitForChangeDelay"
            ],
            entry: choose([
                {
                    guard: "isIncrementHint",
                    actions: [
                        "increment"
                    ]
                },
                {
                    guard: "isDecrementHint",
                    actions: [
                        "decrement"
                    ]
                }
            ]),
            on: {
                CHANGE_DELAY: {
                    target: "spinning",
                    guard: and("isInRange", "spinOnPress")
                },
                "TRIGGER.PRESS_UP": [
                    {
                        guard: "isTouchPointer",
                        target: "focused",
                        actions: [
                            "clearHint"
                        ]
                    },
                    {
                        target: "focused",
                        actions: [
                            "focusInput",
                            "clearHint"
                        ]
                    }
                ]
            }
        },
        spinning: {
            tags: [
                "focus"
            ],
            effects: [
                "trackButtonDisabled",
                "spinValue"
            ],
            on: {
                SPIN: [
                    {
                        guard: "isIncrementHint",
                        actions: [
                            "increment"
                        ]
                    },
                    {
                        guard: "isDecrementHint",
                        actions: [
                            "decrement"
                        ]
                    }
                ],
                "TRIGGER.PRESS_UP": {
                    target: "focused",
                    actions: [
                        "focusInput",
                        "clearHint"
                    ]
                }
            }
        },
        scrubbing: {
            tags: [
                "focus"
            ],
            effects: [
                "activatePointerLock",
                "trackMousemove",
                "setupVirtualCursor",
                "preventTextSelection"
            ],
            on: {
                "SCRUBBER.POINTER_UP": {
                    target: "focused",
                    actions: [
                        "focusInput",
                        "clearCursorPoint"
                    ]
                },
                "SCRUBBER.POINTER_MOVE": [
                    {
                        guard: "isIncrementHint",
                        actions: [
                            "increment",
                            "setCursorPoint"
                        ]
                    },
                    {
                        guard: "isDecrementHint",
                        actions: [
                            "decrement",
                            "setCursorPoint"
                        ]
                    }
                ]
            }
        }
    },
    implementations: {
        guards: {
            clampValueOnBlur: (param)=>{
                let { prop } = param;
                return prop("clampValueOnBlur");
            },
            spinOnPress: (param)=>{
                let { prop } = param;
                return !!prop("spinOnPress");
            },
            isInRange: (param)=>{
                let { computed } = param;
                return !computed("isOutOfRange");
            },
            isDecrementHint: (param)=>{
                let { context, event } = param;
                var _event_hint;
                return ((_event_hint = event.hint) !== null && _event_hint !== void 0 ? _event_hint : context.get("hint")) === "decrement";
            },
            isIncrementHint: (param)=>{
                let { context, event } = param;
                var _event_hint;
                return ((_event_hint = event.hint) !== null && _event_hint !== void 0 ? _event_hint : context.get("hint")) === "increment";
            },
            isTouchPointer: (param)=>{
                let { event } = param;
                return event.pointerType === "touch";
            }
        },
        effects: {
            waitForChangeDelay (param) {
                let { send } = param;
                const id = setTimeout(()=>{
                    send({
                        type: "CHANGE_DELAY"
                    });
                }, 300);
                return ()=>clearTimeout(id);
            },
            spinValue (param) {
                let { send } = param;
                const id = setInterval(()=>{
                    send({
                        type: "SPIN"
                    });
                }, 50);
                return ()=>clearInterval(id);
            },
            trackFormControl (param) {
                let { context, scope } = param;
                const inputEl = getInputEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFormControl"])(inputEl, {
                    onFieldsetDisabledChange (disabled) {
                        context.set("fieldsetDisabled", disabled);
                    },
                    onFormReset () {
                        context.set("value", context.initial("value"));
                    }
                });
            },
            setupVirtualCursor (param) {
                let { context, scope } = param;
                const point = context.get("scrubberCursorPoint");
                return setupVirtualCursor(scope, point);
            },
            preventTextSelection (param) {
                let { scope } = param;
                return preventTextSelection(scope);
            },
            trackButtonDisabled (param) {
                let { context, scope, send } = param;
                const hint = context.get("hint");
                const btn = getPressedTriggerEl(scope, hint);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["observeAttributes"])(btn, {
                    attributes: [
                        "disabled"
                    ],
                    callback () {
                        send({
                            type: "TRIGGER.PRESS_UP",
                            src: "attr"
                        });
                    }
                });
            },
            attachWheelListener (param) {
                let { scope, send, prop } = param;
                const inputEl = getInputEl(scope);
                if (!inputEl || !scope.isActiveElement(inputEl) || !prop("allowMouseWheel")) return;
                function onWheel(event) {
                    event.preventDefault();
                    const dir = Math.sign(event.deltaY) * -1;
                    if (dir === 1) {
                        send({
                            type: "VALUE.INCREMENT"
                        });
                    } else if (dir === -1) {
                        send({
                            type: "VALUE.DECREMENT"
                        });
                    }
                }
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(inputEl, "wheel", onWheel, {
                    passive: false
                });
            },
            activatePointerLock (param) {
                let { scope } = param;
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) return;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["requestPointerLock"])(scope.getDoc());
            },
            trackMousemove (param) {
                let { scope, send, context, computed } = param;
                const doc = scope.getDoc();
                function onMousemove(event) {
                    const point = context.get("scrubberCursorPoint");
                    const isRtl = computed("isRtl");
                    const value = getMousemoveValue(scope, {
                        point,
                        isRtl,
                        event
                    });
                    if (!value.hint) return;
                    send({
                        type: "SCRUBBER.POINTER_MOVE",
                        hint: value.hint,
                        point: value.point
                    });
                }
                function onMouseup() {
                    send({
                        type: "SCRUBBER.POINTER_UP"
                    });
                }
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callAll"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "mousemove", onMousemove, false), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "mouseup", onMouseup, false));
            }
        },
        actions: {
            focusInput (param) {
                let { scope, prop } = param;
                if (!prop("focusInputOnChange")) return;
                const inputEl = getInputEl(scope);
                if (scope.isActiveElement(inputEl)) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>inputEl === null || inputEl === void 0 ? void 0 : inputEl.focus({
                        preventScroll: true
                    }));
            },
            increment (param) {
                let { context, event, prop, computed } = param;
                var _event_step;
                let nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["incrementValue"])(computed("valueAsNumber"), (_event_step = event.step) !== null && _event_step !== void 0 ? _event_step : prop("step"));
                if (!prop("allowOverflow")) nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(nextValue, prop("min"), prop("max"));
                context.set("value", formatValue(nextValue, {
                    computed,
                    prop
                }));
            },
            decrement (param) {
                let { context, event, prop, computed } = param;
                var _event_step;
                let nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decrementValue"])(computed("valueAsNumber"), (_event_step = event.step) !== null && _event_step !== void 0 ? _event_step : prop("step"));
                if (!prop("allowOverflow")) nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(nextValue, prop("min"), prop("max"));
                context.set("value", formatValue(nextValue, {
                    computed,
                    prop
                }));
            },
            setClampedValue (param) {
                let { context, prop, computed } = param;
                const nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(computed("valueAsNumber"), prop("min"), prop("max"));
                context.set("value", formatValue(nextValue, {
                    computed,
                    prop
                }));
            },
            setRawValue (param) {
                let { context, event, prop, computed } = param;
                let nextValue = parseValue(event.value, {
                    computed,
                    prop
                });
                if (!prop("allowOverflow")) nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clampValue"])(nextValue, prop("min"), prop("max"));
                context.set("value", formatValue(nextValue, {
                    computed,
                    prop
                }));
            },
            setValue (param) {
                let { context, event } = param;
                var _event_target;
                var _event_target_value;
                const value = (_event_target_value = (_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.value) !== null && _event_target_value !== void 0 ? _event_target_value : event.value;
                context.set("value", value);
            },
            clearValue (param) {
                let { context } = param;
                context.set("value", "");
            },
            incrementToMax (param) {
                let { context, prop, computed } = param;
                const value = formatValue(prop("max"), {
                    computed,
                    prop
                });
                context.set("value", value);
            },
            decrementToMin (param) {
                let { context, prop, computed } = param;
                const value = formatValue(prop("min"), {
                    computed,
                    prop
                });
                context.set("value", value);
            },
            setHint (param) {
                let { context, event } = param;
                context.set("hint", event.hint);
            },
            clearHint (param) {
                let { context } = param;
                context.set("hint", null);
            },
            invokeOnFocus (param) {
                let { computed, prop } = param;
                var _prop;
                (_prop = prop("onFocusChange")) === null || _prop === void 0 ? void 0 : _prop({
                    focused: true,
                    value: computed("formattedValue"),
                    valueAsNumber: computed("valueAsNumber")
                });
            },
            invokeOnBlur (param) {
                let { computed, prop } = param;
                var _prop;
                (_prop = prop("onFocusChange")) === null || _prop === void 0 ? void 0 : _prop({
                    focused: false,
                    value: computed("formattedValue"),
                    valueAsNumber: computed("valueAsNumber")
                });
            },
            invokeOnInvalid (param) {
                let { computed, prop, event } = param;
                var _prop;
                if (event.type === "INPUT.CHANGE") return;
                const reason = computed("valueAsNumber") > prop("max") ? "rangeOverflow" : "rangeUnderflow";
                (_prop = prop("onValueInvalid")) === null || _prop === void 0 ? void 0 : _prop({
                    reason,
                    value: computed("formattedValue"),
                    valueAsNumber: computed("valueAsNumber")
                });
            },
            syncInputElement (param) {
                let { context, event, computed, scope } = param;
                const value = event.type.endsWith("CHANGE") ? context.get("value") : computed("formattedValue");
                const inputEl = getInputEl(scope);
                const sel = recordCursor(inputEl);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(inputEl, value);
                    restoreCursor(inputEl, sel);
                });
            },
            setFormattedValue (param) {
                let { context, computed } = param;
                context.set("value", computed("formattedValue"));
            },
            setCursorPoint (param) {
                let { context, event } = param;
                context.set("scrubberCursorPoint", event.point);
            },
            clearCursorPoint (param) {
                let { context } = param;
                context.set("scrubberCursorPoint", null);
            },
            setVirtualCursorPosition (param) {
                let { context, scope } = param;
                const cursorEl = getCursorEl(scope);
                const point = context.get("scrubberCursorPoint");
                if (!cursorEl || !point) return;
                cursorEl.style.transform = "translate3d(".concat(point.x, "px, ").concat(point.y, "px, 0px)");
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "allowMouseWheel",
    "allowOverflow",
    "clampValueOnBlur",
    "dir",
    "disabled",
    "focusInputOnChange",
    "form",
    "formatOptions",
    "getRootNode",
    "id",
    "ids",
    "inputMode",
    "invalid",
    "locale",
    "max",
    "min",
    "name",
    "onFocusChange",
    "onValueChange",
    "onValueInvalid",
    "pattern",
    "required",
    "readOnly",
    "spinOnPress",
    "step",
    "translations",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/number-input/dist/index.mjs [app-client] (ecmascript) <export anatomy as numberInputAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "numberInputAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$number$2d$input$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$number$2d$input$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/number-input/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/pin-input/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/pin-input.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("pinInput").parts("root", "label", "input", "control");
var parts = anatomy.build();
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "pin-input:".concat(ctx.id);
};
var getInputId = (ctx, id)=>{
    var _ctx_ids_input, _ctx_ids;
    var _ctx_ids_input1;
    return (_ctx_ids_input1 = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : (_ctx_ids_input = _ctx_ids.input) === null || _ctx_ids_input === void 0 ? void 0 : _ctx_ids_input.call(_ctx_ids, id)) !== null && _ctx_ids_input1 !== void 0 ? _ctx_ids_input1 : "pin-input:".concat(ctx.id, ":").concat(id);
};
var getHiddenInputId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_hiddenInput;
    return (_ctx_ids_hiddenInput = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.hiddenInput) !== null && _ctx_ids_hiddenInput !== void 0 ? _ctx_ids_hiddenInput : "pin-input:".concat(ctx.id, ":hidden");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "pin-input:".concat(ctx.id, ":label");
};
var getControlId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_control;
    return (_ctx_ids_control = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.control) !== null && _ctx_ids_control !== void 0 ? _ctx_ids_control : "pin-input:".concat(ctx.id, ":control");
};
var getRootEl = (ctx)=>ctx.getById(getRootId(ctx));
var getInputEls = (ctx)=>{
    const ownerId = CSS.escape(getRootId(ctx));
    const selector = "input[data-ownedby=".concat(ownerId, "]");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getRootEl(ctx), selector);
};
var getInputElAtIndex = (ctx, index)=>getInputEls(ctx)[index];
var getFirstInputEl = (ctx)=>getInputEls(ctx)[0];
var getHiddenInputEl = (ctx)=>ctx.getById(getHiddenInputId(ctx));
var setInputValue = (inputEl, value)=>{
    inputEl.value = value;
    inputEl.setAttribute("value", value);
};
// src/pin-input.utils.ts
var REGEX = {
    numeric: /^[0-9]+$/,
    alphabetic: /^[A-Za-z]+$/,
    alphanumeric: /^[a-zA-Z0-9]+$/i
};
function isValidType(type, value) {
    var _REGEX_type;
    if (!type) return true;
    return !!((_REGEX_type = REGEX[type]) === null || _REGEX_type === void 0 ? void 0 : _REGEX_type.test(value));
}
function isValidValue(value, type, pattern) {
    if (!pattern) return isValidType(type, value);
    const regex = new RegExp(pattern, "g");
    return regex.test(value);
}
// src/pin-input.connect.ts
function connect(service, normalize) {
    const { send, context, computed, prop, scope } = service;
    const complete = computed("isValueComplete");
    const invalid = prop("invalid");
    const translations = prop("translations");
    const focusedIndex = context.get("focusedIndex");
    function focus() {
        var _getFirstInputEl;
        (_getFirstInputEl = getFirstInputEl(scope)) === null || _getFirstInputEl === void 0 ? void 0 : _getFirstInputEl.focus();
    }
    return {
        focus,
        count: context.get("count"),
        items: Array.from({
            length: context.get("count")
        }).map((_, i)=>i),
        value: context.get("value"),
        valueAsString: computed("valueAsString"),
        complete,
        setValue (value) {
            if (!Array.isArray(value)) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["invariant"])("[pin-input/setValue] value must be an array");
            }
            send({
                type: "VALUE.SET",
                value
            });
        },
        clearValue () {
            send({
                type: "VALUE.CLEAR"
            });
        },
        setValueAtIndex (index, value) {
            send({
                type: "VALUE.SET",
                value,
                index
            });
        },
        getRootProps () {
            return normalize.element({
                dir: prop("dir"),
                ...parts.root.attrs,
                id: getRootId(scope),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(complete),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly"))
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                dir: prop("dir"),
                htmlFor: getHiddenInputId(scope),
                id: getLabelId(scope),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(complete),
                "data-readonly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("readOnly")),
                onClick (event) {
                    event.preventDefault();
                    focus();
                }
            });
        },
        getHiddenInputProps () {
            return normalize.input({
                "aria-hidden": true,
                type: "text",
                tabIndex: -1,
                id: getHiddenInputId(scope),
                readOnly: prop("readOnly"),
                disabled: prop("disabled"),
                required: prop("required"),
                name: prop("name"),
                form: prop("form"),
                style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visuallyHiddenStyle"],
                maxLength: computed("valueLength"),
                defaultValue: computed("valueAsString")
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                dir: prop("dir"),
                id: getControlId(scope)
            });
        },
        getInputProps (props2) {
            var _translations_inputLabel;
            const { index } = props2;
            const inputType = prop("type") === "numeric" ? "tel" : "text";
            return normalize.input({
                ...parts.input.attrs,
                dir: prop("dir"),
                disabled: prop("disabled"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(complete),
                id: getInputId(scope, index.toString()),
                "data-index": index,
                "data-ownedby": getRootId(scope),
                "aria-label": translations === null || translations === void 0 ? void 0 : (_translations_inputLabel = translations.inputLabel) === null || _translations_inputLabel === void 0 ? void 0 : _translations_inputLabel.call(translations, index, computed("valueLength")),
                inputMode: prop("otp") || prop("type") === "numeric" ? "numeric" : "text",
                "aria-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ariaAttr"])(invalid),
                "data-invalid": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(invalid),
                type: prop("mask") ? "password" : inputType,
                defaultValue: context.get("value")[index] || "",
                readOnly: prop("readOnly"),
                autoCapitalize: "none",
                autoComplete: prop("otp") ? "one-time-code" : "off",
                placeholder: focusedIndex === index ? "" : prop("placeholder"),
                onBeforeInput (event) {
                    try {
                        const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getBeforeInputValue"])(event);
                        const isValid = isValidValue(value, prop("type"), prop("pattern"));
                        if (!isValid) {
                            send({
                                type: "VALUE.INVALID",
                                value
                            });
                            event.preventDefault();
                        }
                        if (value.length > 2) {
                            event.currentTarget.setSelectionRange(0, 1, "forward");
                        }
                    } catch (e) {}
                },
                onChange (event) {
                    const evt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeEvent"])(event);
                    const { value } = event.currentTarget;
                    if (evt.inputType === "insertFromPaste" || value.length > 2) {
                        send({
                            type: "INPUT.PASTE",
                            value
                        });
                        event.currentTarget.value = value[0];
                        event.preventDefault();
                        return;
                    }
                    if (evt.inputType === "deleteContentBackward") {
                        send({
                            type: "INPUT.BACKSPACE"
                        });
                        return;
                    }
                    send({
                        type: "INPUT.CHANGE",
                        value,
                        index
                    });
                },
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isModifierKey"])(event)) return;
                    const keyMap = {
                        Backspace () {
                            send({
                                type: "INPUT.BACKSPACE"
                            });
                        },
                        Delete () {
                            send({
                                type: "INPUT.DELETE"
                            });
                        },
                        ArrowLeft () {
                            send({
                                type: "INPUT.ARROW_LEFT"
                            });
                        },
                        ArrowRight () {
                            send({
                                type: "INPUT.ARROW_RIGHT"
                            });
                        },
                        Enter () {
                            send({
                                type: "INPUT.ENTER"
                            });
                        }
                    };
                    const exec = keyMap[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir"),
                        orientation: "horizontal"
                    })];
                    if (exec) {
                        exec(event);
                        event.preventDefault();
                    }
                },
                onFocus () {
                    send({
                        type: "INPUT.FOCUS",
                        index
                    });
                },
                onBlur (event) {
                    const target = event.relatedTarget;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHTMLElement"])(target) && target.dataset.ownedby === getRootId(scope)) return;
                    send({
                        type: "INPUT.BLUR",
                        index
                    });
                }
            });
        }
    };
}
var { choose, createMachine } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setup"])();
var machine = createMachine({
    props (param) {
        let { props: props2 } = param;
        return {
            placeholder: "\u25CB",
            otp: false,
            type: "numeric",
            defaultValue: props2.count ? fill([], props2.count) : [],
            ...props2,
            translations: {
                inputLabel: (index, length)=>"pin code ".concat(index + 1, " of ").concat(length),
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    context (param) {
        let { prop, bindable } = param;
        return {
            value: bindable(()=>({
                    value: prop("value"),
                    defaultValue: prop("defaultValue"),
                    isEqual: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"],
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value,
                            valueAsString: value.join("")
                        });
                    }
                })),
            focusedIndex: bindable(()=>({
                    sync: true,
                    defaultValue: -1
                })),
            // TODO: Move this to `props` in next major version
            count: bindable(()=>({
                    defaultValue: prop("count")
                }))
        };
    },
    computed: {
        _value: (param)=>{
            let { context } = param;
            return fill(context.get("value"), context.get("count"));
        },
        valueLength: (param)=>{
            let { computed } = param;
            return computed("_value").length;
        },
        filledValueLength: (param)=>{
            let { computed } = param;
            return computed("_value").filter((v)=>(v === null || v === void 0 ? void 0 : v.trim()) !== "").length;
        },
        isValueComplete: (param)=>{
            let { computed } = param;
            return computed("valueLength") === computed("filledValueLength");
        },
        valueAsString: (param)=>{
            let { computed } = param;
            return computed("_value").join("");
        },
        focusedValue: (param)=>{
            let { computed, context } = param;
            return computed("_value")[context.get("focusedIndex")] || "";
        }
    },
    entry: choose([
        {
            guard: "autoFocus",
            actions: [
                "setInputCount",
                "setFocusIndexToFirst"
            ]
        },
        {
            actions: [
                "setInputCount"
            ]
        }
    ]),
    watch (param) {
        let { action, track, context, computed } = param;
        track([
            ()=>context.get("focusedIndex")
        ], ()=>{
            action([
                "focusInput",
                "selectInputIfNeeded"
            ]);
        });
        track([
            ()=>context.get("value").join(",")
        ], ()=>{
            action([
                "syncInputElements",
                "dispatchInputEvent"
            ]);
        });
        track([
            ()=>computed("isValueComplete")
        ], ()=>{
            action([
                "invokeOnComplete",
                "blurFocusedInputIfNeeded"
            ]);
        });
    },
    on: {
        "VALUE.SET": [
            {
                guard: "hasIndex",
                actions: [
                    "setValueAtIndex"
                ]
            },
            {
                actions: [
                    "setValue"
                ]
            }
        ],
        "VALUE.CLEAR": {
            actions: [
                "clearValue",
                "setFocusIndexToFirst"
            ]
        }
    },
    states: {
        idle: {
            on: {
                "INPUT.FOCUS": {
                    target: "focused",
                    actions: [
                        "setFocusedIndex"
                    ]
                }
            }
        },
        focused: {
            on: {
                "INPUT.CHANGE": {
                    actions: [
                        "setFocusedValue",
                        "syncInputValue",
                        "setNextFocusedIndex"
                    ]
                },
                "INPUT.PASTE": {
                    actions: [
                        "setPastedValue",
                        "setLastValueFocusIndex"
                    ]
                },
                "INPUT.FOCUS": {
                    actions: [
                        "setFocusedIndex"
                    ]
                },
                "INPUT.BLUR": {
                    target: "idle",
                    actions: [
                        "clearFocusedIndex"
                    ]
                },
                "INPUT.DELETE": {
                    guard: "hasValue",
                    actions: [
                        "clearFocusedValue"
                    ]
                },
                "INPUT.ARROW_LEFT": {
                    actions: [
                        "setPrevFocusedIndex"
                    ]
                },
                "INPUT.ARROW_RIGHT": {
                    actions: [
                        "setNextFocusedIndex"
                    ]
                },
                "INPUT.BACKSPACE": [
                    {
                        guard: "hasValue",
                        actions: [
                            "clearFocusedValue"
                        ]
                    },
                    {
                        actions: [
                            "setPrevFocusedIndex",
                            "clearFocusedValue"
                        ]
                    }
                ],
                "INPUT.ENTER": {
                    guard: "isValueComplete",
                    actions: [
                        "requestFormSubmit"
                    ]
                },
                "VALUE.INVALID": {
                    actions: [
                        "invokeOnInvalid"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            autoFocus: (param)=>{
                let { prop } = param;
                return !!prop("autoFocus");
            },
            hasValue: (param)=>{
                let { context } = param;
                return context.get("value")[context.get("focusedIndex")] !== "";
            },
            isValueComplete: (param)=>{
                let { computed } = param;
                return computed("isValueComplete");
            },
            hasIndex: (param)=>{
                let { event } = param;
                return event.index !== void 0;
            }
        },
        actions: {
            dispatchInputEvent (param) {
                let { computed, scope } = param;
                const inputEl = getHiddenInputEl(scope);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dispatchInputValueEvent"])(inputEl, {
                    value: computed("valueAsString")
                });
            },
            setInputCount (param) {
                let { scope, context, prop } = param;
                if (prop("count")) return;
                const inputEls = getInputEls(scope);
                context.set("count", inputEls.length);
            },
            focusInput (param) {
                let { context, scope } = param;
                var _getInputElAtIndex;
                const focusedIndex = context.get("focusedIndex");
                if (focusedIndex === -1) return;
                (_getInputElAtIndex = getInputElAtIndex(scope, focusedIndex)) === null || _getInputElAtIndex === void 0 ? void 0 : _getInputElAtIndex.focus({
                    preventScroll: true
                });
            },
            selectInputIfNeeded (param) {
                let { context, prop, scope } = param;
                const focusedIndex = context.get("focusedIndex");
                if (!prop("selectOnFocus") || focusedIndex === -1) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _getInputElAtIndex;
                    (_getInputElAtIndex = getInputElAtIndex(scope, focusedIndex)) === null || _getInputElAtIndex === void 0 ? void 0 : _getInputElAtIndex.select();
                });
            },
            invokeOnComplete (param) {
                let { computed, prop } = param;
                var _prop;
                if (!computed("isValueComplete")) return;
                (_prop = prop("onValueComplete")) === null || _prop === void 0 ? void 0 : _prop({
                    value: computed("_value"),
                    valueAsString: computed("valueAsString")
                });
            },
            invokeOnInvalid (param) {
                let { context, event, prop } = param;
                var _prop;
                (_prop = prop("onValueInvalid")) === null || _prop === void 0 ? void 0 : _prop({
                    value: event.value,
                    index: context.get("focusedIndex")
                });
            },
            clearFocusedIndex (param) {
                let { context } = param;
                context.set("focusedIndex", -1);
            },
            setFocusedIndex (param) {
                let { context, event } = param;
                context.set("focusedIndex", event.index);
            },
            setValue (param) {
                let { context, event } = param;
                const value = fill(event.value, context.get("count"));
                context.set("value", value);
            },
            setFocusedValue (param) {
                let { context, event, computed, flush } = param;
                const focusedValue = computed("focusedValue");
                const focusedIndex = context.get("focusedIndex");
                const value = getNextValue(focusedValue, event.value);
                flush(()=>{
                    context.set("value", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtIndex"])(computed("_value"), focusedIndex, value));
                });
            },
            revertInputValue (param) {
                let { context, computed, scope } = param;
                const inputEl = getInputElAtIndex(scope, context.get("focusedIndex"));
                setInputValue(inputEl, computed("focusedValue"));
            },
            syncInputValue (param) {
                let { context, event, scope } = param;
                const value = context.get("value");
                const inputEl = getInputElAtIndex(scope, event.index);
                setInputValue(inputEl, value[event.index]);
            },
            syncInputElements (param) {
                let { context, scope } = param;
                const inputEls = getInputEls(scope);
                const value = context.get("value");
                inputEls.forEach((inputEl, index)=>{
                    setInputValue(inputEl, value[index]);
                });
            },
            setPastedValue (param) {
                let { context, event, computed, flush } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const valueAsString = computed("valueAsString");
                    const focusedIndex = context.get("focusedIndex");
                    const valueLength = computed("valueLength");
                    const filledValueLength = computed("filledValueLength");
                    const startIndex = Math.min(focusedIndex, filledValueLength);
                    const left = startIndex > 0 ? valueAsString.substring(0, focusedIndex) : "";
                    const right = event.value.substring(0, valueLength - startIndex);
                    const value = fill("".concat(left).concat(right).split(""), valueLength);
                    flush(()=>{
                        context.set("value", value);
                    });
                });
            },
            setValueAtIndex (param) {
                let { context, event, computed } = param;
                const nextValue = getNextValue(computed("focusedValue"), event.value);
                context.set("value", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtIndex"])(computed("_value"), event.index, nextValue));
            },
            clearValue (param) {
                let { context } = param;
                const nextValue = Array.from({
                    length: context.get("count")
                }).fill("");
                queueMicrotask(()=>{
                    context.set("value", nextValue);
                });
            },
            clearFocusedValue (param) {
                let { context, computed } = param;
                const focusedIndex = context.get("focusedIndex");
                if (focusedIndex === -1) return;
                context.set("value", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtIndex"])(computed("_value"), focusedIndex, ""));
            },
            setFocusIndexToFirst (param) {
                let { context } = param;
                context.set("focusedIndex", 0);
            },
            setNextFocusedIndex (param) {
                let { context, computed } = param;
                context.set("focusedIndex", Math.min(context.get("focusedIndex") + 1, computed("valueLength") - 1));
            },
            setPrevFocusedIndex (param) {
                let { context } = param;
                context.set("focusedIndex", Math.max(context.get("focusedIndex") - 1, 0));
            },
            setLastValueFocusIndex (param) {
                let { context, computed } = param;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    context.set("focusedIndex", Math.min(computed("filledValueLength"), computed("valueLength") - 1));
                });
            },
            blurFocusedInputIfNeeded (param) {
                let { context, prop, scope } = param;
                if (!prop("blurOnComplete")) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    var _getInputElAtIndex;
                    (_getInputElAtIndex = getInputElAtIndex(scope, context.get("focusedIndex"))) === null || _getInputElAtIndex === void 0 ? void 0 : _getInputElAtIndex.blur();
                });
            },
            requestFormSubmit (param) {
                let { computed, prop, scope } = param;
                var _inputEl_form;
                if (!prop("name") || !computed("isValueComplete")) return;
                const inputEl = getHiddenInputEl(scope);
                inputEl === null || inputEl === void 0 ? void 0 : (_inputEl_form = inputEl.form) === null || _inputEl_form === void 0 ? void 0 : _inputEl_form.requestSubmit();
            }
        }
    }
});
function getNextValue(current, next) {
    let nextValue = next;
    if (current[0] === next[0]) nextValue = next[1];
    else if (current[0] === next[1]) nextValue = next[0];
    return nextValue.split("")[nextValue.length - 1];
}
function fill(value, count) {
    return Array.from({
        length: count
    }).fill("").map((v, i)=>value[i] || v);
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "autoFocus",
    "blurOnComplete",
    "count",
    "defaultValue",
    "dir",
    "disabled",
    "form",
    "getRootNode",
    "id",
    "ids",
    "invalid",
    "mask",
    "name",
    "onValueChange",
    "onValueComplete",
    "onValueInvalid",
    "otp",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "selectOnFocus",
    "translations",
    "type",
    "value"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/pin-input/dist/index.mjs [app-client] (ecmascript) <export anatomy as pinInputAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "pinInputAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$pin$2d$input$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$pin$2d$input$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/pin-input/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/progress/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
// src/progress.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("progress").parts("root", "label", "track", "range", "valueText", "view", "circle", "circleTrack", "circleRange");
var parts = anatomy.build();
// src/progress.dom.ts
var getRootId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_root;
    return (_ctx_ids_root = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.root) !== null && _ctx_ids_root !== void 0 ? _ctx_ids_root : "progress-".concat(ctx.id);
};
var getTrackId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_track;
    return (_ctx_ids_track = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.track) !== null && _ctx_ids_track !== void 0 ? _ctx_ids_track : "progress-".concat(ctx.id, "-track");
};
var getLabelId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_label;
    return (_ctx_ids_label = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.label) !== null && _ctx_ids_label !== void 0 ? _ctx_ids_label : "progress-".concat(ctx.id, "-label");
};
var getCircleId = (ctx)=>{
    var _ctx_ids;
    var _ctx_ids_circle;
    return (_ctx_ids_circle = (_ctx_ids = ctx.ids) === null || _ctx_ids === void 0 ? void 0 : _ctx_ids.circle) !== null && _ctx_ids_circle !== void 0 ? _ctx_ids_circle : "progress-".concat(ctx.id, "-circle");
};
// src/progress.connect.ts
function connect(service, normalize) {
    const { context, computed, prop, send, scope } = service;
    const percent = computed("percent");
    const percentAsString = computed("isIndeterminate") ? "" : computed("formatter").format(percent / 100);
    const max = prop("max");
    const min = prop("min");
    const orientation = prop("orientation");
    const translations = prop("translations");
    const indeterminate = computed("isIndeterminate");
    const value = context.get("value");
    var _translations_value;
    const valueAsString = (_translations_value = translations === null || translations === void 0 ? void 0 : translations.value({
        value,
        max,
        percent,
        min,
        formatter: computed("formatter")
    })) !== null && _translations_value !== void 0 ? _translations_value : "";
    const progressState = getProgressState(value, max);
    const progressbarProps = {
        role: "progressbar",
        "aria-label": valueAsString,
        "data-max": max,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value !== null && value !== void 0 ? value : void 0,
        "data-orientation": orientation,
        "data-state": progressState
    };
    const circleProps2 = getCircleProps(service);
    return {
        value,
        valueAsString,
        min,
        max,
        percent,
        percentAsString,
        indeterminate,
        setValue (value2) {
            send({
                type: "VALUE.SET",
                value: value2
            });
        },
        setToMax () {
            send({
                type: "VALUE.SET",
                value: max
            });
        },
        setToMin () {
            send({
                type: "VALUE.SET",
                value: min
            });
        },
        getRootProps () {
            return normalize.element({
                dir: prop("dir"),
                ...parts.root.attrs,
                id: getRootId(scope),
                "data-max": max,
                "data-value": value !== null && value !== void 0 ? value : void 0,
                "data-state": progressState,
                "data-orientation": orientation,
                style: {
                    "--percent": indeterminate ? void 0 : percent
                }
            });
        },
        getLabelProps () {
            return normalize.element({
                dir: prop("dir"),
                id: getLabelId(scope),
                ...parts.label.attrs,
                "data-orientation": orientation
            });
        },
        getValueTextProps () {
            return normalize.element({
                dir: prop("dir"),
                "aria-live": "polite",
                ...parts.valueText.attrs
            });
        },
        getTrackProps () {
            return normalize.element({
                dir: prop("dir"),
                id: getTrackId(scope),
                ...parts.track.attrs,
                ...progressbarProps
            });
        },
        getRangeProps () {
            return normalize.element({
                dir: prop("dir"),
                ...parts.range.attrs,
                "data-orientation": orientation,
                "data-state": progressState,
                style: {
                    [computed("isHorizontal") ? "width" : "height"]: indeterminate ? void 0 : "".concat(percent, "%")
                }
            });
        },
        getCircleProps () {
            return normalize.element({
                dir: prop("dir"),
                id: getCircleId(scope),
                ...parts.circle.attrs,
                ...progressbarProps,
                ...circleProps2.root
            });
        },
        getCircleTrackProps () {
            return normalize.element({
                dir: prop("dir"),
                "data-orientation": orientation,
                ...parts.circleTrack.attrs,
                ...circleProps2.track
            });
        },
        getCircleRangeProps () {
            return normalize.element({
                dir: prop("dir"),
                ...parts.circleRange.attrs,
                ...circleProps2.range,
                "data-state": progressState
            });
        },
        getViewProps (props2) {
            return normalize.element({
                dir: prop("dir"),
                ...parts.view.attrs,
                "data-state": props2.state,
                hidden: props2.state !== progressState
            });
        }
    };
}
function getProgressState(value, maxValue) {
    return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
}
var circleProps = {
    style: {
        "--radius": "calc(var(--size) / 2 - var(--thickness) / 2)",
        cx: "calc(var(--size) / 2)",
        cy: "calc(var(--size) / 2)",
        r: "var(--radius)",
        fill: "transparent",
        strokeWidth: "var(--thickness)"
    }
};
var rootProps = {
    style: {
        width: "var(--size)",
        height: "var(--size)"
    }
};
function getCircleProps(service) {
    const { context, computed } = service;
    return {
        root: rootProps,
        track: circleProps,
        range: {
            opacity: context.get("value") === 0 ? 0 : void 0,
            style: {
                ...circleProps.style,
                "--percent": computed("percent"),
                "--circumference": "calc(2 * 3.14159 * var(--radius))",
                "--offset": "calc(var(--circumference) * (100 - var(--percent)) / 100)",
                strokeDashoffset: "calc(var(--circumference) * ((100 - var(--percent)) / 100))",
                strokeDasharray: computed("isIndeterminate") ? void 0 : "var(--circumference)",
                transformOrigin: "center",
                transform: "rotate(-90deg)"
            }
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props (param) {
        let { props: props2 } = param;
        var _props2_min;
        const min = (_props2_min = props2.min) !== null && _props2_min !== void 0 ? _props2_min : 0;
        var _props2_max;
        const max = (_props2_max = props2.max) !== null && _props2_max !== void 0 ? _props2_max : 100;
        return {
            orientation: "horizontal",
            ...props2,
            max,
            min,
            defaultValue: props2.defaultValue !== void 0 ? props2.defaultValue : midValue(min, max),
            formatOptions: {
                style: "percent",
                ...props2.formatOptions
            },
            translations: {
                value: (param)=>{
                    let { value, percent, formatter } = param;
                    if (value === null) return "loading...";
                    if (formatter) {
                        const formatOptions = formatter.resolvedOptions();
                        const num = formatOptions.style === "percent" ? percent / 100 : value;
                        return formatter.format(num);
                    }
                    return value.toString();
                },
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    entry: [
        "validateContext"
    ],
    context (param) {
        let { bindable, prop } = param;
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        var _prop;
                        (_prop = prop("onValueChange")) === null || _prop === void 0 ? void 0 : _prop({
                            value
                        });
                    }
                }))
        };
    },
    computed: {
        isIndeterminate: (param)=>{
            let { context } = param;
            return context.get("value") === null;
        },
        percent (param) {
            let { context, prop } = param;
            const value = context.get("value");
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(value)) return -1;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValuePercent"])(value, prop("min"), prop("max")) * 100;
        },
        formatter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((param)=>{
            let { prop } = param;
            return [
                prop("locale"),
                prop("formatOptions")
            ];
        }, (locale, formatOptions)=>new Intl.NumberFormat(locale, formatOptions)),
        isHorizontal: (param)=>{
            let { prop } = param;
            return prop("orientation") === "horizontal";
        }
    },
    states: {
        idle: {
            on: {
                "VALUE.SET": {
                    actions: [
                        "setValue"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            setValue: (param)=>{
                let { context, event, prop } = param;
                const value = event.value === null ? null : Math.max(0, Math.min(event.value, prop("max")));
                context.set("value", value);
            },
            validateContext: (param)=>{
                let { context, prop } = param;
                const max = prop("max");
                const min = prop("min");
                const value = context.get("value");
                if (value == null) return;
                if (!isValidNumber(max)) {
                    throw new Error("[progress] The max value passed `".concat(max, "` is not a valid number"));
                }
                if (!isValidMax(value, max)) {
                    throw new Error("[progress] The value passed `".concat(value, "` exceeds the max value `").concat(max, "`"));
                }
                if (!isValidMin(value, min)) {
                    throw new Error("[progress] The value passed `".concat(value, "` exceeds the min value `").concat(min, "`"));
                }
            }
        }
    }
});
var isValidNumber = (max)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(max) && !isNaN(max);
var isValidMax = (value, max)=>isValidNumber(value) && value <= max;
var isValidMin = (value, min)=>isValidNumber(value) && value >= min;
var midValue = (min, max)=>min + (max - min) / 2;
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "dir",
    "getRootNode",
    "id",
    "ids",
    "max",
    "min",
    "orientation",
    "translations",
    "value",
    "onValueChange",
    "defaultValue",
    "formatOptions",
    "locale"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/progress/dist/index.mjs [app-client] (ecmascript) <export anatomy as progressAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "progressAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$progress$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$progress$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/progress/dist/index.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/@zag-js/tooltip/dist/index.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "anatomy",
    ()=>anatomy,
    "connect",
    ()=>connect,
    "machine",
    ()=>machine,
    "props",
    ()=>props,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/focus-visible/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popper/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
// src/tooltip.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("tooltip").parts("trigger", "arrow", "arrowTip", "positioner", "content");
var parts = anatomy.build();
// src/tooltip.dom.ts
var getTriggerId = (scope)=>{
    var _scope_ids;
    var _scope_ids_trigger;
    return (_scope_ids_trigger = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.trigger) !== null && _scope_ids_trigger !== void 0 ? _scope_ids_trigger : "tooltip:".concat(scope.id, ":trigger");
};
var getContentId = (scope)=>{
    var _scope_ids;
    var _scope_ids_content;
    return (_scope_ids_content = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.content) !== null && _scope_ids_content !== void 0 ? _scope_ids_content : "tooltip:".concat(scope.id, ":content");
};
var getArrowId = (scope)=>{
    var _scope_ids;
    var _scope_ids_arrow;
    return (_scope_ids_arrow = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.arrow) !== null && _scope_ids_arrow !== void 0 ? _scope_ids_arrow : "tooltip:".concat(scope.id, ":arrow");
};
var getPositionerId = (scope)=>{
    var _scope_ids;
    var _scope_ids_positioner;
    return (_scope_ids_positioner = (_scope_ids = scope.ids) === null || _scope_ids === void 0 ? void 0 : _scope_ids.positioner) !== null && _scope_ids_positioner !== void 0 ? _scope_ids_positioner : "tooltip:".concat(scope.id, ":popper");
};
var getTriggerEl = (scope)=>scope.getById(getTriggerId(scope));
var getPositionerEl = (scope)=>scope.getById(getPositionerId(scope));
var store = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStore"])({
    id: null
});
// src/tooltip.connect.ts
function connect(service, normalize) {
    const { state, context, send, scope, prop, event: _event } = service;
    const id = prop("id");
    const hasAriaLabel = !!prop("aria-label");
    const open = state.matches("open", "closing");
    const triggerId = getTriggerId(scope);
    const contentId = getContentId(scope);
    const disabled = prop("disabled");
    const popperStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacementStyles"])({
        ...prop("positioning"),
        placement: context.get("currentPlacement")
    });
    return {
        open,
        setOpen (nextOpen) {
            const open2 = state.matches("open", "closing");
            if (open2 === nextOpen) return;
            send({
                type: nextOpen ? "open" : "close"
            });
        },
        reposition () {
            let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            send({
                type: "positioning.set",
                options
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                id: triggerId,
                dir: prop("dir"),
                "data-expanded": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(open),
                "data-state": open ? "open" : "closed",
                "aria-describedby": open ? contentId : void 0,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    if (!prop("closeOnClick")) return;
                    send({
                        type: "close",
                        src: "trigger.click"
                    });
                },
                onFocus (event) {
                    queueMicrotask(()=>{
                        if (event.defaultPrevented) return;
                        if (disabled) return;
                        if (_event.src === "trigger.pointerdown") return;
                        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFocusVisible"])()) return;
                        send({
                            type: "open",
                            src: "trigger.focus"
                        });
                    });
                },
                onBlur (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    if (id === store.get("id")) {
                        send({
                            type: "close",
                            src: "trigger.blur"
                        });
                    }
                },
                onPointerDown (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeftClick"])(event)) return;
                    if (!prop("closeOnPointerDown")) return;
                    if (id === store.get("id")) {
                        send({
                            type: "close",
                            src: "trigger.pointerdown"
                        });
                    }
                },
                onPointerMove (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    if (event.pointerType === "touch") return;
                    send({
                        type: "pointer.move"
                    });
                },
                onPointerLeave () {
                    if (disabled) return;
                    send({
                        type: "pointer.leave"
                    });
                },
                onPointerCancel () {
                    if (disabled) return;
                    send({
                        type: "pointer.leave"
                    });
                }
            });
        },
        getArrowProps () {
            return normalize.element({
                id: getArrowId(scope),
                ...parts.arrow.attrs,
                dir: prop("dir"),
                style: popperStyles.arrow
            });
        },
        getArrowTipProps () {
            return normalize.element({
                ...parts.arrowTip.attrs,
                dir: prop("dir"),
                style: popperStyles.arrowTip
            });
        },
        getPositionerProps () {
            return normalize.element({
                id: getPositionerId(scope),
                ...parts.positioner.attrs,
                dir: prop("dir"),
                style: popperStyles.floating
            });
        },
        getContentProps () {
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                hidden: !open,
                "data-state": open ? "open" : "closed",
                role: hasAriaLabel ? void 0 : "tooltip",
                id: hasAriaLabel ? void 0 : contentId,
                "data-placement": context.get("currentPlacement"),
                onPointerEnter () {
                    send({
                        type: "content.pointer.move"
                    });
                },
                onPointerLeave () {
                    send({
                        type: "content.pointer.leave"
                    });
                },
                style: {
                    pointerEvents: prop("interactive") ? "auto" : "none"
                }
            });
        }
    };
}
var { and, not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    initialState: (param)=>{
        let { prop } = param;
        const open = prop("open") || prop("defaultOpen");
        return open ? "open" : "closed";
    },
    props (param) {
        let { props: props2 } = param;
        var _props2_closeOnClick;
        const closeOnClick = (_props2_closeOnClick = props2.closeOnClick) !== null && _props2_closeOnClick !== void 0 ? _props2_closeOnClick : true;
        var _props2_closeOnPointerDown;
        const closeOnPointerDown = (_props2_closeOnPointerDown = props2.closeOnPointerDown) !== null && _props2_closeOnPointerDown !== void 0 ? _props2_closeOnPointerDown : closeOnClick;
        return {
            id: "x",
            openDelay: 1e3,
            closeDelay: 500,
            closeOnEscape: true,
            interactive: false,
            closeOnScroll: true,
            disabled: false,
            ...props2,
            closeOnPointerDown,
            closeOnClick,
            positioning: {
                placement: "bottom",
                ...props2.positioning
            }
        };
    },
    effects: [
        "trackFocusVisible",
        "trackStore"
    ],
    context: (param)=>{
        let { bindable } = param;
        return {
            currentPlacement: bindable(()=>({
                    defaultValue: void 0
                })),
            hasPointerMoveOpened: bindable(()=>({
                    defaultValue: false
                }))
        };
    },
    watch (param) {
        let { track, action, prop } = param;
        track([
            ()=>prop("disabled")
        ], ()=>{
            action([
                "closeIfDisabled"
            ]);
        });
        track([
            ()=>prop("open")
        ], ()=>{
            action([
                "toggleVisibility"
            ]);
        });
    },
    states: {
        closed: {
            entry: [
                "clearGlobalId"
            ],
            on: {
                "controlled.open": {
                    target: "open"
                },
                open: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                "pointer.leave": {
                    actions: [
                        "clearPointerMoveOpened"
                    ]
                },
                "pointer.move": [
                    {
                        guard: and("noVisibleTooltip", not("hasPointerMoveOpened")),
                        target: "opening"
                    },
                    {
                        guard: not("hasPointerMoveOpened"),
                        target: "open",
                        actions: [
                            "setPointerMoveOpened",
                            "invokeOnOpen"
                        ]
                    }
                ]
            }
        },
        opening: {
            effects: [
                "trackScroll",
                "trackPointerlockChange",
                "waitForOpenDelay"
            ],
            on: {
                "after.openDelay": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "setPointerMoveOpened",
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setPointerMoveOpened",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "controlled.open": {
                    target: "open"
                },
                "controlled.close": {
                    target: "closed"
                },
                open: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnOpen"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "invokeOnOpen"
                        ]
                    }
                ],
                "pointer.leave": [
                    {
                        guard: "isOpenControlled",
                        // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
                        actions: [
                            "clearPointerMoveOpened",
                            "invokeOnClose",
                            "toggleVisibility"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "clearPointerMoveOpened",
                            "invokeOnClose"
                        ]
                    }
                ],
                close: [
                    {
                        guard: "isOpenControlled",
                        // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
                        actions: [
                            "invokeOnClose",
                            "toggleVisibility"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ]
            }
        },
        open: {
            effects: [
                "trackEscapeKey",
                "trackScroll",
                "trackPointerlockChange",
                "trackPositioning"
            ],
            entry: [
                "setGlobalId"
            ],
            on: {
                "controlled.close": {
                    target: "closed"
                },
                close: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "pointer.leave": [
                    {
                        guard: "isVisible",
                        target: "closing",
                        actions: [
                            "clearPointerMoveOpened"
                        ]
                    },
                    // == group ==
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "clearPointerMoveOpened",
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "clearPointerMoveOpened",
                            "invokeOnClose"
                        ]
                    }
                ],
                "content.pointer.leave": {
                    guard: "isInteractive",
                    target: "closing"
                },
                "positioning.set": {
                    actions: [
                        "reposition"
                    ]
                }
            }
        },
        closing: {
            effects: [
                "trackPositioning",
                "waitForCloseDelay"
            ],
            on: {
                "after.closeDelay": [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "controlled.close": {
                    target: "closed"
                },
                "controlled.open": {
                    target: "open"
                },
                close: [
                    {
                        guard: "isOpenControlled",
                        actions: [
                            "invokeOnClose"
                        ]
                    },
                    {
                        target: "closed",
                        actions: [
                            "invokeOnClose"
                        ]
                    }
                ],
                "pointer.move": [
                    {
                        guard: "isOpenControlled",
                        // We trigger toggleVisibility manually since the `ctx.open` has not changed yet (at this point)
                        actions: [
                            "setPointerMoveOpened",
                            "invokeOnOpen",
                            "toggleVisibility"
                        ]
                    },
                    {
                        target: "open",
                        actions: [
                            "setPointerMoveOpened",
                            "invokeOnOpen"
                        ]
                    }
                ],
                "content.pointer.move": {
                    guard: "isInteractive",
                    target: "open"
                },
                "positioning.set": {
                    actions: [
                        "reposition"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            noVisibleTooltip: ()=>store.get("id") === null,
            isVisible: (param)=>{
                let { prop } = param;
                return prop("id") === store.get("id");
            },
            isInteractive: (param)=>{
                let { prop } = param;
                return !!prop("interactive");
            },
            hasPointerMoveOpened: (param)=>{
                let { context } = param;
                return context.get("hasPointerMoveOpened");
            },
            isOpenControlled: (param)=>{
                let { prop } = param;
                return prop("open") !== void 0;
            }
        },
        actions: {
            setGlobalId: (param)=>{
                let { prop } = param;
                store.set("id", prop("id"));
            },
            clearGlobalId: (param)=>{
                let { prop } = param;
                if (prop("id") === store.get("id")) {
                    store.set("id", null);
                }
            },
            invokeOnOpen: (param)=>{
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: true
                });
            },
            invokeOnClose: (param)=>{
                let { prop } = param;
                var _prop;
                (_prop = prop("onOpenChange")) === null || _prop === void 0 ? void 0 : _prop({
                    open: false
                });
            },
            closeIfDisabled: (param)=>{
                let { prop, send } = param;
                if (!prop("disabled")) return;
                send({
                    type: "close",
                    src: "disabled.change"
                });
            },
            reposition: (param)=>{
                let { context, event, prop, scope } = param;
                if (event.type !== "positioning.set") return;
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(getTriggerEl(scope), getPositionerEl2, {
                    ...prop("positioning"),
                    ...event.options,
                    defer: true,
                    listeners: false,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            toggleVisibility: (param)=>{
                let { prop, event, send } = param;
                queueMicrotask(()=>{
                    send({
                        type: prop("open") ? "controlled.open" : "controlled.close",
                        previousEvent: event
                    });
                });
            },
            setPointerMoveOpened: (param)=>{
                let { context } = param;
                context.set("hasPointerMoveOpened", true);
            },
            clearPointerMoveOpened: (param)=>{
                let { context } = param;
                context.set("hasPointerMoveOpened", false);
            }
        },
        effects: {
            trackFocusVisible: (param)=>{
                let { scope } = param;
                var _scope_getRootNode;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$focus$2d$visible$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackFocusVisible"])({
                    root: (_scope_getRootNode = scope.getRootNode) === null || _scope_getRootNode === void 0 ? void 0 : _scope_getRootNode.call(scope)
                });
            },
            trackPositioning: (param)=>{
                let { context, prop, scope } = param;
                if (!context.get("currentPlacement")) {
                    context.set("currentPlacement", prop("positioning").placement);
                }
                const getPositionerEl2 = ()=>getPositionerEl(scope);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popper$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPlacement"])(getTriggerEl(scope), getPositionerEl2, {
                    ...prop("positioning"),
                    defer: true,
                    onComplete (data) {
                        context.set("currentPlacement", data.placement);
                    }
                });
            },
            trackPointerlockChange: (param)=>{
                let { send, scope } = param;
                const doc = scope.getDoc();
                const onChange = ()=>send({
                        type: "close",
                        src: "pointerlock:change"
                    });
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(doc, "pointerlockchange", onChange, false);
            },
            trackScroll: (param)=>{
                let { send, prop, scope } = param;
                if (!prop("closeOnScroll")) return;
                const triggerEl = getTriggerEl(scope);
                if (!triggerEl) return;
                const overflowParents = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getOverflowAncestors"])(triggerEl);
                const cleanups = overflowParents.map((overflowParent)=>{
                    const onScroll = ()=>{
                        send({
                            type: "close",
                            src: "scroll"
                        });
                    };
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(overflowParent, "scroll", onScroll, {
                        passive: true,
                        capture: true
                    });
                });
                return ()=>{
                    cleanups.forEach((fn)=>fn === null || fn === void 0 ? void 0 : fn());
                };
            },
            trackStore: (param)=>{
                let { prop, send } = param;
                let cleanup;
                queueMicrotask(()=>{
                    cleanup = store.subscribe(()=>{
                        if (store.get("id") !== prop("id")) {
                            send({
                                type: "close",
                                src: "id.change"
                            });
                        }
                    });
                });
                return ()=>cleanup === null || cleanup === void 0 ? void 0 : cleanup();
            },
            trackEscapeKey: (param)=>{
                let { send, prop } = param;
                if (!prop("closeOnEscape")) return;
                const onKeyDown = (event)=>{
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    if (event.key !== "Escape") return;
                    event.stopPropagation();
                    send({
                        type: "close",
                        src: "keydown.escape"
                    });
                };
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDomEvent"])(document, "keydown", onKeyDown, true);
            },
            waitForOpenDelay: (param)=>{
                let { send, prop } = param;
                const id = setTimeout(()=>{
                    send({
                        type: "after.openDelay"
                    });
                }, prop("openDelay"));
                return ()=>clearTimeout(id);
            },
            waitForCloseDelay: (param)=>{
                let { send, prop } = param;
                const id = setTimeout(()=>{
                    send({
                        type: "after.closeDelay"
                    });
                }, prop("closeDelay"));
                return ()=>clearTimeout(id);
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "aria-label",
    "closeDelay",
    "closeOnEscape",
    "closeOnPointerDown",
    "closeOnScroll",
    "closeOnClick",
    "dir",
    "disabled",
    "getRootNode",
    "id",
    "ids",
    "interactive",
    "onOpenChange",
    "defaultOpen",
    "open",
    "openDelay",
    "positioning"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}),
"[project]/node_modules/@zag-js/tooltip/dist/index.mjs [app-client] (ecmascript) <export anatomy as tooltipAnatomy>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "tooltipAnatomy",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$tooltip$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["anatomy"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$tooltip$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/tooltip/dist/index.mjs [app-client] (ecmascript)");
}),
]);

//# sourceMappingURL=node_modules_%40zag-js_c487b509._.js.map