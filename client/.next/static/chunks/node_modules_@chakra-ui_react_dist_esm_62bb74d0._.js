(globalThis.TURBOPACK || (globalThis.TURBOPACK = [])).push([typeof document === "object" ? document.currentScript : undefined,
"[project]/node_modules/@chakra-ui/react/dist/esm/create-context.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createContext",
    ()=>createContext
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
"use strict";
"use client";
;
function getErrorMessage(hook, provider) {
    return "".concat(hook, " returned `undefined`. Seems you forgot to wrap component within ").concat(provider);
}
function createContext() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const { name, strict = true, hookName = "useContext", providerName = "Provider", errorMessage, defaultValue } = options;
    const Context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(defaultValue);
    Context.displayName = name;
    function useContext$1() {
        const context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(Context);
        if (!context && strict) {
            var _Error_captureStackTrace, _Error;
            const error = new Error(errorMessage !== null && errorMessage !== void 0 ? errorMessage : getErrorMessage(hookName, providerName));
            error.name = "ContextError";
            (_Error_captureStackTrace = (_Error = Error).captureStackTrace) === null || _Error_captureStackTrace === void 0 ? void 0 : _Error_captureStackTrace.call(_Error, error, useContext$1);
            throw error;
        }
        return context;
    }
    return [
        Context.Provider,
        useContext$1,
        Context
    ];
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/provider.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "ChakraProvider",
    ()=>ChakraProvider,
    "useChakraContext",
    ()=>useChakraContext
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$react$2f$dist$2f$emotion$2d$react$2e$browser$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@emotion/react/dist/emotion-react.browser.development.esm.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$create$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/create-context.js [app-client] (ecmascript)");
"use strict";
"use client";
;
;
;
const [ChakraContextProvider, useChakraContext] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$create$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])({
    name: "ChakraContext",
    strict: true,
    providerName: "<ChakraProvider />"
});
function ChakraProvider(props) {
    const { value: sys, children } = props;
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxs"])(ChakraContextProvider, {
        value: sys,
        children: [
            !sys._config.disableLayers && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$react$2f$dist$2f$emotion$2d$react$2e$browser$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Global"], {
                styles: sys.layers.atRule
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$react$2f$dist$2f$emotion$2d$react$2e$browser$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Global"], {
                styles: sys._global
            }),
            children
        ]
    });
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/compact.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "compact",
    ()=>compact
]);
"use strict";
function compact(object) {
    const clone = Object.assign({}, object);
    for(let key in clone){
        if (clone[key] === void 0) delete clone[key];
    }
    return clone;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "isCssVar",
    ()=>isCssVar,
    "isFunction",
    ()=>isFunction,
    "isObject",
    ()=>isObject,
    "isString",
    ()=>isString
]);
"use strict";
const isObject = (v)=>v != null && typeof v === "object" && !Array.isArray(v);
const isCssVar = (v)=>/^var\(--.+\)$/.test(v);
const isString = (v)=>typeof v === "string";
const isFunction = (v)=>typeof v === "function";
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "mapObject",
    ()=>mapObject,
    "walkObject",
    ()=>walkObject
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
"use strict";
;
const isNotNullish = (element)=>element != null;
function walkObject(target, predicate) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const { stop, getKey } = options;
    function inner(value) {
        let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(value) || Array.isArray(value)) {
            const result = {};
            for (const [prop, child] of Object.entries(value)){
                var _getKey;
                const key = (_getKey = getKey === null || getKey === void 0 ? void 0 : getKey(prop, child)) !== null && _getKey !== void 0 ? _getKey : prop;
                const childPath = [
                    ...path,
                    key
                ];
                if (stop === null || stop === void 0 ? void 0 : stop(value, childPath)) {
                    return predicate(value, path);
                }
                const next = inner(child, childPath);
                if (isNotNullish(next)) {
                    result[key] = next;
                }
            }
            return result;
        }
        return predicate(value, path);
    }
    return inner(target);
}
function mapObject(obj, fn) {
    if (Array.isArray(obj)) return obj.map((value)=>{
        return isNotNullish(value) ? fn(value) : value;
    });
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(obj)) {
        return isNotNullish(obj) ? fn(obj) : obj;
    }
    return walkObject(obj, (value)=>fn(value));
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/flatten.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "flatten",
    ()=>flatten
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js [app-client] (ecmascript)");
"use strict";
;
function flatten(values, stop) {
    const result = {};
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(values, (token, paths)=>{
        if (token) {
            result[paths.join(".")] = token.value;
        }
    }, {
        stop
    });
    return result;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/memo.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "memo",
    ()=>memo
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fast$2d$safe$2d$stringify$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/fast-safe-stringify/index.js [app-client] (ecmascript)");
"use strict";
;
const memo = (fn)=>{
    const cache = /* @__PURE__ */ Object.create(null);
    function get() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        const key = args.map((v)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fast$2d$safe$2d$stringify$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(v)).join("|");
        if (cache[key] === void 0) cache[key] = fn(...args);
        return cache[key];
    }
    return get;
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/merge.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "mergeWith",
    ()=>mergeWith
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
"use strict";
;
function merge(target, source) {
    if (source == null) return target;
    for (const key of Object.keys(source)){
        if (source[key] === void 0 || key === "__proto__") continue;
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(target[key]) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(source[key])) {
            Object.assign(target, {
                [key]: source[key]
            });
        } else if (target[key] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(source[key])) {
            merge(target[key], source[key]);
        } else if (Array.isArray(source[key]) && Array.isArray(target[key])) {
            let i = 0;
            for(; i < source[key].length; i++){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(target[key][i]) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(source[key][i])) {
                    merge(target[key][i], source[key][i]);
                } else {
                    target[key][i] = source[key][i];
                }
            }
        } else {
            Object.assign(target, {
                [key]: source[key]
            });
        }
    }
    return target;
}
function mergeWith(target) {
    for(var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        sources[_key - 1] = arguments[_key];
    }
    for (const source of sources){
        merge(target, source);
    }
    return target;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/split-props.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createSplitProps",
    ()=>createSplitProps,
    "splitProps",
    ()=>splitProps
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
"use strict";
;
const splitPropFn = (props, predicate)=>{
    const rest = {};
    const result = {};
    const allKeys = Object.keys(props);
    for (const key of allKeys){
        if (predicate(key)) {
            result[key] = props[key];
        } else {
            rest[key] = props[key];
        }
    }
    return [
        result,
        rest
    ];
};
const splitProps = (props, keys)=>{
    const predicate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(keys) ? keys : (key)=>keys.includes(key);
    return splitPropFn(props, predicate);
};
const createSplitProps = (keys)=>{
    return function split(props) {
        return splitProps(props, keys);
    };
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/unit-conversion.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "getUnit",
    ()=>getUnit,
    "toEm",
    ()=>toEm,
    "toPx",
    ()=>toPx,
    "toRem",
    ()=>toRem
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_tagged_template_literal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_tagged_template_literal.js [app-client] (ecmascript)");
"use strict";
;
function _templateObject() {
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_tagged_template_literal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])([
        "-?d+(?:.d+|d*)"
    ], [
        "-?\\d+(?:\\.\\d+|\\d*)"
    ]);
    _templateObject = function() {
        return data;
    };
    return data;
}
const BASE_FONT_SIZE = 16;
const UNIT_PX = "px";
const UNIT_EM = "em";
const UNIT_REM = "rem";
function getUnit() {
    let value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const DIGIT_REGEX = new RegExp(String.raw(_templateObject()));
    const UNIT_REGEX = new RegExp("".concat(UNIT_PX, "|").concat(UNIT_EM, "|").concat(UNIT_REM));
    const unit = value.match(new RegExp("".concat(DIGIT_REGEX.source, "(").concat(UNIT_REGEX.source, ")")));
    return unit === null || unit === void 0 ? void 0 : unit[1];
}
function toPx() {
    let value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    if (typeof value === "number") {
        return "".concat(value, "px");
    }
    const unit = getUnit(value);
    if (!unit) return value;
    if (unit === UNIT_PX) {
        return value;
    }
    if (unit === UNIT_EM || unit === UNIT_REM) {
        return "".concat(parseFloat(value) * BASE_FONT_SIZE).concat(UNIT_PX);
    }
}
function toEm() {
    let value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", fontSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : BASE_FONT_SIZE;
    const unit = getUnit(value);
    if (!unit) return value;
    if (unit === UNIT_EM) {
        return value;
    }
    if (unit === UNIT_PX) {
        return "".concat(parseFloat(value) / fontSize).concat(UNIT_EM);
    }
    if (unit === UNIT_REM) {
        return "".concat(parseFloat(value) * BASE_FONT_SIZE / fontSize).concat(UNIT_EM);
    }
}
function toRem() {
    let value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const unit = getUnit(value);
    if (!unit) return value;
    if (unit === UNIT_REM) {
        return value;
    }
    if (unit === UNIT_EM) {
        return "".concat(parseFloat(value)).concat(UNIT_REM);
    }
    if (unit === UNIT_PX) {
        return "".concat(parseFloat(value) / BASE_FONT_SIZE).concat(UNIT_REM);
    }
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/breakpoints.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createBreakpoints",
    ()=>createBreakpoints
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$unit$2d$conversion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/unit-conversion.js [app-client] (ecmascript)");
"use strict";
;
const capitalize = (str)=>str.charAt(0).toUpperCase() + str.slice(1);
function createBreakpoints(breakpoints) {
    const sorted = sort(breakpoints);
    const values = Object.fromEntries(sorted);
    function get(name) {
        return values[name];
    }
    function only(name) {
        return build(get(name));
    }
    function getRanges() {
        const breakpoints2 = Object.keys(values);
        const permuations = getPermutations(breakpoints2);
        const results = breakpoints2.flatMap((name)=>{
            const value = get(name);
            const down2 = [
                "".concat(name, "Down"),
                build({
                    max: adjust(value.min)
                })
            ];
            const up2 = [
                name,
                build({
                    min: value.min
                })
            ];
            const _only = [
                "".concat(name, "Only"),
                only(name)
            ];
            return [
                up2,
                _only,
                down2
            ];
        }).filter((param)=>{
            let [, value] = param;
            return value !== "";
        }).concat(permuations.map((param)=>{
            let [min, max] = param;
            const minValue = get(min);
            const maxValue = get(max);
            return [
                "".concat(min, "To").concat(capitalize(max)),
                build({
                    min: minValue.min,
                    max: adjust(maxValue.min)
                })
            ];
        }));
        return Object.fromEntries(results);
    }
    function toConditions() {
        const ranges = getRanges();
        return Object.fromEntries(Object.entries(ranges));
    }
    const conditions = toConditions();
    const getCondition = (key)=>{
        return conditions[key];
    };
    function keys() {
        return [
            "base",
            ...Object.keys(values)
        ];
    }
    function up(name) {
        return build({
            min: get(name).min
        });
    }
    function down(name) {
        return build({
            max: adjust(get(name).min)
        });
    }
    return {
        values: Object.values(values),
        only,
        keys,
        conditions,
        getCondition,
        up,
        down
    };
}
function adjust(value) {
    var _toPx;
    const computedMax = parseFloat((_toPx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$unit$2d$conversion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toPx"])(value)) !== null && _toPx !== void 0 ? _toPx : "") - 0.04;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$unit$2d$conversion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toRem"])("".concat(computedMax, "px"));
}
function sort(breakpoints) {
    const entries = Object.entries(breakpoints).sort((param, param1)=>{
        let [, minA] = param, [, minB] = param1;
        return parseInt(minA, 10) < parseInt(minB, 10) ? -1 : 1;
    });
    return entries.map((param, index, entries2)=>{
        let [name, min] = param;
        let max = null;
        if (index <= entries2.length - 1) {
            var _entries2_;
            max = (_entries2_ = entries2[index + 1]) === null || _entries2_ === void 0 ? void 0 : _entries2_[1];
        }
        if (max != null) {
            max = adjust(max);
        }
        return [
            name,
            {
                name,
                min: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$unit$2d$conversion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toRem"])(min),
                max
            }
        ];
    });
}
function getPermutations(values) {
    const result = [];
    values.forEach((current, index)=>{
        let idx = index;
        idx++;
        let next = values[idx];
        while(next){
            result.push([
                current,
                next
            ]);
            idx++;
            next = values[idx];
        }
    });
    return result;
}
function build(param) {
    let { min, max } = param;
    if (min == null && max == null) return "";
    return [
        "@media screen",
        min && "(min-width: ".concat(min, ")"),
        max && "(max-width: ".concat(max, ")")
    ].filter(Boolean).join(" and ");
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/conditions.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createConditions",
    ()=>createConditions
]);
"use strict";
const mapEntries = (obj, fn)=>{
    return Object.fromEntries(Object.entries(obj).map((param)=>{
        let [key, value] = param;
        return fn(key, value);
    }));
};
const createConditions = (options)=>{
    const { breakpoints, conditions: conds = {} } = options;
    const conditions = mapEntries(conds, (key, value)=>[
            "_".concat(key),
            value
        ]);
    const values = Object.assign({}, conditions, breakpoints.conditions);
    function keys() {
        return Object.keys(values);
    }
    function has(key) {
        return keys().includes(key) || /^@|&|&$/.test(key) || key.startsWith("_");
    }
    function sort(paths) {
        return paths.filter((v)=>v !== "base").sort((a, b)=>{
            const aa = has(a);
            const bb = has(b);
            if (aa && !bb) return 1;
            if (!aa && bb) return -1;
            return 0;
        });
    }
    function expandAtRule(key) {
        if (!key.startsWith("@breakpoint")) return key;
        return breakpoints.getCondition(key.replace("@breakpoint ", ""));
    }
    function resolve(key) {
        return Reflect.get(values, key) || key;
    }
    return {
        keys,
        sort,
        has,
        resolve,
        breakpoints: breakpoints.keys(),
        expandAtRule
    };
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/sort-at-params.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "sortAtParams",
    ()=>sortAtParams
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/memo.js [app-client] (ecmascript)");
"use strict";
;
const createMediaQueryRegex = (dimension)=>({
        minMax: new RegExp("(!?\\(\\s*min(-device-)?-".concat(dimension, ")(.|\n)+\\(\\s*max(-device)?-").concat(dimension), "i"),
        min: new RegExp("\\(\\s*min(-device)?-".concat(dimension), "i"),
        maxMin: new RegExp("(!?\\(\\s*max(-device)?-".concat(dimension, ")(.|\n)+\\(\\s*min(-device)?-").concat(dimension), "i"),
        max: new RegExp("\\(\\s*max(-device)?-".concat(dimension), "i")
    });
const widthRegex = createMediaQueryRegex("width");
const heightRegex = createMediaQueryRegex("height");
const createQueryTester = (regexSet)=>({
        isMin: _testQuery(regexSet.minMax, regexSet.maxMin, regexSet.min),
        isMax: _testQuery(regexSet.maxMin, regexSet.minMax, regexSet.max)
    });
const { isMin: isMinWidth, isMax: isMaxWidth } = createQueryTester(widthRegex);
const { isMin: isMinHeight, isMax: isMaxHeight } = createQueryTester(heightRegex);
const isPrint = /print/i;
const isPrintOnly = /^print$/i;
const isLength = /(-?\d*\.?\d+)(ch|em|ex|px|rem)/;
const lengthExec = /(\d)/;
const maxValue = Number.MAX_VALUE;
const multipliers = {
    ch: 8.8984375,
    em: 16,
    rem: 16,
    ex: 8.296875,
    px: 1
};
function getQueryLength(query) {
    const length = isLength.exec(query) || (isMinWidth(query) || isMinHeight(query) ? lengthExec.exec(query) : null);
    if (!length) return maxValue;
    if (length[0] === "0") return 0;
    const number = parseFloat(length[1]);
    const unit = length[2];
    return number * (multipliers[unit] || 1);
}
function _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {
    return (query)=>doubleTestTrue.test(query) || !doubleTestFalse.test(query) && singleTest.test(query);
}
function _testIsPrint(a, b) {
    const isPrintA = isPrint.test(a), isPrintOnlyA = isPrintOnly.test(a);
    const isPrintB = isPrint.test(b), isPrintOnlyB = isPrintOnly.test(b);
    if (isPrintA && isPrintB) {
        if (!isPrintOnlyA && isPrintOnlyB) return 1;
        if (isPrintOnlyA && !isPrintOnlyB) return -1;
        return a.localeCompare(b);
    }
    return isPrintA ? 1 : isPrintB ? -1 : null;
}
const sortAtParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((a, b)=>{
    const testIsPrint = _testIsPrint(a, b);
    if (testIsPrint !== null) return testIsPrint;
    const minA = isMinWidth(a) || isMinHeight(a), maxA = isMaxWidth(a) || isMaxHeight(a);
    const minB = isMinWidth(b) || isMinHeight(b), maxB = isMaxWidth(b) || isMaxHeight(b);
    if (minA && maxB) return -1;
    if (maxA && minB) return 1;
    const lengthA = getQueryLength(a), lengthB = getQueryLength(b);
    if (lengthA === maxValue && lengthB === maxValue) return a.localeCompare(b);
    if (lengthA === maxValue) return 1;
    if (lengthB === maxValue) return -1;
    if (lengthA !== lengthB) {
        return lengthA > lengthB ? maxA ? -1 : 1 : maxA ? 1 : -1;
    }
    return a.localeCompare(b);
});
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/sort-at-rules.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "sortAtRules",
    ()=>sortAtRules
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$sort$2d$at$2d$params$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/sort-at-params.js [app-client] (ecmascript)");
"use strict";
;
;
function sortQueries(queries) {
    return queries.sort((param, param1)=>{
        let [a] = param, [b] = param1;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$sort$2d$at$2d$params$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sortAtParams"])(a, b);
    });
}
function sortAtRules(obj) {
    const mediaQueries = [];
    const containerQueries = [];
    const rest = {};
    for (const [key, value] of Object.entries(obj)){
        if (key.startsWith("@media")) {
            mediaQueries.push([
                key,
                value
            ]);
        } else if (key.startsWith("@container")) {
            containerQueries.push([
                key,
                value
            ]);
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(value)) {
            rest[key] = sortAtRules(value);
        } else {
            rest[key] = value;
        }
    }
    const sortedMediaQueries = sortQueries(mediaQueries);
    const sortedContainerQueries = sortQueries(containerQueries);
    return {
        ...rest,
        ...Object.fromEntries(sortedMediaQueries),
        ...Object.fromEntries(sortedContainerQueries)
    };
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/css.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createCssFn",
    ()=>createCssFn
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/compact.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/memo.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/merge.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$sort$2d$at$2d$rules$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/sort-at-rules.js [app-client] (ecmascript)");
"use strict";
;
;
;
;
;
;
const importantRegex = /\s*!(important)?/i;
const isImportant = (v)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(v) ? importantRegex.test(v) : false;
const withoutImportant = (v)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(v) ? v.replace(importantRegex, "").trim() : v;
function createCssFn(context) {
    const { transform, conditions, normalize } = context;
    const mergeFn = mergeCss(context);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])(function cssFn() {
        for(var _len = arguments.length, styleArgs = new Array(_len), _key = 0; _key < _len; _key++){
            styleArgs[_key] = arguments[_key];
        }
        const styles = mergeFn(...styleArgs);
        const normalized = normalize(styles);
        const result = /* @__PURE__ */ Object.create(null);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(normalized, (value, paths)=>{
            const important = isImportant(value);
            if (value == null) return;
            const [prop, ...selectors] = conditions.sort(paths).map(conditions.resolve);
            if (important) {
                value = withoutImportant(value);
            }
            var _transform;
            let transformed = (_transform = transform(prop, value)) !== null && _transform !== void 0 ? _transform : /* @__PURE__ */ Object.create(null);
            transformed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(transformed, (v)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(v) && important ? "".concat(v, " !important") : v, {
                getKey: (prop2)=>conditions.expandAtRule(prop2)
            });
            mergeByPath(result, selectors.flat(), transformed);
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$sort$2d$at$2d$rules$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sortAtRules"])(result);
    });
}
function mergeByPath(target, paths, value) {
    let acc = target;
    for (const path of paths){
        if (!path) continue;
        if (!acc[path]) acc[path] = /* @__PURE__ */ Object.create(null);
        acc = acc[path];
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeWith"])(acc, value);
}
function compactFn() {
    for(var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++){
        styles[_key] = arguments[_key];
    }
    return styles.filter((style)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(style) && Object.keys((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compact"])(style)).length > 0);
}
function mergeCss(ctx) {
    function resolve(styles) {
        const comp = compactFn(...styles);
        if (comp.length === 1) return comp;
        return comp.map((style)=>ctx.normalize(style));
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])(function mergeFn() {
        for(var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++){
            styles[_key] = arguments[_key];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeWith"])({}, ...resolve(styles));
    });
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/cx.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "cx",
    ()=>cx
]);
"use strict";
const cx = function() {
    for(var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++){
        classNames[_key] = arguments[_key];
    }
    return classNames.filter(Boolean).map((r)=>r.trim()).join(" ");
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/omit.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "omit",
    ()=>omit
]);
"use strict";
function omit(object) {
    let keysToOmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const clone = Object.assign({}, object);
    for (const key of keysToOmit){
        if (key in clone) {
            delete clone[key];
        }
    }
    return clone;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/uniq.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "uniq",
    ()=>uniq
]);
"use strict";
const uniq = function() {
    for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){
        items[_key] = arguments[_key];
    }
    const set = items.reduce((acc, curr)=>{
        if (curr != null) curr.forEach((item)=>acc.add(item));
        return acc;
    }, /* @__PURE__ */ new Set([]));
    return Array.from(set);
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/cva.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createRecipeFn",
    ()=>createRecipeFn
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/compact.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$cx$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/cx.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/merge.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$omit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/omit.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$split$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/split-props.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$uniq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/uniq.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/css.js [app-client] (ecmascript)");
"use strict";
;
;
;
;
;
;
;
const defaults = (conf)=>({
        base: {},
        variants: {},
        defaultVariants: {},
        compoundVariants: [],
        ...conf
    });
function createRecipeFn(options) {
    const { css, conditions, normalize, layers } = options;
    function cva() {
        let config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const { base, variants, defaultVariants, compoundVariants } = defaults(config);
        const getVariantCss = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createCssFn"])({
            conditions,
            normalize,
            transform (prop, value) {
                var _variants_prop;
                return (_variants_prop = variants[prop]) === null || _variants_prop === void 0 ? void 0 : _variants_prop[value];
            }
        });
        const resolve = function() {
            let props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            const variantSelections = normalize({
                ...defaultVariants,
                ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compact"])(props)
            });
            let variantCss = {
                ...base
            };
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeWith"])(variantCss, getVariantCss(variantSelections));
            const compoundVariantCss = getCompoundVariantCss(compoundVariants, variantSelections);
            return layers.wrap("recipes", css(variantCss, compoundVariantCss));
        };
        const variantKeys = Object.keys(variants);
        const splitVariantProps = (props)=>{
            const restProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$omit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["omit"])(props, [
                "recipe"
            ]);
            const [recipeProps, localProps] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$split$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["splitProps"])(restProps, variantKeys);
            if (!variantKeys.includes("colorPalette")) {
                recipeProps.colorPalette = props.colorPalette || defaultVariants.colorPalette;
            }
            if (variantKeys.includes("orientation")) {
                localProps.orientation = props.orientation;
            }
            return [
                recipeProps,
                localProps
            ];
        };
        const variantMap = Object.fromEntries(Object.entries(variants).map((param)=>{
            let [key, value] = param;
            return [
                key,
                Object.keys(value)
            ];
        }));
        const cvaFn = (props)=>css(resolve(props));
        return Object.assign(cvaFn, {
            className: config.className,
            __cva__: true,
            variantMap,
            variantKeys,
            raw: resolve,
            config,
            splitVariantProps,
            merge (other) {
                return cva(mergeCva(options)(this, other));
            }
        });
    }
    function getCompoundVariantCss(cvs, vm) {
        let result = {};
        cvs.forEach((cv)=>{
            const isMatching = Object.entries(cv).every((param)=>{
                let [key, value] = param;
                if (key === "css") return true;
                const values = Array.isArray(value) ? value : [
                    value
                ];
                return values.some((value2)=>vm[key] === value2);
            });
            if (isMatching) {
                result = css(result, cv.css);
            }
        });
        return result;
    }
    return cva;
}
function mergeCva(opts) {
    const { css } = opts;
    return function mergeCva2(cvaA, cvaB) {
        const override = defaults(cvaB.config);
        const variantKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$uniq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uniq"])(cvaA.variantKeys, Object.keys(cvaB.variants));
        const base = css(cvaA.base, override.base);
        const variants = Object.fromEntries(variantKeys.map((key)=>[
                key,
                css(cvaA.config.variants[key], override.variants[key])
            ]));
        const defaultVariants = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeWith"])(cvaA.config.defaultVariants, override.defaultVariants);
        const compoundVariants = [
            ...cvaA.compoundVariants,
            ...override.compoundVariants
        ];
        const className = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$cx$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cx"])(cvaA.className, cvaB.className);
        return {
            className,
            base,
            variants,
            defaultVariants,
            compoundVariants
        };
    };
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/layers.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createLayers",
    ()=>createLayers
]);
"use strict";
const defaultLayers = {
    reset: "reset",
    base: "base",
    tokens: "tokens",
    recipes: "recipes"
};
const layerOrder = {
    reset: 0,
    base: 1,
    tokens: 2,
    recipes: 3
};
function createLayers(config) {
    var _config_layers;
    const layers = (_config_layers = config.layers) !== null && _config_layers !== void 0 ? _config_layers : defaultLayers;
    const values = Object.values(layers);
    const names = values.sort((a, b)=>layerOrder[a] - layerOrder[b]);
    return {
        names,
        atRule: "@layer ".concat(names.join(", "), ";"),
        wrap (layer, styles) {
            if (config.disableLayers) return styles;
            const params = layers[layer];
            return {
                ["@layer ".concat(params)]: styles
            };
        }
    };
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/normalize.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createNormalizeFn",
    ()=>createNormalizeFn
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js [app-client] (ecmascript)");
"use strict";
;
function createNormalizeFn(context) {
    const { utility, normalize } = context;
    const { hasShorthand, resolveShorthand } = utility;
    return function(styles) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(styles, normalize, {
            stop: (value)=>Array.isArray(value),
            getKey: hasShorthand ? resolveShorthand : void 0
        });
    };
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/preflight.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createPreflight",
    ()=>createPreflight
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
"use strict";
;
function createPreflight(options) {
    const { preflight } = options;
    if (!preflight) return {};
    const { scope = "", level = "parent" } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(preflight) ? preflight : {};
    let selector = "";
    if (scope && level === "parent") {
        selector = "".concat(scope, " ");
    } else if (scope && level === "element") {
        selector = "&".concat(scope);
    }
    const scoped = {
        "*": {
            margin: "0px",
            padding: "0px",
            font: "inherit",
            wordWrap: "break-word",
            WebkitTapHighlightColor: "transparent"
        },
        "*, *::before, *::after, *::backdrop": {
            boxSizing: "border-box",
            borderWidth: "0px",
            borderStyle: "solid",
            borderColor: "var(--global-color-border, currentColor)"
        },
        hr: {
            height: "0px",
            color: "inherit",
            borderTopWidth: "1px"
        },
        body: {
            minHeight: "100dvh",
            position: "relative"
        },
        img: {
            borderStyle: "none"
        },
        "img, svg, video, canvas, audio, iframe, embed, object": {
            display: "block",
            verticalAlign: "middle"
        },
        iframe: {
            border: "none"
        },
        "img, video": {
            maxWidth: "100%",
            height: "auto"
        },
        "p, h1, h2, h3, h4, h5, h6": {
            overflowWrap: "break-word"
        },
        "ol, ul": {
            listStyle: "none"
        },
        "code, kbd, pre, samp": {
            fontSize: "1em"
        },
        "button, [type='button'], [type='reset'], [type='submit']": {
            WebkitAppearance: "button",
            backgroundColor: "transparent",
            backgroundImage: "none"
        },
        "button, input, optgroup, select, textarea": {
            color: "inherit"
        },
        "button, select": {
            textTransform: "none"
        },
        table: {
            textIndent: "0px",
            borderColor: "inherit",
            borderCollapse: "collapse"
        },
        "*::placeholder": {
            opacity: "unset",
            color: "#9ca3af",
            userSelect: "none"
        },
        textarea: {
            resize: "vertical"
        },
        summary: {
            display: "list-item"
        },
        small: {
            fontSize: "80%"
        },
        "sub, sup": {
            fontSize: "75%",
            lineHeight: 0,
            position: "relative",
            verticalAlign: "baseline"
        },
        sub: {
            bottom: "-0.25em"
        },
        sup: {
            top: "-0.5em"
        },
        dialog: {
            padding: "0px"
        },
        a: {
            color: "inherit",
            textDecoration: "inherit"
        },
        "abbr:where([title])": {
            textDecoration: "underline dotted"
        },
        "b, strong": {
            fontWeight: "bolder"
        },
        "code, kbd, samp, pre": {
            fontSize: "1em",
            "--font-mono-fallback": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New'",
            fontFamily: "var(--global-font-mono, var(--font-mono-fallback))"
        },
        'input[type="text"], input[type="email"], input[type="search"], input[type="password"]': {
            WebkitAppearance: "none",
            MozAppearance: "none"
        },
        "input[type='search']": {
            WebkitAppearance: "textfield",
            outlineOffset: "-2px"
        },
        "::-webkit-search-decoration, ::-webkit-search-cancel-button": {
            WebkitAppearance: "none"
        },
        "::-webkit-file-upload-button": {
            WebkitAppearance: "button",
            font: "inherit"
        },
        'input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button': {
            height: "auto"
        },
        "input[type='number']": {
            MozAppearance: "textfield"
        },
        ":-moz-ui-invalid": {
            boxShadow: "none"
        },
        ":-moz-focusring": {
            outline: "auto"
        },
        "[hidden]:where(:not([hidden='until-found']))": {
            display: "none !important"
        }
    };
    const preflightCss = {
        [scope || "html"]: {
            lineHeight: 1.5,
            "--font-fallback": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
            WebkitTextSizeAdjust: "100%",
            WebkitFontSmoothing: "antialiased",
            MozOsxFontSmoothing: "grayscale",
            textRendering: "optimizeLegibility",
            touchAction: "manipulation",
            MozTabSize: "4",
            tabSize: "4",
            fontFamily: "var(--global-font-body, var(--font-fallback))"
        }
    };
    if (level === "element") {
        const modified = Object.entries(scoped).reduce((acc, param)=>{
            let [k, v] = param;
            acc[k] = {
                [selector]: v
            };
            return acc;
        }, {});
        Object.assign(preflightCss, modified);
    } else if (selector) {
        preflightCss[selector] = scoped;
    } else {
        Object.assign(preflightCss, scoped);
    }
    return preflightCss;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/serialize.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createSerializeFn",
    ()=>createSerializeFn
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js [app-client] (ecmascript)");
"use strict";
;
;
function createSerializeFn(options) {
    const { conditions, isValidProperty } = options;
    return function serialize(styles) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(styles, (value)=>value, {
            getKey: (prop, value)=>{
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(value)) return prop;
                if (!conditions.has(prop) && !isValidProperty(prop)) {
                    return parseSelectors(prop).map((s)=>"&" + s).join(", ");
                }
                return prop;
            }
        });
    };
}
function parseSelectors(selector) {
    const result = [];
    let parenCount = 0;
    let currentSelector = "";
    let inEscape = false;
    for(let i = 0; i < selector.length; i++){
        const char = selector[i];
        if (char === "\\" && !inEscape) {
            inEscape = true;
            currentSelector += char;
            continue;
        }
        if (inEscape) {
            inEscape = false;
            currentSelector += char;
            continue;
        }
        if (char === "(") {
            parenCount++;
        } else if (char === ")") {
            parenCount--;
        }
        if (char === "," && parenCount === 0) {
            result.push(currentSelector.trim());
            currentSelector = "";
        } else {
            currentSelector += char;
        }
    }
    if (currentSelector) {
        result.push(currentSelector.trim());
    }
    return result;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/sva.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createSlotRecipeFn",
    ()=>createSlotRecipeFn,
    "getSlotCompoundVariant",
    ()=>getSlotCompoundVariant
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$omit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/omit.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$split$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/split-props.js [app-client] (ecmascript)");
"use strict";
;
;
const getSlotRecipes = function() {
    let config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const init = (slot)=>{
        var _config_base;
        var _config_base_slot, _config_defaultVariants;
        return {
            base: (_config_base_slot = (_config_base = config.base) === null || _config_base === void 0 ? void 0 : _config_base[slot]) !== null && _config_base_slot !== void 0 ? _config_base_slot : {},
            variants: {},
            defaultVariants: (_config_defaultVariants = config.defaultVariants) !== null && _config_defaultVariants !== void 0 ? _config_defaultVariants : {},
            compoundVariants: config.compoundVariants ? getSlotCompoundVariant(config.compoundVariants, slot) : []
        };
    };
    var _config_slots;
    const slots = (_config_slots = config.slots) !== null && _config_slots !== void 0 ? _config_slots : [];
    const entries = slots.map((slot)=>[
            slot,
            init(slot)
        ]);
    var _config_variants;
    for (const [variantsKey, variantsSpec] of Object.entries((_config_variants = config.variants) !== null && _config_variants !== void 0 ? _config_variants : {})){
        for (const [variantKey, variantSpec] of Object.entries(variantsSpec)){
            entries.forEach((param)=>{
                let [slot, slotRecipe] = param;
                var _a;
                var _variantsKey;
                (_variantsKey = (_a = slotRecipe.variants)[variantsKey]) !== null && _variantsKey !== void 0 ? _variantsKey : _a[variantsKey] = {};
                var _variantSpec_slot;
                slotRecipe.variants[variantsKey][variantKey] = (_variantSpec_slot = variantSpec[slot]) !== null && _variantSpec_slot !== void 0 ? _variantSpec_slot : {};
            });
        }
    }
    return Object.fromEntries(entries);
};
const getSlotCompoundVariant = (compoundVariants, slotName)=>compoundVariants.filter((compoundVariant)=>compoundVariant.css[slotName]).map((compoundVariant)=>({
            ...compoundVariant,
            css: compoundVariant.css[slotName]
        }));
function createSlotRecipeFn(options) {
    const { cva } = options;
    return function sva() {
        let config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const slots = Object.entries(getSlotRecipes(config)).map((param)=>{
            let [slot, slotCva] = param;
            return [
                slot,
                cva(slotCva)
            ];
        });
        function svaFn(props) {
            const result = slots.map((param)=>{
                let [slot, cvaFn] = param;
                return [
                    slot,
                    cvaFn(props)
                ];
            });
            return Object.fromEntries(result);
        }
        var _config_variants;
        const variants = (_config_variants = config.variants) !== null && _config_variants !== void 0 ? _config_variants : {};
        const variantKeys = Object.keys(variants);
        function splitVariantProps(props) {
            const restProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$omit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["omit"])(props, [
                "recipe"
            ]);
            const [recipeProps, localProps] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$split$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["splitProps"])(restProps, variantKeys);
            if (!variantKeys.includes("colorPalette")) {
                var _config_defaultVariants;
                recipeProps.colorPalette = props.colorPalette || ((_config_defaultVariants = config.defaultVariants) === null || _config_defaultVariants === void 0 ? void 0 : _config_defaultVariants.colorPalette);
            }
            if (variantKeys.includes("orientation")) {
                localProps.orientation = props.orientation;
            }
            return [
                recipeProps,
                localProps
            ];
        }
        const variantMap = Object.fromEntries(Object.entries(variants).map((param)=>{
            let [key, value] = param;
            return [
                key,
                Object.keys(value)
            ];
        }));
        let classNameMap = {};
        if (config.className) {
            classNameMap = Object.fromEntries(config.slots.map((slot)=>[
                    slot,
                    "".concat(config.className, "__").concat(slot)
                ]));
        }
        return Object.assign(svaFn, {
            variantMap,
            variantKeys,
            splitVariantProps,
            classNameMap
        });
    };
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/create-props.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createProps",
    ()=>createProps
]);
"use strict";
const createProps = ()=>(props)=>Array.from(new Set(props));
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/css-var.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "cssVar",
    ()=>cssVar
]);
"use strict";
const escRegex = /[^a-zA-Z0-9_\u0081-\uffff-]/g;
function esc(string) {
    return "".concat(string).replace(escRegex, (s)=>"\\".concat(s));
}
const dashCaseRegex = /[A-Z]/g;
function dashCase(string) {
    return string.replace(dashCaseRegex, (match)=>"-".concat(match.toLowerCase()));
}
function cssVar(name) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { fallback = "", prefix = "" } = options;
    const variable = dashCase([
        "-",
        prefix,
        esc(name)
    ].filter(Boolean).join("-"));
    return {
        var: variable,
        ref: "var(".concat(variable).concat(fallback ? ", ".concat(fallback) : "", ")")
    };
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/esc.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "esc",
    ()=>esc
]);
"use strict";
const rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|^-|[^\x80-\uFFFF\w-]/g;
const fcssescape = function(ch, asCodePoint) {
    if (!asCodePoint) return "\\" + ch;
    if (ch === "\0") return "\uFFFD";
    if (ch === "-" && ch.length === 1) return "\\-";
    return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16);
};
const esc = (sel)=>{
    return (sel + "").replace(rcssescape, fcssescape);
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/expand-reference.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "expandTokenReferences",
    ()=>expandTokenReferences
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$esc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/esc.js [app-client] (ecmascript)");
"use strict";
;
const expandTokenReferences = (str, resolve)=>{
    let expanded = "";
    let index = 0;
    let state = "char";
    let tokenPath = "";
    let fallback = "";
    const currentStates = [];
    while(index < str.length){
        const char = str[index];
        if (char === "{") {
            const endIndex = str.indexOf("}", index);
            if (endIndex === -1) {
                break;
            }
            const path = str.slice(index + 1, endIndex);
            const resolved = resolve(path);
            expanded += resolved !== null && resolved !== void 0 ? resolved : path;
            index = endIndex + 1;
            continue;
        }
        if (state === "token") {
            if (char === ",") {
                if (str[index] === "") {
                    index++;
                }
                state = "fallback";
                currentStates.push(state);
                const resolved = resolve(tokenPath);
                if (resolved === null || resolved === void 0 ? void 0 : resolved.endsWith(")")) {
                    expanded += resolved.slice(0, -1);
                }
                tokenPath = "";
                fallback = "";
                continue;
            }
        }
        if (state === "fallback") {
            const nextFallback = fallback + char;
            if (nextFallback === ", var(") {
                const innerEndIndex = cssVarParser(str.slice(index + 1));
                const endIndex = innerEndIndex + index + 1;
                const cssVar = str.slice(index + 1, endIndex);
                if (endIndex === -1) {
                    break;
                }
                expanded += ", var(" + cssVar + ")";
                index = endIndex + 1;
                var _currentStates_pop;
                state = (_currentStates_pop = currentStates.pop()) !== null && _currentStates_pop !== void 0 ? _currentStates_pop : state;
                fallback = "";
                continue;
            }
        }
        if (state === "token" || state === "fallback") {
            index++;
            if (char === ")") {
                var _currentStates_pop1, _ref;
                state = (_ref = (_currentStates_pop1 = currentStates.pop()) !== null && _currentStates_pop1 !== void 0 ? _currentStates_pop1 : state) !== null && _ref !== void 0 ? _ref : "char";
                fallback += char;
                var _resolve;
                const resolved = tokenPath ? (_resolve = resolve(tokenPath)) !== null && _resolve !== void 0 ? _resolve : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$esc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["esc"])(tokenPath) : tokenPath;
                if (fallback) {
                    fallback = fallback.slice(1).trim();
                    if (!fallback.startsWith("token(") && fallback.endsWith(")")) {
                        fallback = fallback.slice(0, -1);
                    }
                    if (fallback.includes("token(")) {
                        const parsed = expandTokenReferences(fallback, resolve);
                        if (parsed) {
                            fallback = parsed.slice(0, -1);
                        }
                    } else if (fallback) {
                        const resolvedFallback = resolve(fallback);
                        if (resolvedFallback) {
                            fallback = resolvedFallback;
                        }
                    }
                }
                const lastChar = expanded.at(-1);
                if (fallback) {
                    if (lastChar === null || lastChar === void 0 ? void 0 : lastChar.trim()) {
                        expanded += resolved.slice(0, -1) + (", " + fallback + ")");
                    } else {
                        expanded += fallback;
                    }
                } else {
                    expanded += resolved || ")";
                }
                tokenPath = "";
                fallback = "";
                state = "char";
                continue;
            }
            if (state === "token") {
                tokenPath += char;
            }
            if (state === "fallback") {
                fallback += char;
            }
            continue;
        }
        const tokenIndex = str.indexOf("token(", index);
        if (tokenIndex !== -1) {
            const innerTokenIndex = tokenIndex + "token(".length;
            expanded += str.slice(index, tokenIndex);
            index = innerTokenIndex;
            state = "token";
            currentStates.push(state);
            continue;
        }
        expanded += char;
        index++;
    }
    return expanded;
};
const cssVarParser = (str)=>{
    let index = 0;
    const openedParenthesises = [
        "("
    ];
    while(index < str.length){
        const char = str[index];
        if (char === "(") {
            openedParenthesises.push(char);
        } else if (char === ")") {
            openedParenthesises.pop();
            if (openedParenthesises.length === 0) {
                return index;
            }
        }
        index++;
    }
    return index;
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/map-to-json.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "mapToJson",
    ()=>mapToJson
]);
"use strict";
function mapToJson(map) {
    const obj = {};
    map.forEach((value, key)=>{
        if (value instanceof Map) {
            obj[key] = Object.fromEntries(value);
        } else {
            obj[key] = value;
        }
    });
    return obj;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/references.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "TOKEN_PATH_REGEX",
    ()=>TOKEN_PATH_REGEX,
    "expandReferences",
    ()=>expandReferences,
    "getReferences",
    ()=>getReferences,
    "hasReference",
    ()=>hasReference
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
"use strict";
;
const REFERENCE_REGEX = /({([^}]*)})/g;
const CURLY_REGEX = /[{}]/g;
const TOKEN_PATH_REGEX = /\w+\.\w+/;
const getReferences = (value)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(value)) return [];
    const matches = value.match(REFERENCE_REGEX);
    if (!matches) return [];
    return matches.map((match)=>match.replace(CURLY_REGEX, "")).map((value2)=>value2.trim());
};
const hasReference = (value)=>REFERENCE_REGEX.test(value);
function expandReferences(token) {
    var _token_extensions;
    if (!((_token_extensions = token.extensions) === null || _token_extensions === void 0 ? void 0 : _token_extensions.references)) {
        var _token_extensions_cssVar, _token_extensions1;
        var _token_extensions_cssVar_ref;
        return (_token_extensions_cssVar_ref = (_token_extensions1 = token.extensions) === null || _token_extensions1 === void 0 ? void 0 : (_token_extensions_cssVar = _token_extensions1.cssVar) === null || _token_extensions_cssVar === void 0 ? void 0 : _token_extensions_cssVar.ref) !== null && _token_extensions_cssVar_ref !== void 0 ? _token_extensions_cssVar_ref : token.value;
    }
    var _token_extensions_references;
    const references = (_token_extensions_references = token.extensions.references) !== null && _token_extensions_references !== void 0 ? _token_extensions_references : {};
    token.value = Object.keys(references).reduce((valueStr, key)=>{
        const referenceToken = references[key];
        if (referenceToken.extensions.conditions) {
            return valueStr;
        }
        const value = expandReferences(referenceToken);
        return valueStr.replace("{".concat(key, "}"), value);
    }, token.value);
    delete token.extensions.references;
    return token.value;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/calc.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "calc",
    ()=>calc
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
"use strict";
;
function resolveReference(operand) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(operand) && operand.reference) {
        return operand.reference;
    }
    return String(operand);
}
const toExpression = function(operator) {
    for(var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        operands[_key - 1] = arguments[_key];
    }
    return operands.map(resolveReference).join(" ".concat(operator, " ")).replace(/calc/g, "");
};
const add = function() {
    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
        operands[_key] = arguments[_key];
    }
    return "calc(".concat(toExpression("+", ...operands), ")");
};
const subtract = function() {
    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
        operands[_key] = arguments[_key];
    }
    return "calc(".concat(toExpression("-", ...operands), ")");
};
const multiply = function() {
    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
        operands[_key] = arguments[_key];
    }
    return "calc(".concat(toExpression("*", ...operands), ")");
};
const divide = function() {
    for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
        operands[_key] = arguments[_key];
    }
    return "calc(".concat(toExpression("/", ...operands), ")");
};
const negate = (x)=>{
    const value = resolveReference(x);
    if (value != null && !Number.isNaN(parseFloat(value))) {
        return String(value).startsWith("-") ? String(value).slice(1) : "-".concat(value);
    }
    return multiply(value, -1);
};
const calc = Object.assign((x)=>({
        add: function() {
            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
                operands[_key] = arguments[_key];
            }
            return calc(add(x, ...operands));
        },
        subtract: function() {
            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
                operands[_key] = arguments[_key];
            }
            return calc(subtract(x, ...operands));
        },
        multiply: function() {
            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
                operands[_key] = arguments[_key];
            }
            return calc(multiply(x, ...operands));
        },
        divide: function() {
            for(var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++){
                operands[_key] = arguments[_key];
            }
            return calc(divide(x, ...operands));
        },
        negate: ()=>calc(negate(x)),
        toString: ()=>x.toString()
    }), {
    add,
    subtract,
    multiply,
    divide,
    negate
});
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/token-middleware.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "addNegativeTokens",
    ()=>addNegativeTokens,
    "addPixelUnit",
    ()=>addPixelUnit,
    "addVirtualPalette",
    ()=>addVirtualPalette,
    "removeEmptyTokens",
    ()=>removeEmptyTokens,
    "tokenMiddlewares",
    ()=>tokenMiddlewares
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$calc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/calc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$unit$2d$conversion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/unit-conversion.js [app-client] (ecmascript)");
"use strict";
;
;
;
const addNegativeTokens = {
    enforce: "pre",
    transform (dictionary) {
        const { prefix, allTokens, formatCssVar, formatTokenName, registerToken } = dictionary;
        const tokens = allTokens.filter((param)=>{
            let { extensions } = param;
            return extensions.category === "spacing";
        });
        tokens.forEach((token)=>{
            const originalPath = token.path.slice();
            const originalVar = formatCssVar(originalPath, prefix);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(token.value) && token.value === "0rem") {
                return;
            }
            const nextToken = structuredClone(token);
            Object.assign(nextToken.extensions, {
                negative: true,
                prop: "-".concat(token.extensions.prop),
                originalPath
            });
            nextToken.value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$calc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["calc"].negate(originalVar.ref);
            const lastPath = nextToken.path[nextToken.path.length - 1];
            if (lastPath != null) {
                nextToken.path[nextToken.path.length - 1] = "-".concat(lastPath);
            }
            if (nextToken.path) {
                nextToken.name = formatTokenName(nextToken.path);
            }
            registerToken(nextToken);
        });
    }
};
const units = /* @__PURE__ */ new Set([
    "spacing",
    "sizes",
    "borderWidths",
    "fontSizes",
    "radii"
]);
const addPixelUnit = {
    enforce: "post",
    transform (dictionary) {
        const tokens = dictionary.allTokens.filter((token)=>{
            return units.has(token.extensions.category) && !token.extensions.negative;
        });
        tokens.forEach((token)=>{
            Object.assign(token.extensions, {
                pixelValue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$unit$2d$conversion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toPx"])(token.value)
            });
        });
    }
};
const addVirtualPalette = {
    enforce: "post",
    transform (dictionary) {
        const { allTokens, registerToken, formatTokenName } = dictionary;
        const tokens = allTokens.filter((param)=>{
            let { extensions } = param;
            return extensions.category === "colors";
        });
        const keys = /* @__PURE__ */ new Map();
        const colorPalettes = /* @__PURE__ */ new Map();
        tokens.forEach((token)=>{
            const { colorPalette } = token.extensions;
            if (!colorPalette) return;
            colorPalette.keys.forEach((keyPath)=>{
                keys.set(formatTokenName(keyPath), keyPath);
            });
            colorPalette.roots.forEach((colorPaletteRoot)=>{
                const name = formatTokenName(colorPaletteRoot);
                const colorPaletteList = colorPalettes.get(name) || [];
                colorPaletteList.push(token);
                colorPalettes.set(name, colorPaletteList);
                if (token.extensions.default && colorPaletteRoot.length === 1) {
                    var _colorPalette_keys_;
                    const keyPath = (_colorPalette_keys_ = colorPalette.keys[0]) === null || _colorPalette_keys_ === void 0 ? void 0 : _colorPalette_keys_.filter(Boolean);
                    if (!keyPath.length) return;
                    const path = colorPaletteRoot.concat(keyPath);
                    keys.set(formatTokenName(path), []);
                }
            });
        });
        keys.forEach((segments)=>{
            const path = [
                "colors",
                "colorPalette",
                ...segments
            ].filter(Boolean);
            const name = formatTokenName(path);
            const prop = formatTokenName(path.slice(1));
            const token = {
                name,
                value: name,
                originalValue: name,
                path,
                extensions: {
                    condition: "base",
                    originalPath: path,
                    category: "colors",
                    prop,
                    virtual: true
                }
            };
            registerToken(token, "pre");
        });
    }
};
const removeEmptyTokens = {
    enforce: "post",
    transform (dictionary) {
        dictionary.allTokens = dictionary.allTokens.filter((token)=>token.value !== "");
    }
};
const tokenMiddlewares = [
    addNegativeTokens,
    addVirtualPalette,
    addPixelUnit,
    removeEmptyTokens
];
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/token-transforms.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "addColorPalette",
    ()=>addColorPalette,
    "addConditionalCssVariables",
    ()=>addConditionalCssVariables,
    "addCssVariables",
    ()=>addCssVariables,
    "tokenTransforms",
    ()=>tokenTransforms
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$references$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/references.js [app-client] (ecmascript)");
"use strict";
;
const addCssVariables = {
    type: "extensions",
    enforce: "pre",
    name: "tokens/css-var",
    transform (token, dictionary) {
        const { prefix, formatCssVar } = dictionary;
        const { negative, originalPath } = token.extensions;
        const path = negative ? originalPath : token.path;
        return {
            cssVar: formatCssVar(path.filter(Boolean), prefix)
        };
    }
};
const addConditionalCssVariables = {
    enforce: "post",
    type: "value",
    name: "tokens/conditionals",
    transform (token, dictionary) {
        const { prefix, formatCssVar } = dictionary;
        const refs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$references$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getReferences"])(token.value);
        if (!refs.length) return token.value;
        refs.forEach((ref)=>{
            const variable = formatCssVar(ref.split("."), prefix);
            token.value = token.value.replace("{".concat(variable.ref, "}"), variable);
        });
        return token.value;
    }
};
const addColorPalette = {
    type: "extensions",
    enforce: "pre",
    name: "tokens/colors/colorPalette",
    match (token) {
        return token.extensions.category === "colors" && !token.extensions.virtual;
    },
    transform (token, dict) {
        let path = token.path.slice();
        path.pop();
        path.shift();
        if (path.length === 0) {
            const newPath = [
                ...token.path
            ];
            newPath.shift();
            path = newPath;
        }
        if (path.length === 0) {
            return {};
        }
        const roots = path.reduce((acc, _, i, arr)=>{
            const next = arr.slice(0, i + 1);
            acc.push(next);
            return acc;
        }, []);
        const root = path[0];
        const value = dict.formatTokenName(path);
        const keys = token.path.slice(token.path.indexOf(root) + 1).reduce((acc, _, i, arr)=>{
            acc.push(arr.slice(i));
            return acc;
        }, []);
        if (keys.length === 0) {
            keys.push([
                ""
            ]);
        }
        return {
            colorPalette: {
                value,
                roots,
                keys
            }
        };
    }
};
const tokenTransforms = [
    addCssVariables,
    addConditionalCssVariables,
    addColorPalette
];
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/token-dictionary.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createTokenDictionary",
    ()=>createTokenDictionary,
    "tokenCategories",
    ()=>tokenCategories
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/compact.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$create$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/create-props.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/memo.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2d$var$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/css-var.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$esc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/esc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$expand$2d$reference$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/expand-reference.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$map$2d$to$2d$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/map-to-json.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$references$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/references.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$token$2d$middleware$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/token-middleware.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$token$2d$transforms$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/token-transforms.js [app-client] (ecmascript)");
"use strict";
;
;
;
;
;
;
;
;
;
;
;
;
const isToken = (value)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(value) && Object.prototype.hasOwnProperty.call(value, "value");
};
function expandBreakpoints(breakpoints) {
    if (!breakpoints) return {
        breakpoints: {},
        sizes: {}
    };
    return {
        breakpoints: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mapObject"])(breakpoints, (value)=>({
                value
            })),
        sizes: Object.fromEntries(Object.entries(breakpoints).map((param)=>{
            let [key, value] = param;
            return [
                "breakpoint-".concat(key),
                {
                    value
                }
            ];
        }))
    };
}
function createTokenDictionary(options) {
    const { prefix = "", tokens = {}, semanticTokens = {}, breakpoints = {} } = options;
    const formatTokenName = (path)=>path.join(".");
    const formatCssVar = (path, prefix2)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2d$var$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cssVar"])(path.join("-"), {
            prefix: prefix2
        });
    const allTokens = [];
    const tokenNameMap = /* @__PURE__ */ new Map();
    const conditionMap = /* @__PURE__ */ new Map();
    const cssVarMap = /* @__PURE__ */ new Map();
    const colorPaletteMap = /* @__PURE__ */ new Map();
    const flatMap = /* @__PURE__ */ new Map();
    const byCategory = /* @__PURE__ */ new Map();
    const categoryMap = /* @__PURE__ */ new Map();
    const transforms = /* @__PURE__ */ new Map();
    const middlewares = [];
    function registerToken(token, phase) {
        allTokens.push(token);
        tokenNameMap.set(token.name, token);
        if (phase) {
            transforms.forEach((fn)=>{
                if (fn.enforce === phase) transformToken(fn, token);
            });
        }
    }
    const breakpointTokens = expandBreakpoints(breakpoints);
    const computedTokens = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compact"])({
        ...tokens,
        breakpoints: breakpointTokens.breakpoints,
        sizes: {
            ...tokens.sizes,
            ...breakpointTokens.sizes
        }
    });
    function registerTokens() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(computedTokens, (entry, path)=>{
            const isDefault = path.includes("DEFAULT");
            path = filterDefault(path);
            const category = path[0];
            const name = formatTokenName(path);
            const t = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(entry) ? {
                value: entry
            } : entry;
            const token = {
                value: t.value,
                originalValue: t.value,
                name,
                path,
                extensions: {
                    condition: "base",
                    originalPath: path,
                    category,
                    prop: formatTokenName(path.slice(1))
                }
            };
            if (isDefault) {
                token.extensions.default = true;
            }
            registerToken(token);
        }, {
            stop: isToken
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(semanticTokens, (entry, path)=>{
            const isDefault = path.includes("DEFAULT");
            path = filterBaseCondition(filterDefault(path));
            const category = path[0];
            const name = formatTokenName(path);
            const t = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(entry.value) ? {
                value: {
                    base: entry.value
                }
            } : entry;
            const token = {
                value: t.value.base || "",
                originalValue: t.value.base || "",
                name,
                path,
                extensions: {
                    originalPath: path,
                    category,
                    conditions: t.value,
                    condition: "base",
                    prop: formatTokenName(path.slice(1))
                }
            };
            if (isDefault) {
                token.extensions.default = true;
            }
            registerToken(token);
        }, {
            stop: isToken
        });
    }
    function getByName(name) {
        return tokenNameMap.get(name);
    }
    function buildConditionMap(token) {
        const { condition } = token.extensions;
        if (!condition) return;
        if (!conditionMap.has(condition)) {
            conditionMap.set(condition, /* @__PURE__ */ new Set());
        }
        conditionMap.get(condition).add(token);
    }
    function buildCategoryMap(token) {
        const { category, prop } = token.extensions;
        if (!category) return;
        if (!categoryMap.has(category)) {
            categoryMap.set(category, /* @__PURE__ */ new Map());
        }
        categoryMap.get(category).set(prop, token);
    }
    function buildCssVars(token) {
        const { condition, negative, virtual, cssVar: cssVar2 } = token.extensions;
        if (negative || virtual || !condition || !cssVar2) return;
        if (!cssVarMap.has(condition)) {
            cssVarMap.set(condition, /* @__PURE__ */ new Map());
        }
        cssVarMap.get(condition).set(cssVar2.var, token.value);
    }
    function buildFlatMap(token) {
        const { category, prop, cssVar: cssVar2, negative } = token.extensions;
        if (!category) return;
        if (!byCategory.has(category)) {
            byCategory.set(category, /* @__PURE__ */ new Map());
        }
        const value = negative ? token.extensions.conditions ? token.originalValue : token.value : cssVar2.ref;
        byCategory.get(category).set(prop, value);
        flatMap.set([
            category,
            prop
        ].join("."), value);
    }
    function buildColorPalette(token) {
        const { colorPalette, virtual, default: isDefault } = token.extensions;
        if (!colorPalette || virtual) return;
        colorPalette.roots.forEach((root)=>{
            const name = formatTokenName(root);
            if (!colorPaletteMap.has(name)) {
                colorPaletteMap.set(name, /* @__PURE__ */ new Map());
            }
            const virtualPath = replaceRootWithColorPalette([
                ...token.path
            ], [
                ...root
            ]);
            const virtualName = formatTokenName(virtualPath);
            const virtualToken = getByName(virtualName);
            if (!virtualToken || !virtualToken.extensions.cssVar) return;
            const { var: virtualVar } = virtualToken.extensions.cssVar;
            colorPaletteMap.get(name).set(virtualVar, token.extensions.cssVar.ref);
            if (isDefault && root.length === 1) {
                var _colorPalette_keys_;
                const colorPaletteName = formatTokenName([
                    "colors",
                    "colorPalette"
                ]);
                const colorPaletteToken = getByName(colorPaletteName);
                if (!colorPaletteToken) return;
                const name2 = formatTokenName(token.path);
                const virtualToken2 = getByName(name2);
                if (!virtualToken2) return;
                const keyPath = (_colorPalette_keys_ = colorPalette.keys[0]) === null || _colorPalette_keys_ === void 0 ? void 0 : _colorPalette_keys_.filter(Boolean);
                if (!keyPath.length) return;
                const computedName = formatTokenName(root.concat(keyPath));
                if (!colorPaletteMap.has(computedName)) {
                    colorPaletteMap.set(computedName, /* @__PURE__ */ new Map());
                }
                colorPaletteMap.get(computedName).set(colorPaletteToken.extensions.cssVar.var, virtualToken2.extensions.cssVar.ref);
            }
        });
    }
    let byCategoryJson = {};
    function setupViews() {
        allTokens.forEach((token)=>{
            buildConditionMap(token);
            buildCategoryMap(token);
            buildCssVars(token);
            buildFlatMap(token);
            buildColorPalette(token);
        });
        byCategoryJson = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$map$2d$to$2d$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mapToJson"])(byCategory);
    }
    const colorMix = (value, tokenFn)=>{
        var _getByName;
        if (!value || typeof value !== "string") return {
            invalid: true,
            value
        };
        const [colorPath, rawOpacity] = value.split("/");
        if (!colorPath || !rawOpacity) {
            return {
                invalid: true,
                value: colorPath
            };
        }
        const colorToken = tokenFn(colorPath);
        const opacityToken = (_getByName = getByName("opacity.".concat(rawOpacity))) === null || _getByName === void 0 ? void 0 : _getByName.value;
        if (!opacityToken && isNaN(Number(rawOpacity))) {
            return {
                invalid: true,
                value: colorPath
            };
        }
        const percent = opacityToken ? Number(opacityToken) * 100 + "%" : "".concat(rawOpacity, "%");
        const color = colorToken !== null && colorToken !== void 0 ? colorToken : colorPath;
        return {
            invalid: false,
            color,
            value: "color-mix(in srgb, ".concat(color, " ").concat(percent, ", transparent)")
        };
    };
    const getVar = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((value, fallback)=>{
        var _flatMap_get;
        return (_flatMap_get = flatMap.get(value)) !== null && _flatMap_get !== void 0 ? _flatMap_get : fallback;
    });
    const getCategoryValues = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((category)=>{
        return byCategoryJson[category] || null;
    });
    const expandReferenceInValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((value)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$expand$2d$reference$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["expandTokenReferences"])(value, (path)=>{
            if (!path) return;
            if (path.includes("/")) {
                const mix = colorMix(path, (v)=>getVar(v));
                if (mix.invalid) {
                    throw new Error("Invalid color mix at " + path + ": " + mix.value);
                }
                return mix.value;
            }
            const resolved = getVar(path);
            if (resolved) return resolved;
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$references$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TOKEN_PATH_REGEX"].test(path) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$esc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["esc"])(path) : path;
        });
    });
    const dictionary = {
        prefix,
        allTokens,
        tokenMap: tokenNameMap,
        registerToken,
        getByName,
        formatTokenName,
        formatCssVar,
        flatMap,
        cssVarMap,
        categoryMap,
        colorPaletteMap,
        getVar,
        getCategoryValues,
        expandReferenceInValue
    };
    function registerTransform() {
        for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){
            fns[_key] = arguments[_key];
        }
        fns.forEach((fn)=>{
            transforms.set(fn.name, fn);
        });
    }
    function registerMiddleware() {
        for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){
            fns[_key] = arguments[_key];
        }
        middlewares.push(...fns);
    }
    function transformToken(transform, token) {
        if (token.extensions.references) return;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(transform.match) && !transform.match(token)) return;
        const fn = (v)=>transform.transform(v, dictionary);
        const transformed = fn(token);
        switch(true){
            case transform.type === "extensions":
                Object.assign(token.extensions, transformed);
                break;
            case transform.type === "value":
                token.value = transformed;
                break;
            default:
                token[transform.type] = transformed;
                break;
        }
    }
    function applyMiddlewares(enforce) {
        middlewares.forEach((middleware)=>{
            if (middleware.enforce === enforce) {
                middleware.transform(dictionary);
            }
        });
    }
    function applyTransforms(enforce) {
        transforms.forEach((transform)=>{
            if (transform.enforce === enforce) {
                allTokens.forEach((token)=>{
                    transformToken(transform, token);
                });
            }
        });
    }
    function addConditionalTokens() {
        allTokens.forEach((token)=>{
            const tokens2 = getConditionalTokens(token);
            if (!tokens2 || tokens2.length === 0) return;
            tokens2.forEach((token2)=>{
                registerToken(token2);
            });
        });
    }
    function getTokenReferences(value) {
        const refs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$references$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getReferences"])(value);
        return refs.map((ref)=>getByName(ref)).filter(Boolean);
    }
    function addReferences() {
        allTokens.forEach((token)=>{
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$references$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasReference"])(token.value)) return;
            const references = getTokenReferences(token.value);
            token.extensions.references = references.reduce((acc, ref)=>{
                acc[ref.name] = ref;
                return acc;
            }, {});
        });
    }
    function expandTokenReferences$1() {
        allTokens.forEach((token)=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$references$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["expandReferences"])(token);
        });
    }
    function build() {
        applyMiddlewares("pre");
        applyTransforms("pre");
        addConditionalTokens();
        addReferences();
        expandTokenReferences$1();
        applyMiddlewares("post");
        applyTransforms("post");
        setupViews();
    }
    registerTokens();
    registerTransform(...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$token$2d$transforms$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tokenTransforms"]);
    registerMiddleware(...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$token$2d$middleware$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tokenMiddlewares"]);
    build();
    return dictionary;
}
function filterDefault(path) {
    if (path[0] === "DEFAULT") return path;
    return path.filter((item)=>item !== "DEFAULT");
}
function filterBaseCondition(path) {
    return path.filter((item)=>item !== "base");
}
function getConditionalTokens(token) {
    if (!token.extensions.conditions) return;
    const { conditions } = token.extensions;
    const tokens = [];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(conditions, (value, path)=>{
        const nextPath = filterBaseCondition(path);
        if (!nextPath.length) return;
        const nextToken = structuredClone(token);
        nextToken.value = value;
        nextToken.extensions.condition = nextPath.join(":");
        tokens.push(nextToken);
    });
    return tokens;
}
function replaceRootWithColorPalette(path, roots) {
    const startIndex = path.findIndex((_, index)=>roots.every((rootElement, rootIndex)=>path[index + rootIndex] === rootElement));
    if (startIndex === -1) {
        return path;
    }
    path.splice(startIndex, roots.length);
    path.splice(startIndex, 0, "colorPalette");
    return path;
}
const tokenCategories = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$create$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "aspectRatios",
    "zIndex",
    "opacity",
    "colors",
    "fonts",
    "fontSizes",
    "fontWeights",
    "lineHeights",
    "letterSpacings",
    "sizes",
    "shadows",
    "spacing",
    "radii",
    "cursor",
    "borders",
    "borderWidths",
    "borderStyles",
    "durations",
    "easings",
    "animations",
    "blurs",
    "gradients",
    "breakpoints",
    "assets"
]);
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/color-mix.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "colorMix",
    ()=>colorMix,
    "createColorMixTransform",
    ()=>createColorMixTransform
]);
"use strict";
const colorMix = (value, token)=>{
    var _token_raw;
    if (!value || typeof value !== "string") {
        return {
            invalid: true,
            value
        };
    }
    const [rawColor, rawOpacity] = value.split("/");
    if (!rawColor || !rawOpacity || rawColor === "currentBg") {
        return {
            invalid: true,
            value: rawColor
        };
    }
    const colorToken = token("colors.".concat(rawColor));
    const opacityToken = (_token_raw = token.raw("opacity.".concat(rawOpacity))) === null || _token_raw === void 0 ? void 0 : _token_raw.value;
    if (!opacityToken && isNaN(Number(rawOpacity))) {
        return {
            invalid: true,
            value: rawColor
        };
    }
    const percent = opacityToken ? Number(opacityToken) * 100 + "%" : "".concat(rawOpacity, "%");
    const color = colorToken !== null && colorToken !== void 0 ? colorToken : rawColor;
    return {
        invalid: false,
        color,
        value: "color-mix(in srgb, ".concat(color, " ").concat(percent, ", transparent)")
    };
};
const createColorMixTransform = (prop)=>(value, args)=>{
        const mix = args.utils.colorMix(value);
        if (mix.invalid) return {
            [prop]: value
        };
        const cssVar = "--mix-" + prop;
        return {
            [cssVar]: mix.value,
            [prop]: "var(".concat(cssVar, ", ").concat(mix.color, ")")
        };
    };
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/utility.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createUtility",
    ()=>createUtility
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/memo.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/color-mix.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$map$2d$to$2d$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/map-to-json.js [app-client] (ecmascript)");
"use strict";
;
;
;
;
function normalize(config) {
    return config;
}
function normalizeConfig(config) {
    return Object.fromEntries(Object.entries(config).map((param)=>{
        let [property, propertyConfig] = param;
        return [
            property,
            normalize(propertyConfig)
        ];
    }));
}
function createUtility(options) {
    const configs = normalizeConfig(options.config);
    const tokens = options.tokens;
    const shorthands = /* @__PURE__ */ new Map();
    const propValues = /* @__PURE__ */ new Map();
    function register(property, config) {
        configs[property] = normalize(config);
        assignProperty(property, config);
    }
    const assignProperty = (property, config)=>{
        const values = getPropertyValues(config);
        if (!values) return;
        propValues.set(property, values);
        assignPropertyType(property, config);
    };
    const assignProperties = ()=>{
        for (const [prop, config] of Object.entries(configs)){
            if (!config) continue;
            assignProperty(prop, config);
        }
    };
    const assignShorthands = ()=>{
        for (const [property, config] of Object.entries(configs)){
            const { shorthand } = config !== null && config !== void 0 ? config : {};
            if (!shorthand) continue;
            const values = Array.isArray(shorthand) ? shorthand : [
                shorthand
            ];
            values.forEach((name)=>shorthands.set(name, property));
        }
    };
    const assignColorPaletteProperty = ()=>{
        const values = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$map$2d$to$2d$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mapToJson"])(tokens.colorPaletteMap);
        register("colorPalette", {
            values: Object.keys(values),
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((value)=>values[value])
        });
    };
    const propTypes = /* @__PURE__ */ new Map();
    const assignPropertyType = (property, config)=>{
        if (!config) return;
        const values = getPropertyValues(config, (key)=>'type:Tokens["'.concat(key, '"]'));
        if (typeof values === "object" && values.type) {
            propTypes.set(property, /* @__PURE__ */ new Set([
                "type:".concat(values.type)
            ]));
            return;
        }
        if (values) {
            const keys2 = new Set(Object.keys(values));
            propTypes.set(property, keys2);
        }
        var _propTypes_get;
        const set = (_propTypes_get = propTypes.get(property)) !== null && _propTypes_get !== void 0 ? _propTypes_get : /* @__PURE__ */ new Set();
        if (config.property) {
            propTypes.set(property, set.add('CssProperties["'.concat(config.property, '"]')));
        }
    };
    const assignPropertyTypes = ()=>{
        for (const [property, propertyConfig] of Object.entries(configs)){
            if (!propertyConfig) continue;
            assignPropertyType(property, propertyConfig);
        }
    };
    const addPropertyType = (property, type)=>{
        var _propTypes_get;
        const set = (_propTypes_get = propTypes.get(property)) !== null && _propTypes_get !== void 0 ? _propTypes_get : /* @__PURE__ */ new Set();
        propTypes.set(property, /* @__PURE__ */ new Set([
            ...set,
            ...type
        ]));
    };
    const getTypes = ()=>{
        const map = /* @__PURE__ */ new Map();
        for (const [prop, values] of propTypes.entries()){
            if (values.size === 0) {
                map.set(prop, [
                    "string"
                ]);
                continue;
            }
            const typeValues = Array.from(values).map((key)=>{
                if (key.startsWith("CssProperties")) return key;
                if (key.startsWith("type:")) return key.replace("type:", "");
                return JSON.stringify(key);
            });
            map.set(prop, typeValues);
        }
        return map;
    };
    const getPropertyValues = (config, resolveFn)=>{
        const { values } = config;
        const fn = (key)=>{
            const value = resolveFn === null || resolveFn === void 0 ? void 0 : resolveFn(key);
            return value ? {
                [value]: value
            } : void 0;
        };
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(values)) {
            var _fn, _ref;
            return (_ref = (_fn = fn === null || fn === void 0 ? void 0 : fn(values)) !== null && _fn !== void 0 ? _fn : tokens.getCategoryValues(values)) !== null && _ref !== void 0 ? _ref : {};
        }
        if (Array.isArray(values)) {
            return values.reduce((result, value)=>{
                result[value] = value;
                return result;
            }, {});
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(values)) {
            return values(resolveFn ? fn : tokens.getCategoryValues);
        }
        return values;
    };
    const defaultTransform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((prop, value)=>{
        return {
            [prop]: prop.startsWith("--") ? tokens.getVar(value, value) : value
        };
    });
    const tokenFn = Object.assign(tokens.getVar, {
        raw: (path)=>tokens.getByName(path)
    });
    const transform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((prop, raw)=>{
        var _propValues_get;
        const key = resolveShorthand(prop);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(raw) && !raw.includes("_EMO_")) {
            raw = tokens.expandReferenceInValue(raw);
        }
        const config = configs[key];
        if (!config) {
            return defaultTransform(key, raw);
        }
        const value = (_propValues_get = propValues.get(key)) === null || _propValues_get === void 0 ? void 0 : _propValues_get[raw];
        if (!config.transform) {
            return defaultTransform(prop, value !== null && value !== void 0 ? value : raw);
        }
        const _colorMix = (value2)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["colorMix"])(value2, tokenFn);
        return config.transform(value !== null && value !== void 0 ? value : raw, {
            raw,
            token: tokenFn,
            utils: {
                colorMix: _colorMix
            }
        });
    });
    function build() {
        assignShorthands();
        assignColorPaletteProperty();
        assignProperties();
        assignPropertyTypes();
    }
    build();
    const hasShorthand = shorthands.size > 0;
    const resolveShorthand = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((prop)=>{
        var _shorthands_get;
        return (_shorthands_get = shorthands.get(prop)) !== null && _shorthands_get !== void 0 ? _shorthands_get : prop;
    });
    const keys = ()=>{
        return [
            ...Array.from(shorthands.keys()),
            ...Object.keys(configs)
        ];
    };
    const instance = {
        keys,
        hasShorthand,
        transform,
        shorthands,
        resolveShorthand,
        register,
        getTypes,
        addPropertyType
    };
    return instance;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/utils/clone.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "clone",
    ()=>clone
]);
"use strict";
function clone(obj) {
    if (obj === null || typeof obj !== "object") return obj;
    if (Array.isArray(obj)) return obj.map((prop)=>clone(prop));
    const _clone = Object.create(Object.getPrototypeOf(obj));
    for (const key of Object.keys(obj)){
        _clone[key] = clone(obj[key]);
    }
    return _clone;
}
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/merge-config.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "mergeConfigs",
    ()=>mergeConfigs
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/clone.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/merge.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/walk-object.js [app-client] (ecmascript)");
"use strict";
;
;
;
const tokenKeys = [
    "value",
    "type",
    "description"
];
const isValidToken = (token)=>{
    return token && typeof token === "object" && !Array.isArray(token);
};
const mergeConfigs = function() {
    for(var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++){
        configs[_key] = arguments[_key];
    }
    var _merged_theme;
    const merged = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeWith"])({}, ...configs.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"]));
    if ((_merged_theme = merged.theme) === null || _merged_theme === void 0 ? void 0 : _merged_theme.tokens) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$walk$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walkObject"])(merged.theme.tokens, (value)=>{
            const keys = Object.keys(value);
            const nestedKeys = keys.filter((k)=>!tokenKeys.includes(k));
            const hasNested = nestedKeys.length > 0;
            const hasTokenProps = tokenKeys.some((k)=>value[k] != null);
            if (hasNested && hasTokenProps) {
                value.DEFAULT || (value.DEFAULT = {});
                tokenKeys.forEach((key)=>{
                    var _a;
                    if (value[key] == null) return;
                    (_a = value.DEFAULT)[key] || (_a[key] = value[key]);
                    delete value[key];
                });
            }
            return value;
        }, {
            stop (value) {
                return isValidToken(value) && Object.keys(value).some((k)=>tokenKeys.includes(k) || k !== k.toLowerCase() && k !== k.toUpperCase());
            }
        });
    }
    return merged;
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/system.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createSystem",
    ()=>createSystem,
    "isValidSystem",
    ()=>isValidSystem
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$pandacss$2f$is$2d$valid$2d$prop$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@pandacss/is-valid-prop/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/compact.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/flatten.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/memo.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/merge.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$split$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/utils/split-props.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$breakpoints$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/breakpoints.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$conditions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/conditions.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/css.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$cva$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/cva.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$layers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/layers.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$normalize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/normalize.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$preflight$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/preflight.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$serialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/serialize.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$sva$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/sva.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$token$2d$dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/token-dictionary.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/utility.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$merge$2d$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/merge-config.js [app-client] (ecmascript)");
"use strict";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const EMPTY_OBJECT = {};
function createSystem() {
    for(var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++){
        configs[_key] = arguments[_key];
    }
    const config = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$merge$2d$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeConfigs"])(...configs);
    const { theme = {}, utilities = {}, globalCss = {}, cssVarsRoot = ":where(:root, :host)", cssVarsPrefix = "chakra", preflight } = config;
    const layers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$layers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createLayers"])(config);
    const tokens = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$token$2d$dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTokenDictionary"])({
        breakpoints: theme.breakpoints,
        tokens: theme.tokens,
        semanticTokens: theme.semanticTokens,
        prefix: cssVarsPrefix
    });
    var _theme_breakpoints;
    const breakpoints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$breakpoints$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBreakpoints"])((_theme_breakpoints = theme.breakpoints) !== null && _theme_breakpoints !== void 0 ? _theme_breakpoints : EMPTY_OBJECT);
    var _config_conditions;
    const conditions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$conditions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConditions"])({
        conditions: (_config_conditions = config.conditions) !== null && _config_conditions !== void 0 ? _config_conditions : EMPTY_OBJECT,
        breakpoints
    });
    const utility = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createUtility"])({
        config: utilities,
        tokens
    });
    function assignComposition() {
        const { textStyles, layerStyles, animationStyles } = theme;
        const compositions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$compact$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compact"])({
            textStyle: textStyles,
            layerStyle: layerStyles,
            animationStyle: animationStyles
        });
        for (const [key, values] of Object.entries(compositions)){
            const flatValues = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["flatten"])(values !== null && values !== void 0 ? values : EMPTY_OBJECT, stop);
            utility.register(key, {
                values: Object.keys(flatValues),
                transform (value) {
                    return css(flatValues[value]);
                }
            });
        }
    }
    assignComposition();
    var _theme_keyframes;
    utility.addPropertyType("animationName", Object.keys((_theme_keyframes = theme.keyframes) !== null && _theme_keyframes !== void 0 ? _theme_keyframes : EMPTY_OBJECT));
    const properties = /* @__PURE__ */ new Set([
        "css",
        ...utility.keys(),
        ...conditions.keys()
    ]);
    const isValidProperty = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$memo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["memo"])((prop)=>properties.has(prop) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$pandacss$2f$is$2d$valid$2d$prop$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCssProperty"])(prop));
    const normalizeValue = (value)=>{
        if (Array.isArray(value)) {
            return value.reduce((acc, current, index)=>{
                const key = conditions.breakpoints[index];
                if (current != null) acc[key] = current;
                return acc;
            }, {});
        }
        return value;
    };
    const normalizeFn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$normalize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNormalizeFn"])({
        utility,
        normalize: normalizeValue
    });
    const serialize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$serialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSerializeFn"])({
        conditions,
        isValidProperty
    });
    const css = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createCssFn"])({
        transform: utility.transform,
        conditions,
        normalize: normalizeFn
    });
    const cva = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$cva$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRecipeFn"])({
        css,
        conditions,
        normalize: normalizeFn,
        layers
    });
    const sva = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$sva$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSlotRecipeFn"])({
        cva
    });
    function getTokenCss() {
        const result = {};
        for (const [key, values] of tokens.cssVarMap.entries()){
            const varsObj = Object.fromEntries(values);
            if (Object.keys(varsObj).length === 0) continue;
            const selector = key === "base" ? cssVarsRoot : conditions.resolve(key);
            const isAtRule = selector.startsWith("@");
            const cssObject = css(serialize({
                [selector]: isAtRule ? {
                    [cssVarsRoot]: varsObj
                } : varsObj
            }));
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeWith"])(result, cssObject);
        }
        return layers.wrap("tokens", result);
    }
    function getGlobalCss() {
        var _theme_keyframes;
        const keyframes = Object.fromEntries(Object.entries((_theme_keyframes = theme.keyframes) !== null && _theme_keyframes !== void 0 ? _theme_keyframes : EMPTY_OBJECT).map((param)=>{
            let [key, value] = param;
            return [
                "@keyframes ".concat(key),
                value
            ];
        }));
        const result = Object.assign({}, keyframes, css(serialize(globalCss)));
        return layers.wrap("base", result);
    }
    function splitCssProps(props) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$split$2d$props$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["splitProps"])(props, isValidProperty);
    }
    function getPreflightCss() {
        const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$preflight$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createPreflight"])({
            preflight
        });
        return layers.wrap("reset", result);
    }
    const tokenMap = getTokenMap(tokens);
    const tokenFn = (path, fallback)=>{
        var _tokenMap_get;
        return ((_tokenMap_get = tokenMap.get(path)) === null || _tokenMap_get === void 0 ? void 0 : _tokenMap_get.value) || fallback;
    };
    tokenFn.var = (path, fallback)=>{
        var _tokenMap_get;
        return ((_tokenMap_get = tokenMap.get(path)) === null || _tokenMap_get === void 0 ? void 0 : _tokenMap_get.variable) || fallback;
    };
    function getRecipe(key, fallback) {
        var _theme_recipes;
        var _theme_recipes_key;
        return (_theme_recipes_key = (_theme_recipes = theme.recipes) === null || _theme_recipes === void 0 ? void 0 : _theme_recipes[key]) !== null && _theme_recipes_key !== void 0 ? _theme_recipes_key : fallback;
    }
    function getSlotRecipe(key, fallback) {
        var _theme_slotRecipes;
        var _theme_slotRecipes_key;
        return (_theme_slotRecipes_key = (_theme_slotRecipes = theme.slotRecipes) === null || _theme_slotRecipes === void 0 ? void 0 : _theme_slotRecipes[key]) !== null && _theme_slotRecipes_key !== void 0 ? _theme_slotRecipes_key : fallback;
    }
    function isRecipe(key) {
        var _theme_recipes;
        return Object.hasOwnProperty.call((_theme_recipes = theme.recipes) !== null && _theme_recipes !== void 0 ? _theme_recipes : EMPTY_OBJECT, key);
    }
    function isSlotRecipe(key) {
        var _theme_slotRecipes;
        return Object.hasOwnProperty.call((_theme_slotRecipes = theme.slotRecipes) !== null && _theme_slotRecipes !== void 0 ? _theme_slotRecipes : EMPTY_OBJECT, key);
    }
    function hasRecipe(key) {
        return isRecipe(key) || isSlotRecipe(key);
    }
    const _global = [
        getPreflightCss(),
        getGlobalCss(),
        getTokenCss()
    ];
    var _theme_layerStyles, _theme_textStyles, _theme_animationStyles, _theme_tokens, _theme_semanticTokens, _theme_keyframes1, _theme_breakpoints1;
    const query = {
        layerStyles: compositionQuery((_theme_layerStyles = theme.layerStyles) !== null && _theme_layerStyles !== void 0 ? _theme_layerStyles : EMPTY_OBJECT),
        textStyles: compositionQuery((_theme_textStyles = theme.textStyles) !== null && _theme_textStyles !== void 0 ? _theme_textStyles : EMPTY_OBJECT),
        animationStyles: compositionQuery((_theme_animationStyles = theme.animationStyles) !== null && _theme_animationStyles !== void 0 ? _theme_animationStyles : EMPTY_OBJECT),
        tokens: semanticTokenQuery(tokens, Object.keys((_theme_tokens = theme.tokens) !== null && _theme_tokens !== void 0 ? _theme_tokens : EMPTY_OBJECT), (value, key)=>!value.extensions.conditions && !key.includes("colorPalette")),
        semanticTokens: semanticTokenQuery(tokens, Object.keys((_theme_semanticTokens = theme.semanticTokens) !== null && _theme_semanticTokens !== void 0 ? _theme_semanticTokens : EMPTY_OBJECT), (value)=>!!value.extensions.conditions),
        keyframes: basicQuery((_theme_keyframes1 = theme.keyframes) !== null && _theme_keyframes1 !== void 0 ? _theme_keyframes1 : EMPTY_OBJECT),
        breakpoints: basicQuery((_theme_breakpoints1 = theme.breakpoints) !== null && _theme_breakpoints1 !== void 0 ? _theme_breakpoints1 : EMPTY_OBJECT)
    };
    return {
        $$chakra: true,
        _config: config,
        _global,
        breakpoints,
        tokens,
        conditions,
        utility,
        token: tokenFn,
        properties,
        layers,
        isValidProperty,
        splitCssProps,
        normalizeValue,
        getTokenCss,
        getGlobalCss,
        getPreflightCss,
        css,
        cva,
        sva,
        getRecipe,
        getSlotRecipe,
        hasRecipe,
        isRecipe,
        isSlotRecipe,
        query
    };
}
function getTokenMap(tokens) {
    const map = /* @__PURE__ */ new Map();
    tokens.allTokens.forEach((token)=>{
        const { cssVar, virtual, conditions } = token.extensions;
        const value = !!conditions || virtual ? cssVar.ref : token.value;
        map.set(token.name, {
            value,
            variable: cssVar.ref
        });
    });
    return map;
}
const isValidSystem = (mod)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(mod) && !!Reflect.get(mod, "$$chakra");
};
const stop = (v)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(v) && "value" in v;
const compositionQuery = (dict)=>({
        list () {
            return Object.keys((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$utils$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["flatten"])(dict, stop));
        },
        search (query) {
            return this.list().filter((style)=>style.includes(query));
        }
    });
const semanticTokenQuery = (tokens, categoryKeys, predicate)=>({
        categoryKeys,
        list (category) {
            var _tokens_categoryMap_get;
            var _tokens_categoryMap_get_entries;
            return Array.from((_tokens_categoryMap_get_entries = (_tokens_categoryMap_get = tokens.categoryMap.get(category)) === null || _tokens_categoryMap_get === void 0 ? void 0 : _tokens_categoryMap_get.entries()) !== null && _tokens_categoryMap_get_entries !== void 0 ? _tokens_categoryMap_get_entries : []).reduce((acc, param)=>{
                let [key, value] = param;
                if (predicate(value, key)) acc.push(key);
                return acc;
            }, []);
        },
        search (category, query) {
            return this.list(category).filter((style)=>style.includes(query));
        }
    });
const basicQuery = (dict)=>({
        list () {
            return Object.keys(dict);
        },
        search (query) {
            return this.list().filter((style)=>style.includes(query));
        }
    });
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/config.js [app-client] (ecmascript) <locals>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "defineAnimationStyles",
    ()=>defineAnimationStyles,
    "defineConditions",
    ()=>defineConditions,
    "defineConfig",
    ()=>defineConfig,
    "defineGlobalStyles",
    ()=>defineGlobalStyles,
    "defineKeyframes",
    ()=>defineKeyframes,
    "defineLayerStyles",
    ()=>defineLayerStyles,
    "defineRecipe",
    ()=>defineRecipe,
    "defineSemanticTokens",
    ()=>defineSemanticTokens,
    "defineSlotRecipe",
    ()=>defineSlotRecipe,
    "defineStyle",
    ()=>defineStyle,
    "defineTextStyles",
    ()=>defineTextStyles,
    "defineTokens",
    ()=>defineTokens
]);
"use strict";
;
const defineConditions = (v)=>v;
const defineRecipe = (v)=>v;
const defineSlotRecipe = (v)=>v;
const defineKeyframes = (v)=>v;
const defineGlobalStyles = (v)=>v;
const defineStyle = (v)=>v;
const defineTextStyles = (v)=>v;
const defineAnimationStyles = (v)=>v;
const defineLayerStyles = (v)=>v;
function createProxy() {
    const identity = (v)=>v;
    return new Proxy(identity, {
        get () {
            return identity;
        }
    });
}
const defineTokens = /* @__PURE__ */ createProxy();
const defineSemanticTokens = /* @__PURE__ */ createProxy();
const defineConfig = (v)=>v;
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/preset-base.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "defaultBaseConfig",
    ()=>defaultBaseConfig,
    "defaultConditions",
    ()=>defaultConditions
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/color-mix.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/config.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2d$var$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@chakra-ui/react/dist/esm/styled-system/css-var.js [app-client] (ecmascript)");
"use strict";
;
;
;
const isCssVar = (v)=>/^var\(--.+\)$/.test(v);
const wrap = (str, v)=>v != null ? "".concat(str, "(").concat(v, ")") : v;
const deg = (v)=>{
    if (isCssVar(v) || v == null) return v;
    const unitless = typeof v === "string" && !v.endsWith("deg");
    return typeof v === "number" || unitless ? "".concat(v, "deg") : v;
};
const createFocusRing = (selector)=>{
    return {
        values: [
            "outside",
            "inside",
            "mixed",
            "none"
        ],
        transform (value, param) {
            let { token } = param;
            const focusRingColor = token("colors.colorPalette.focusRing");
            const styles = {
                inside: {
                    "--focus-ring-color": focusRingColor,
                    [selector]: {
                        outlineOffset: "0px",
                        outlineWidth: "var(--focus-ring-width, 1px)",
                        outlineColor: "var(--focus-ring-color)",
                        outlineStyle: "var(--focus-ring-style, solid)",
                        borderColor: "var(--focus-ring-color)"
                    }
                },
                outside: {
                    "--focus-ring-color": focusRingColor,
                    [selector]: {
                        outlineWidth: "var(--focus-ring-width, 2px)",
                        outlineOffset: "var(--focus-ring-offset, 2px)",
                        outlineStyle: "var(--focus-ring-style, solid)",
                        outlineColor: "var(--focus-ring-color)"
                    }
                },
                mixed: {
                    "--focus-ring-color": focusRingColor,
                    [selector]: {
                        outlineWidth: "var(--focus-ring-width, 3px)",
                        outlineStyle: "var(--focus-ring-style, solid)",
                        outlineColor: "color-mix(in srgb, var(--focus-ring-color), transparent 60%)",
                        borderColor: "var(--focus-ring-color)"
                    }
                },
                none: {
                    "--focus-ring-color": focusRingColor,
                    [selector]: {
                        outline: "none"
                    }
                }
            };
            var _styles_value;
            return (_styles_value = styles[value]) !== null && _styles_value !== void 0 ? _styles_value : {};
        }
    };
};
const divideColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderColor");
const createTransition = (value)=>{
    return {
        transition: value,
        transitionTimingFunction: "cubic-bezier(0.4, 0, 0.2, 1)",
        transitionDuration: "150ms"
    };
};
const defaultConditions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["defineConditions"])({
    hover: [
        "@media (hover: hover)",
        "&:is(:hover, [data-hover]):not(:disabled, [data-disabled])"
    ],
    active: "&:is(:active, [data-active]):not(:disabled, [data-disabled], [data-state=open])",
    focus: "&:is(:focus, [data-focus])",
    focusWithin: "&:is(:focus-within, [data-focus-within])",
    focusVisible: "&:is(:focus-visible, [data-focus-visible])",
    disabled: "&:is(:disabled, [disabled], [data-disabled], [aria-disabled=true])",
    visited: "&:visited",
    target: "&:target",
    readOnly: "&:is([data-readonly], [aria-readonly=true], [readonly])",
    readWrite: "&:read-write",
    empty: "&:is(:empty, [data-empty])",
    checked: "&:is(:checked, [data-checked], [aria-checked=true], [data-state=checked])",
    enabled: "&:enabled",
    expanded: "&:is([aria-expanded=true], [data-expanded], [data-state=expanded])",
    highlighted: "&[data-highlighted]",
    complete: "&[data-complete]",
    incomplete: "&[data-incomplete]",
    dragging: "&[data-dragging]",
    before: "&::before",
    after: "&::after",
    firstLetter: "&::first-letter",
    firstLine: "&::first-line",
    marker: "&::marker",
    selection: "&::selection",
    file: "&::file-selector-button",
    backdrop: "&::backdrop",
    first: "&:first-of-type",
    last: "&:last-of-type",
    notFirst: "&:not(:first-of-type)",
    notLast: "&:not(:last-of-type)",
    only: "&:only-child",
    even: "&:nth-of-type(even)",
    odd: "&:nth-of-type(odd)",
    peerFocus: ".peer:is(:focus, [data-focus]) ~ &",
    peerHover: ".peer:is(:hover, [data-hover]):not(:disabled, [data-disabled]) ~ &",
    peerActive: ".peer:is(:active, [data-active]):not(:disabled, [data-disabled]) ~ &",
    peerFocusWithin: ".peer:focus-within ~ &",
    peerFocusVisible: ".peer:is(:focus-visible, [data-focus-visible]) ~ &",
    peerDisabled: ".peer:is(:disabled, [disabled], [data-disabled]) ~ &",
    peerChecked: ".peer:is(:checked, [data-checked], [aria-checked=true], [data-state=checked]) ~ &",
    peerInvalid: ".peer:is(:invalid, [data-invalid], [aria-invalid=true]) ~ &",
    peerExpanded: ".peer:is([aria-expanded=true], [data-expanded], [data-state=expanded]) ~ &",
    peerPlaceholderShown: ".peer:placeholder-shown ~ &",
    groupFocus: ".group:is(:focus, [data-focus]) &",
    groupHover: ".group:is(:hover, [data-hover]):not(:disabled, [data-disabled]) &",
    groupActive: ".group:is(:active, [data-active]):not(:disabled, [data-disabled]) &",
    groupFocusWithin: ".group:focus-within &",
    groupFocusVisible: ".group:is(:focus-visible, [data-focus-visible]) &",
    groupDisabled: ".group:is(:disabled, [disabled], [data-disabled]) &",
    groupChecked: ".group:is(:checked, [data-checked], [aria-checked=true], [data-state=checked]) &",
    groupExpanded: ".group:is([aria-expanded=true], [data-expanded], [data-state=expanded]) &",
    groupInvalid: ".group:invalid &",
    indeterminate: "&:is(:indeterminate, [data-indeterminate], [aria-checked=mixed], [data-state=indeterminate])",
    required: "&:is([data-required], [aria-required=true])",
    valid: "&:is([data-valid], [data-state=valid])",
    invalid: "&:is([data-invalid], [aria-invalid=true], [data-state=invalid])",
    autofill: "&:autofill",
    inRange: "&:is(:in-range, [data-in-range])",
    outOfRange: "&:is(:out-of-range, [data-outside-range])",
    placeholder: "&::placeholder, &[data-placeholder]",
    placeholderShown: "&:is(:placeholder-shown, [data-placeholder-shown])",
    pressed: "&:is([aria-pressed=true], [data-pressed])",
    selected: "&:is([aria-selected=true], [data-selected])",
    grabbed: "&:is([aria-grabbed=true], [data-grabbed])",
    underValue: "&[data-state=under-value]",
    overValue: "&[data-state=over-value]",
    atValue: "&[data-state=at-value]",
    default: "&:default",
    optional: "&:optional",
    open: "&:is([open], [data-open], [data-state=open])",
    closed: "&:is([closed], [data-closed], [data-state=closed])",
    fullscreen: "&:is(:fullscreen, [data-fullscreen])",
    loading: "&:is([data-loading], [aria-busy=true])",
    hidden: "&:is([hidden], [data-hidden])",
    current: "&[data-current]",
    currentPage: "&[aria-current=page]",
    currentStep: "&[aria-current=step]",
    today: "&[data-today]",
    unavailable: "&[data-unavailable]",
    rangeStart: "&[data-range-start]",
    rangeEnd: "&[data-range-end]",
    now: "&[data-now]",
    topmost: "&[data-topmost]",
    motionReduce: "@media (prefers-reduced-motion: reduce)",
    motionSafe: "@media (prefers-reduced-motion: no-preference)",
    print: "@media print",
    landscape: "@media (orientation: landscape)",
    portrait: "@media (orientation: portrait)",
    dark: ".dark &, .dark .chakra-theme:not(.light) &",
    light: ":root &, .light &",
    osDark: "@media (prefers-color-scheme: dark)",
    osLight: "@media (prefers-color-scheme: light)",
    highContrast: "@media (forced-colors: active)",
    lessContrast: "@media (prefers-contrast: less)",
    moreContrast: "@media (prefers-contrast: more)",
    ltr: "[dir=ltr] &",
    rtl: "[dir=rtl] &",
    scrollbar: "&::-webkit-scrollbar",
    scrollbarThumb: "&::-webkit-scrollbar-thumb",
    scrollbarTrack: "&::-webkit-scrollbar-track",
    horizontal: "&[data-orientation=horizontal]",
    vertical: "&[data-orientation=vertical]",
    icon: "& :where(svg)",
    starting: "@starting-style"
});
const currentBgVar = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$css$2d$var$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cssVar"])("bg-currentcolor");
const isCurrentBgVar = (value)=>value === currentBgVar.ref || value === "currentBg";
const colorValues = (theme)=>({
        ...theme("colors"),
        currentBg: currentBgVar
    });
const defaultBaseConfig = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["defineConfig"])({
    conditions: defaultConditions,
    utilities: {
        // background
        background: {
            values: colorValues,
            shorthand: [
                "bg"
            ],
            transform (value, args) {
                if (isCurrentBgVar(args.raw)) return {
                    background: currentBgVar.ref
                };
                const styleObj = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("background")(value, args);
                return {
                    ...styleObj,
                    [currentBgVar.var]: styleObj === null || styleObj === void 0 ? void 0 : styleObj.background
                };
            }
        },
        backgroundColor: {
            values: colorValues,
            shorthand: [
                "bgColor"
            ],
            transform (value, args) {
                if (isCurrentBgVar(args.raw)) return {
                    backgroundColor: currentBgVar.ref
                };
                const styleObj = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("backgroundColor")(value, args);
                return {
                    ...styleObj,
                    [currentBgVar.var]: styleObj === null || styleObj === void 0 ? void 0 : styleObj.backgroundColor
                };
            }
        },
        backgroundSize: {
            shorthand: [
                "bgSize"
            ]
        },
        backgroundPosition: {
            shorthand: [
                "bgPos"
            ]
        },
        backgroundRepeat: {
            shorthand: [
                "bgRepeat"
            ]
        },
        backgroundAttachment: {
            shorthand: [
                "bgAttachment"
            ]
        },
        backgroundClip: {
            shorthand: [
                "bgClip"
            ],
            values: [
                "text"
            ],
            transform (value) {
                return value === "text" ? {
                    color: "transparent",
                    backgroundClip: "text"
                } : {
                    backgroundClip: value
                };
            }
        },
        backgroundGradient: {
            shorthand: [
                "bgGradient"
            ],
            values (theme) {
                return {
                    ...theme("gradients"),
                    "to-t": "linear-gradient(to top, var(--gradient))",
                    "to-tr": "linear-gradient(to top right, var(--gradient))",
                    "to-r": "linear-gradient(to right, var(--gradient))",
                    "to-br": "linear-gradient(to bottom right, var(--gradient))",
                    "to-b": "linear-gradient(to bottom, var(--gradient))",
                    "to-bl": "linear-gradient(to bottom left, var(--gradient))",
                    "to-l": "linear-gradient(to left, var(--gradient))",
                    "to-tl": "linear-gradient(to top left, var(--gradient))"
                };
            },
            transform (value) {
                return {
                    "--gradient-stops": "var(--gradient-from), var(--gradient-to)",
                    "--gradient": "var(--gradient-via-stops, var(--gradient-stops))",
                    backgroundImage: value
                };
            }
        },
        gradientFrom: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("--gradient-from")
        },
        gradientTo: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("--gradient-to")
        },
        gradientVia: {
            values: colorValues,
            transform (value, args) {
                const styles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("--gradient-via")(value, args);
                return {
                    ...styles,
                    "--gradient-via-stops": "var(--gradient-from), var(--gradient-via), var(--gradient-to)"
                };
            }
        },
        backgroundImage: {
            values (theme) {
                return {
                    ...theme("gradients"),
                    ...theme("assets")
                };
            },
            shorthand: [
                "bgImg",
                "bgImage"
            ]
        },
        // border
        border: {
            values: "borders"
        },
        borderTop: {
            values: "borders"
        },
        borderLeft: {
            values: "borders"
        },
        borderBlockStart: {
            values: "borders"
        },
        borderRight: {
            values: "borders"
        },
        borderBottom: {
            values: "borders"
        },
        borderBlockEnd: {
            values: "borders"
        },
        borderInlineStart: {
            values: "borders",
            shorthand: [
                "borderStart"
            ]
        },
        borderInlineEnd: {
            values: "borders",
            shorthand: [
                "borderEnd"
            ]
        },
        borderInline: {
            values: "borders",
            shorthand: [
                "borderX"
            ]
        },
        borderBlock: {
            values: "borders",
            shorthand: [
                "borderY"
            ]
        },
        // border colors
        borderColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderColor")
        },
        borderTopColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderTopColor")
        },
        borderBlockStartColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderBlockStartColor")
        },
        borderBottomColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderBottomColor")
        },
        borderBlockEndColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderBlockEndColor")
        },
        borderLeftColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderLeftColor")
        },
        borderInlineStartColor: {
            values: colorValues,
            shorthand: [
                "borderStartColor"
            ],
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderInlineStartColor")
        },
        borderRightColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderRightColor")
        },
        borderInlineEndColor: {
            values: colorValues,
            shorthand: [
                "borderEndColor"
            ],
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("borderInlineEndColor")
        },
        // border styles
        borderStyle: {
            values: "borderStyles"
        },
        borderTopStyle: {
            values: "borderStyles"
        },
        borderBlockStartStyle: {
            values: "borderStyles"
        },
        borderBottomStyle: {
            values: "borderStyles"
        },
        borderBlockEndStyle: {
            values: "borderStyles"
        },
        borderInlineStartStyle: {
            values: "borderStyles",
            shorthand: [
                "borderStartStyle"
            ]
        },
        borderInlineEndStyle: {
            values: "borderStyles",
            shorthand: [
                "borderEndStyle"
            ]
        },
        borderLeftStyle: {
            values: "borderStyles"
        },
        borderRightStyle: {
            values: "borderStyles"
        },
        // border radius
        borderRadius: {
            values: "radii",
            shorthand: [
                "rounded"
            ]
        },
        borderTopLeftRadius: {
            values: "radii",
            shorthand: [
                "roundedTopLeft"
            ]
        },
        borderStartStartRadius: {
            values: "radii",
            shorthand: [
                "roundedStartStart",
                "borderTopStartRadius"
            ]
        },
        borderEndStartRadius: {
            values: "radii",
            shorthand: [
                "roundedEndStart",
                "borderBottomStartRadius"
            ]
        },
        borderTopRightRadius: {
            values: "radii",
            shorthand: [
                "roundedTopRight"
            ]
        },
        borderStartEndRadius: {
            values: "radii",
            shorthand: [
                "roundedStartEnd",
                "borderTopEndRadius"
            ]
        },
        borderEndEndRadius: {
            values: "radii",
            shorthand: [
                "roundedEndEnd",
                "borderBottomEndRadius"
            ]
        },
        borderBottomLeftRadius: {
            values: "radii",
            shorthand: [
                "roundedBottomLeft"
            ]
        },
        borderBottomRightRadius: {
            values: "radii",
            shorthand: [
                "roundedBottomRight"
            ]
        },
        borderInlineStartRadius: {
            values: "radii",
            property: "borderRadius",
            shorthand: [
                "roundedStart",
                "borderStartRadius"
            ],
            transform: (value)=>({
                    borderStartStartRadius: value,
                    borderEndStartRadius: value
                })
        },
        borderInlineEndRadius: {
            values: "radii",
            property: "borderRadius",
            shorthand: [
                "roundedEnd",
                "borderEndRadius"
            ],
            transform: (value)=>({
                    borderStartEndRadius: value,
                    borderEndEndRadius: value
                })
        },
        borderTopRadius: {
            values: "radii",
            property: "borderRadius",
            shorthand: [
                "roundedTop"
            ],
            transform: (value)=>({
                    borderTopLeftRadius: value,
                    borderTopRightRadius: value
                })
        },
        borderBottomRadius: {
            values: "radii",
            property: "borderRadius",
            shorthand: [
                "roundedBottom"
            ],
            transform: (value)=>({
                    borderBottomLeftRadius: value,
                    borderBottomRightRadius: value
                })
        },
        borderLeftRadius: {
            values: "radii",
            property: "borderRadius",
            shorthand: [
                "roundedLeft"
            ],
            transform: (value)=>({
                    borderTopLeftRadius: value,
                    borderBottomLeftRadius: value
                })
        },
        borderRightRadius: {
            values: "radii",
            property: "borderRadius",
            shorthand: [
                "roundedRight"
            ],
            transform: (value)=>({
                    borderTopRightRadius: value,
                    borderBottomRightRadius: value
                })
        },
        borderWidth: {
            values: "borderWidths"
        },
        borderBlockStartWidth: {
            values: "borderWidths"
        },
        borderTopWidth: {
            values: "borderWidths"
        },
        borderBottomWidth: {
            values: "borderWidths"
        },
        borderBlockEndWidth: {
            values: "borderWidths"
        },
        borderRightWidth: {
            values: "borderWidths"
        },
        borderInlineWidth: {
            values: "borderWidths",
            shorthand: [
                "borderXWidth"
            ]
        },
        borderInlineStartWidth: {
            values: "borderWidths",
            shorthand: [
                "borderStartWidth"
            ]
        },
        borderInlineEndWidth: {
            values: "borderWidths",
            shorthand: [
                "borderEndWidth"
            ]
        },
        borderLeftWidth: {
            values: "borderWidths"
        },
        borderBlockWidth: {
            values: "borderWidths",
            shorthand: [
                "borderYWidth"
            ]
        },
        // colors
        color: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("color")
        },
        fill: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("fill")
        },
        stroke: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("stroke")
        },
        accentColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("accentColor")
        },
        // divide
        divideX: {
            values: {
                type: "string"
            },
            transform (value) {
                return {
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
                        borderInlineStartWidth: value,
                        borderInlineEndWidth: "0px"
                    }
                };
            }
        },
        divideY: {
            values: {
                type: "string"
            },
            transform (value) {
                return {
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
                        borderTopWidth: value,
                        borderBottomWidth: "0px"
                    }
                };
            }
        },
        divideColor: {
            values: colorValues,
            transform (value, args) {
                return {
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": divideColor(value, args)
                };
            }
        },
        divideStyle: {
            property: "borderStyle",
            transform (value) {
                return {
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
                        borderStyle: value
                    }
                };
            }
        },
        // effects
        boxShadow: {
            values: "shadows",
            shorthand: [
                "shadow"
            ]
        },
        boxShadowColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("--shadow-color"),
            shorthand: [
                "shadowColor"
            ]
        },
        mixBlendMode: {
            shorthand: [
                "blendMode"
            ]
        },
        backgroundBlendMode: {
            shorthand: [
                "bgBlendMode"
            ]
        },
        opacity: {
            values: "opacity"
        },
        // filters
        filter: {
            transform (v) {
                if (v !== "auto") {
                    return {
                        filter: v
                    };
                }
                return {
                    filter: "var(--blur) var(--brightness) var(--contrast) var(--grayscale) var(--hue-rotate) var(--invert) var(--saturate) var(--sepia) var(--drop-shadow)"
                };
            }
        },
        blur: {
            values: "blurs",
            transform: (v)=>({
                    "--blur": wrap("blur", v)
                })
        },
        brightness: {
            transform: (v)=>({
                    "--brightness": wrap("brightness", v)
                })
        },
        contrast: {
            transform: (v)=>({
                    "--contrast": wrap("contrast", v)
                })
        },
        grayscale: {
            transform: (v)=>({
                    "--grayscale": wrap("grayscale", v)
                })
        },
        hueRotate: {
            transform: (v)=>({
                    "--hue-rotate": wrap("hue-rotate", deg(v))
                })
        },
        invert: {
            transform: (v)=>({
                    "--invert": wrap("invert", v)
                })
        },
        saturate: {
            transform: (v)=>({
                    "--saturate": wrap("saturate", v)
                })
        },
        sepia: {
            transform: (v)=>({
                    "--sepia": wrap("sepia", v)
                })
        },
        dropShadow: {
            transform: (v)=>({
                    "--drop-shadow": wrap("drop-shadow", v)
                })
        },
        // backdrop filters
        backdropFilter: {
            transform (v) {
                if (v !== "auto") {
                    return {
                        backdropFilter: v
                    };
                }
                return {
                    backdropFilter: "var(--backdrop-blur) var(--backdrop-brightness) var(--backdrop-contrast) var(--backdrop-grayscale) var(--backdrop-hue-rotate) var(--backdrop-invert) var(--backdrop-opacity) var(--backdrop-saturate) var(--backdrop-sepia)"
                };
            }
        },
        backdropBlur: {
            values: "blurs",
            transform: (v)=>({
                    "--backdrop-blur": wrap("blur", v)
                })
        },
        backdropBrightness: {
            transform: (v)=>({
                    "--backdrop-brightness": wrap("brightness", v)
                })
        },
        backdropContrast: {
            transform: (v)=>({
                    "--backdrop-contrast": wrap("contrast", v)
                })
        },
        backdropGrayscale: {
            transform: (v)=>({
                    "--backdrop-grayscale": wrap("grayscale", v)
                })
        },
        backdropHueRotate: {
            transform: (v)=>({
                    "--backdrop-hue-rotate": wrap("hue-rotate", deg(v))
                })
        },
        backdropInvert: {
            transform: (v)=>({
                    "--backdrop-invert": wrap("invert", v)
                })
        },
        backdropOpacity: {
            transform: (v)=>({
                    "--backdrop-opacity": wrap("opacity", v)
                })
        },
        backdropSaturate: {
            transform: (v)=>({
                    "--backdrop-saturate": wrap("saturate", v)
                })
        },
        backdropSepia: {
            transform: (v)=>({
                    "--backdrop-sepia": wrap("sepia", v)
                })
        },
        // flexbox
        flexBasis: {
            values: "sizes"
        },
        gap: {
            values: "spacing"
        },
        rowGap: {
            values: "spacing",
            shorthand: [
                "gapY"
            ]
        },
        columnGap: {
            values: "spacing",
            shorthand: [
                "gapX"
            ]
        },
        flexDirection: {
            shorthand: [
                "flexDir"
            ]
        },
        // grid
        gridGap: {
            values: "spacing"
        },
        gridColumnGap: {
            values: "spacing"
        },
        gridRowGap: {
            values: "spacing"
        },
        // interactivity
        outlineColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("outlineColor")
        },
        focusRing: createFocusRing("&:is(:focus, [data-focus])"),
        focusVisibleRing: createFocusRing("&:is(:focus-visible, [data-focus-visible])"),
        focusRingColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("--focus-ring-color")
        },
        focusRingOffset: {
            values: "spacing",
            transform: (v)=>({
                    "--focus-ring-offset": v
                })
        },
        focusRingWidth: {
            values: "borderWidths",
            property: "outlineWidth",
            transform: (v)=>({
                    "--focus-ring-width": v
                })
        },
        focusRingStyle: {
            values: "borderStyles",
            property: "outlineStyle",
            transform: (v)=>({
                    "--focus-ring-style": v
                })
        },
        // layout
        aspectRatio: {
            values: "aspectRatios"
        },
        width: {
            values: "sizes",
            shorthand: [
                "w"
            ]
        },
        inlineSize: {
            values: "sizes"
        },
        height: {
            values: "sizes",
            shorthand: [
                "h"
            ]
        },
        blockSize: {
            values: "sizes"
        },
        boxSize: {
            values: "sizes",
            property: "width",
            transform: (v)=>({
                    width: v,
                    height: v
                })
        },
        minWidth: {
            values: "sizes",
            shorthand: [
                "minW"
            ]
        },
        minInlineSize: {
            values: "sizes"
        },
        minHeight: {
            values: "sizes",
            shorthand: [
                "minH"
            ]
        },
        minBlockSize: {
            values: "sizes"
        },
        maxWidth: {
            values: "sizes",
            shorthand: [
                "maxW"
            ]
        },
        maxInlineSize: {
            values: "sizes"
        },
        maxHeight: {
            values: "sizes",
            shorthand: [
                "maxH"
            ]
        },
        maxBlockSize: {
            values: "sizes"
        },
        hideFrom: {
            values: "breakpoints",
            //@ts-ignore
            transform: (value, param)=>{
                let { raw, token } = param;
                const bp = token.raw("breakpoints.".concat(raw));
                const media = bp ? "@breakpoint ".concat(raw) : "@media screen and (min-width: ".concat(value, ")");
                return {
                    [media]: {
                        display: "none"
                    }
                };
            }
        },
        hideBelow: {
            values: "breakpoints",
            //@ts-ignore
            transform (value, param) {
                let { raw, token } = param;
                const bp = token.raw("breakpoints.".concat(raw));
                const media = bp ? "@breakpoint ".concat(raw, "Down") : "@media screen and (max-width: ".concat(value, ")");
                return {
                    [media]: {
                        display: "none"
                    }
                };
            }
        },
        // scroll
        overscrollBehavior: {
            shorthand: [
                "overscroll"
            ]
        },
        overscrollBehaviorX: {
            shorthand: [
                "overscrollX"
            ]
        },
        overscrollBehaviorY: {
            shorthand: [
                "overscrollY"
            ]
        },
        scrollbar: {
            values: [
                "visible",
                "hidden"
            ],
            transform (v) {
                switch(v){
                    case "visible":
                        return {
                            msOverflowStyle: "auto",
                            scrollbarWidth: "auto",
                            "&::-webkit-scrollbar": {
                                display: "block"
                            }
                        };
                    case "hidden":
                        return {
                            msOverflowStyle: "none",
                            scrollbarWidth: "none",
                            "&::-webkit-scrollbar": {
                                display: "none"
                            }
                        };
                    default:
                        return {};
                }
            }
        },
        scrollbarColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("scrollbarColor")
        },
        scrollbarGutter: {
            values: "spacing"
        },
        scrollbarWidth: {
            values: "sizes"
        },
        // scroll margin
        scrollMargin: {
            values: "spacing"
        },
        scrollMarginTop: {
            values: "spacing"
        },
        scrollMarginBottom: {
            values: "spacing"
        },
        scrollMarginLeft: {
            values: "spacing"
        },
        scrollMarginRight: {
            values: "spacing"
        },
        scrollMarginX: {
            values: "spacing",
            transform: (v)=>({
                    scrollMarginLeft: v,
                    scrollMarginRight: v
                })
        },
        scrollMarginY: {
            values: "spacing",
            transform: (v)=>({
                    scrollMarginTop: v,
                    scrollMarginBottom: v
                })
        },
        // scroll padding
        scrollPadding: {
            values: "spacing"
        },
        scrollPaddingTop: {
            values: "spacing"
        },
        scrollPaddingBottom: {
            values: "spacing"
        },
        scrollPaddingLeft: {
            values: "spacing"
        },
        scrollPaddingRight: {
            values: "spacing"
        },
        scrollPaddingInline: {
            values: "spacing",
            shorthand: [
                "scrollPaddingX"
            ]
        },
        scrollPaddingBlock: {
            values: "spacing",
            shorthand: [
                "scrollPaddingY"
            ]
        },
        // scroll snap
        scrollSnapType: {
            values: {
                none: "none",
                x: "x var(--scroll-snap-strictness)",
                y: "y var(--scroll-snap-strictness)",
                both: "both var(--scroll-snap-strictness)"
            }
        },
        scrollSnapStrictness: {
            values: [
                "mandatory",
                "proximity"
            ],
            transform: (v)=>({
                    "--scroll-snap-strictness": v
                })
        },
        scrollSnapMargin: {
            values: "spacing"
        },
        scrollSnapMarginTop: {
            values: "spacing"
        },
        scrollSnapMarginBottom: {
            values: "spacing"
        },
        scrollSnapMarginLeft: {
            values: "spacing"
        },
        scrollSnapMarginRight: {
            values: "spacing"
        },
        // list
        listStylePosition: {
            shorthand: [
                "listStylePos"
            ]
        },
        listStyleImage: {
            values: "assets",
            shorthand: [
                "listStyleImg"
            ]
        },
        // position
        position: {
            shorthand: [
                "pos"
            ]
        },
        zIndex: {
            values: "zIndex"
        },
        inset: {
            values: "spacing"
        },
        insetInline: {
            values: "spacing",
            shorthand: [
                "insetX"
            ]
        },
        insetBlock: {
            values: "spacing",
            shorthand: [
                "insetY"
            ]
        },
        top: {
            values: "spacing"
        },
        insetBlockStart: {
            values: "spacing"
        },
        bottom: {
            values: "spacing"
        },
        insetBlockEnd: {
            values: "spacing"
        },
        left: {
            values: "spacing"
        },
        right: {
            values: "spacing"
        },
        insetInlineStart: {
            values: "spacing",
            shorthand: [
                "insetStart"
            ]
        },
        insetInlineEnd: {
            values: "spacing",
            shorthand: [
                "insetEnd"
            ]
        },
        // shadow / ring
        ring: {
            transform (value) {
                return {
                    "--ring-offset-shadow": "var(--ring-inset) 0 0 0 var(--ring-offset-width) var(--ring-offset-color)",
                    "--ring-shadow": "var(--ring-inset) 0 0 0 calc(var(--ring-width) + var(--ring-offset-width)) var(--ring-color)",
                    "--ring-width": value,
                    boxShadow: "var(--ring-offset-shadow), var(--ring-shadow), var(--shadow, 0 0 #0000)"
                };
            }
        },
        ringColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("--ring-color")
        },
        ringOffset: {
            transform: (value)=>({
                    "--ring-offset-width": value
                })
        },
        ringOffsetColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("--ring-offset-color")
        },
        ringInset: {
            transform: (v)=>({
                    "--ring-inset": v
                })
        },
        // margin
        margin: {
            values: "spacing",
            shorthand: [
                "m"
            ]
        },
        marginTop: {
            values: "spacing",
            shorthand: [
                "mt"
            ]
        },
        marginBlockStart: {
            values: "spacing"
        },
        marginRight: {
            values: "spacing",
            shorthand: [
                "mr"
            ]
        },
        marginBottom: {
            values: "spacing",
            shorthand: [
                "mb"
            ]
        },
        marginBlockEnd: {
            values: "spacing"
        },
        marginLeft: {
            values: "spacing",
            shorthand: [
                "ml"
            ]
        },
        marginInlineStart: {
            values: "spacing",
            shorthand: [
                "ms",
                "marginStart"
            ]
        },
        marginInlineEnd: {
            values: "spacing",
            shorthand: [
                "me",
                "marginEnd"
            ]
        },
        marginInline: {
            values: "spacing",
            shorthand: [
                "mx",
                "marginX"
            ]
        },
        marginBlock: {
            values: "spacing",
            shorthand: [
                "my",
                "marginY"
            ]
        },
        // padding
        padding: {
            values: "spacing",
            shorthand: [
                "p"
            ]
        },
        paddingTop: {
            values: "spacing",
            shorthand: [
                "pt"
            ]
        },
        paddingRight: {
            values: "spacing",
            shorthand: [
                "pr"
            ]
        },
        paddingBottom: {
            values: "spacing",
            shorthand: [
                "pb"
            ]
        },
        paddingBlockStart: {
            values: "spacing"
        },
        paddingBlockEnd: {
            values: "spacing"
        },
        paddingLeft: {
            values: "spacing",
            shorthand: [
                "pl"
            ]
        },
        paddingInlineStart: {
            values: "spacing",
            shorthand: [
                "ps",
                "paddingStart"
            ]
        },
        paddingInlineEnd: {
            values: "spacing",
            shorthand: [
                "pe",
                "paddingEnd"
            ]
        },
        paddingInline: {
            values: "spacing",
            shorthand: [
                "px",
                "paddingX"
            ]
        },
        paddingBlock: {
            values: "spacing",
            shorthand: [
                "py",
                "paddingY"
            ]
        },
        // text decoration
        textDecoration: {
            shorthand: [
                "textDecor"
            ]
        },
        textDecorationColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("textDecorationColor")
        },
        textShadow: {
            values: "shadows"
        },
        // transform
        transform: {
            transform: (value)=>{
                let v = value;
                if (value === "auto") {
                    v = "translateX(var(--translate-x, 0)) translateY(var(--translate-y, 0)) rotate(var(--rotate, 0)) scaleX(var(--scale-x, 1)) scaleY(var(--scale-y, 1)) skewX(var(--skew-x, 0)) skewY(var(--skew-y, 0))";
                }
                if (value === "auto-gpu") {
                    v = "translate3d(var(--translate-x, 0), var(--translate-y, 0), 0) rotate(var(--rotate, 0)) scaleX(var(--scale-x, 1)) scaleY(var(--scale-y, 1)) skewX(var(--skew-x, 0)) skewY(var(--skew-y, 0))";
                }
                return {
                    transform: v
                };
            }
        },
        skewX: {
            transform: (v)=>({
                    "--skew-x": deg(v)
                })
        },
        skewY: {
            transform: (v)=>({
                    "--skew-y": deg(v)
                })
        },
        scaleX: {
            transform: (v)=>({
                    "--scale-x": v
                })
        },
        scaleY: {
            transform: (v)=>({
                    "--scale-y": v
                })
        },
        scale: {
            transform (value) {
                if (value !== "auto") return {
                    scale: value
                };
                return {
                    scale: "var(--scale-x, 1) var(--scale-y, 1)"
                };
            }
        },
        spaceXReverse: {
            values: {
                type: "boolean"
            },
            transform (value) {
                return {
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
                        "--space-x-reverse": value ? "1" : void 0
                    }
                };
            }
        },
        spaceX: {
            property: "marginInlineStart",
            values: "spacing",
            transform: (v)=>({
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
                        "--space-x-reverse": "0",
                        marginInlineStart: "calc(".concat(v, " * calc(1 - var(--space-x-reverse)))"),
                        marginInlineEnd: "calc(".concat(v, " * var(--space-x-reverse))")
                    }
                })
        },
        spaceYReverse: {
            values: {
                type: "boolean"
            },
            transform (value) {
                return {
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
                        "--space-y-reverse": value ? "1" : void 0
                    }
                };
            }
        },
        spaceY: {
            property: "marginTop",
            values: "spacing",
            transform: (v)=>({
                    "& > :not(style, [hidden]) ~ :not(style, [hidden])": {
                        "--space-y-reverse": "0",
                        marginTop: "calc(".concat(v, " * calc(1 - var(--space-y-reverse)))"),
                        marginBottom: "calc(".concat(v, " * var(--space-y-reverse))")
                    }
                })
        },
        rotate: {
            transform (value) {
                if (value !== "auto") return {
                    rotate: deg(value)
                };
                return {
                    rotate: "var(--rotate-x, 0) var(--rotate-y, 0) var(--rotate-z, 0)"
                };
            }
        },
        rotateX: {
            transform (value) {
                return {
                    "--rotate-x": deg(value)
                };
            }
        },
        rotateY: {
            transform (value) {
                return {
                    "--rotate-y": deg(value)
                };
            }
        },
        // transform / translate
        translate: {
            transform (value) {
                if (value !== "auto") return {
                    translate: value
                };
                return {
                    translate: "var(--translate-x) var(--translate-y)"
                };
            }
        },
        translateX: {
            values: "spacing",
            transform: (v)=>({
                    "--translate-x": v
                })
        },
        translateY: {
            values: "spacing",
            transform: (v)=>({
                    "--translate-y": v
                })
        },
        // transition
        transition: {
            values: [
                "all",
                "common",
                "colors",
                "opacity",
                "position",
                "backgrounds",
                "size",
                "shadow",
                "transform"
            ],
            transform (value) {
                switch(value){
                    case "all":
                        return createTransition("all");
                    case "position":
                        return createTransition("left, right, top, bottom, inset-inline, inset-block");
                    case "colors":
                        return createTransition("color, background-color, border-color, text-decoration-color, fill, stroke");
                    case "opacity":
                        return createTransition("opacity");
                    case "shadow":
                        return createTransition("box-shadow");
                    case "transform":
                        return createTransition("transform");
                    case "size":
                        return createTransition("width, height");
                    case "backgrounds":
                        return createTransition("background, background-color, background-image, background-position");
                    case "common":
                        return createTransition("color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter");
                    default:
                        return {
                            transition: value
                        };
                }
            }
        },
        transitionDuration: {
            values: "durations"
        },
        transitionProperty: {
            values: {
                common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, translate, transform",
                colors: "background-color, border-color, color, fill, stroke",
                size: "width, height",
                position: "left, right, top, bottom, inset-inline, inset-block",
                background: "background, background-color, background-image, background-position"
            }
        },
        transitionTimingFunction: {
            values: "easings"
        },
        // animation
        animation: {
            values: "animations"
        },
        animationDuration: {
            values: "durations"
        },
        animationDelay: {
            values: "durations"
        },
        animationTimingFunction: {
            values: "easings"
        },
        // typography
        fontFamily: {
            values: "fonts"
        },
        fontSize: {
            values: "fontSizes"
        },
        fontWeight: {
            values: "fontWeights"
        },
        lineHeight: {
            values: "lineHeights"
        },
        letterSpacing: {
            values: "letterSpacings"
        },
        textIndent: {
            values: "spacing"
        },
        truncate: {
            values: {
                type: "boolean"
            },
            transform (value) {
                if (value === true) {
                    return {
                        overflow: "hidden",
                        textOverflow: "ellipsis",
                        whiteSpace: "nowrap"
                    };
                }
                return {};
            }
        },
        lineClamp: {
            transform (value) {
                if (value === "none") {
                    return {
                        WebkitLineClamp: "unset"
                    };
                }
                return {
                    overflow: "hidden",
                    display: "-webkit-box",
                    WebkitLineClamp: value,
                    WebkitBoxOrient: "vertical",
                    textWrap: "wrap"
                };
            }
        },
        // table
        borderSpacing: {
            values: (token)=>({
                    ...token("spacing"),
                    auto: "var(--border-spacing-x, 0) var(--border-spacing-y, 0)"
                })
        },
        borderSpacingX: {
            values: "spacing",
            transform (value) {
                return {
                    "--border-spacing-x": value
                };
            }
        },
        borderSpacingY: {
            values: "spacing",
            transform (value) {
                return {
                    "--border-spacing-y": value
                };
            }
        },
        // helpers
        srOnly: {
            values: {
                type: "boolean"
            },
            transform (value) {
                return srMapping[value] || {};
            }
        },
        debug: {
            values: {
                type: "boolean"
            },
            transform (value) {
                if (!value) return {};
                return {
                    outline: "1px solid blue !important",
                    "& > *": {
                        outline: "1px solid red !important"
                    }
                };
            }
        },
        caretColor: {
            values: colorValues,
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chakra$2d$ui$2f$react$2f$dist$2f$esm$2f$styled$2d$system$2f$color$2d$mix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColorMixTransform"])("caretColor")
        },
        cursor: {
            values: "cursor"
        }
    }
});
const srMapping = {
    true: {
        position: "absolute",
        width: "1px",
        height: "1px",
        padding: "0",
        margin: "-1px",
        overflow: "hidden",
        clip: "rect(0, 0, 0, 0)",
        whiteSpace: "nowrap",
        borderWidth: "0"
    },
    false: {
        position: "static",
        width: "auto",
        height: "auto",
        padding: "0",
        margin: "0",
        overflow: "visible",
        clip: "auto",
        whiteSpace: "normal"
    }
};
;
}),
"[project]/node_modules/@chakra-ui/react/dist/esm/anatomy.js [app-client] (ecmascript) <locals>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "accordionAnatomy",
    ()=>accordionAnatomy,
    "actionBarAnatomy",
    ()=>actionBarAnatomy,
    "alertAnatomy",
    ()=>alertAnatomy,
    "blockquoteAnatomy",
    ()=>blockquoteAnatomy,
    "breadcrumbAnatomy",
    ()=>breadcrumbAnatomy,
    "cardAnatomy",
    ()=>cardAnatomy,
    "checkboxCardAnatomy",
    ()=>checkboxCardAnatomy,
    "clipboardAnatomy",
    ()=>clipboardAnatomy,
    "codeBlockAnatomy",
    ()=>codeBlockAnatomy,
    "colorPickerAnatomy",
    ()=>colorPickerAnatomy,
    "comboboxAnatomy",
    ()=>comboboxAnatomy,
    "dataListAnatomy",
    ()=>dataListAnatomy,
    "dialogAnatomy",
    ()=>dialogAnatomy,
    "drawerAnatomy",
    ()=>drawerAnatomy,
    "editableAnatomy",
    ()=>editableAnatomy,
    "emptyStateAnatomy",
    ()=>emptyStateAnatomy,
    "fieldAnatomy",
    ()=>fieldAnatomy,
    "fieldsetAnatomy",
    ()=>fieldsetAnatomy,
    "fileUploadAnatomy",
    ()=>fileUploadAnatomy,
    "listAnatomy",
    ()=>listAnatomy,
    "listboxAnatomy",
    ()=>listboxAnatomy,
    "menuAnatomy",
    ()=>menuAnatomy,
    "nativeSelectAnatomy",
    ()=>nativeSelectAnatomy,
    "popoverAnatomy",
    ()=>popoverAnatomy,
    "radioCardAnatomy",
    ()=>radioCardAnatomy,
    "radioGroupAnatomy",
    ()=>radioGroupAnatomy,
    "ratingGroupAnatomy",
    ()=>ratingGroupAnatomy,
    "selectAnatomy",
    ()=>selectAnatomy,
    "sliderAnatomy",
    ()=>sliderAnatomy,
    "statAnatomy",
    ()=>statAnatomy,
    "statusAnatomy",
    ()=>statusAnatomy,
    "stepsAnatomy",
    ()=>stepsAnatomy,
    "switchAnatomy",
    ()=>switchAnatomy,
    "tableAnatomy",
    ()=>tableAnatomy,
    "tabsAnatomy",
    ()=>tabsAnatomy,
    "tagAnatomy",
    ()=>tagAnatomy,
    "timelineAnatomy",
    ()=>timelineAnatomy,
    "toastAnatomy",
    ()=>toastAnatomy
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$combobox$2f$combobox$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ark-ui/react/dist/components/combobox/combobox.anatomy.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$accordion$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__accordionAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/accordion/dist/index.mjs [app-client] (ecmascript) <export anatomy as accordionAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$clipboard$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__clipboardAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/clipboard/dist/index.mjs [app-client] (ecmascript) <export anatomy as clipboardAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$color$2d$picker$2f$color$2d$picker$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ark-ui/react/dist/components/color-picker/color-picker.anatomy.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dialog$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__dialogAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dialog/dist/index.mjs [app-client] (ecmascript) <export anatomy as dialogAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$editable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__editableAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/editable/dist/index.mjs [app-client] (ecmascript) <export anatomy as editableAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$field$2f$field$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ark-ui/react/dist/components/field/field.anatomy.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$fieldset$2f$fieldset$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ark-ui/react/dist/components/fieldset/fieldset.anatomy.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$upload$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__fileUploadAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/file-upload/dist/index.mjs [app-client] (ecmascript) <export anatomy as fileUploadAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$listbox$2f$listbox$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ark-ui/react/dist/components/listbox/listbox.anatomy.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$menu$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__menuAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/menu/dist/index.mjs [app-client] (ecmascript) <export anatomy as menuAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popover$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__popoverAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/popover/dist/index.mjs [app-client] (ecmascript) <export anatomy as popoverAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$radio$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__radioGroupAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/radio-group/dist/index.mjs [app-client] (ecmascript) <export anatomy as radioGroupAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$rating$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__ratingGroupAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/rating-group/dist/index.mjs [app-client] (ecmascript) <export anatomy as ratingGroupAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$select$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__selectAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/select/dist/index.mjs [app-client] (ecmascript) <export anatomy as selectAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$slider$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__sliderAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/slider/dist/index.mjs [app-client] (ecmascript) <export anatomy as sliderAnatomy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$switch$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__switchAnatomy$3e$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/switch/dist/index.mjs [app-client] (ecmascript) <export anatomy as switchAnatomy>");
"use strict";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const accordionAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$accordion$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__accordionAnatomy$3e$__["accordionAnatomy"].extendWith("itemBody");
const actionBarAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("action-bar").parts("positioner", "content", "separator", "selectionTrigger", "closeTrigger");
const alertAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("alert").parts("title", "description", "root", "indicator", "content");
const breadcrumbAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("breadcrumb").parts("link", "currentLink", "item", "list", "root", "ellipsis", "separator");
const blockquoteAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("blockquote").parts("root", "icon", "content", "caption");
const cardAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("card").parts("root", "header", "body", "footer", "title", "description");
const checkboxCardAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("checkbox-card", [
    "root",
    "control",
    "label",
    "description",
    "addon",
    "indicator",
    "content"
]);
const dataListAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("data-list").parts("root", "item", "itemLabel", "itemValue");
const dialogAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dialog$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__dialogAnatomy$3e$__["dialogAnatomy"].extendWith("header", "body", "footer", "backdrop");
const drawerAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dialog$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__dialogAnatomy$3e$__["dialogAnatomy"].extendWith("header", "body", "footer", "backdrop");
const editableAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$editable$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__editableAnatomy$3e$__["editableAnatomy"].extendWith("textarea");
const emptyStateAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("empty-state", [
    "root",
    "content",
    "indicator",
    "title",
    "description"
]);
const fieldAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$field$2f$field$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fieldAnatomy"].extendWith("requiredIndicator");
const fieldsetAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$fieldset$2f$fieldset$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fieldsetAnatomy"].extendWith("content");
const fileUploadAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$file$2d$upload$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__fileUploadAnatomy$3e$__["fileUploadAnatomy"].extendWith("itemContent", "dropzoneContent", "fileText");
const listAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("list").parts("root", "item", "indicator");
const menuAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$menu$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__menuAnatomy$3e$__["menuAnatomy"].extendWith("itemCommand");
const nativeSelectAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("select").parts("root", "field", "indicator");
const popoverAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$popover$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__popoverAnatomy$3e$__["popoverAnatomy"].extendWith("header", "body", "footer");
const radioGroupAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$radio$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__radioGroupAnatomy$3e$__["radioGroupAnatomy"].extendWith("itemAddon", "itemIndicator");
const radioCardAnatomy = radioGroupAnatomy.extendWith("itemContent", "itemDescription");
const ratingGroupAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$rating$2d$group$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__ratingGroupAnatomy$3e$__["ratingGroupAnatomy"].extendWith("itemIndicator");
const selectAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$select$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__selectAnatomy$3e$__["selectAnatomy"].extendWith("indicatorGroup");
const comboboxAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$combobox$2f$combobox$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["comboboxAnatomy"].extendWith("indicatorGroup", "empty");
const sliderAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$slider$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__sliderAnatomy$3e$__["sliderAnatomy"].extendWith("markerIndicator");
const statAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("stat").parts("root", "label", "helpText", "valueText", "valueUnit", "indicator");
const statusAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("status").parts("root", "indicator");
const stepsAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("steps", [
    "root",
    "list",
    "item",
    "trigger",
    "indicator",
    "separator",
    "content",
    "title",
    "description",
    "nextTrigger",
    "prevTrigger",
    "progress"
]);
const switchAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$switch$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__switchAnatomy$3e$__["switchAnatomy"].extendWith("indicator");
const tableAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("table").parts("root", "header", "body", "row", "columnHeader", "cell", "footer", "caption");
const toastAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("toast").parts("root", "title", "description", "indicator", "closeTrigger", "actionTrigger");
const tabsAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("tabs").parts("root", "trigger", "list", "content", "contentGroup", "indicator");
const tagAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("tag").parts("root", "label", "closeTrigger", "startElement", "endElement");
const timelineAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("timeline").parts("root", "item", "content", "separator", "indicator", "connector", "title", "description");
const colorPickerAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$color$2d$picker$2f$color$2d$picker$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["colorPickerAnatomy"].extendWith("channelText");
const codeBlockAnatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("code-block", [
    "root",
    "content",
    "title",
    "header",
    "footer",
    "control",
    "overlay",
    "code",
    "codeText",
    "copyTrigger",
    "copyIndicator",
    "collapseTrigger",
    "collapseIndicator",
    "collapseText"
]);
const clipboardAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$clipboard$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__anatomy__as__clipboardAnatomy$3e$__["clipboardAnatomy"].extendWith("valueText");
const listboxAnatomy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ark$2d$ui$2f$react$2f$dist$2f$components$2f$listbox$2f$listbox$2e$anatomy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["listboxAnatomy"];
;
}),
]);

//# sourceMappingURL=node_modules_%40chakra-ui_react_dist_esm_62bb74d0._.js.map